##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.5.2] date: [Fri Nov 29 15:56:19 CST 2019]
##########################################################################################################################
# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
# 2019-02-01 - first version
# ------------------------------------------------
######################################
# target
######################################
TARGET = app
ENCRYPTION = 0
######################################
# building variables
######################################
# debug build?
DEBUG = 0
# optimization
#OPT = -Og
OPT = -O1
#######################################
# paths
#######################################
# Build path
BUILD_DIR = build
BIN_DIR = bin
######################################
# source
######################################
# C sources
C_SOURCES =  \
../../../../src/mcu/rtl876x/system_rtl876x.c \
../../../../src/mcu/peripheral/rtl876x_io_dlps.c \
../../../../src/mcu/peripheral/rtl876x_gpio.c \
../../../../src/mcu/peripheral/rtl876x_ir.c \
../../../../src/mcu/peripheral/rtl876x_keyscan.c \
../../../../src/mcu/peripheral/rtl876x_rtc.c \
../../../../src/mcu/peripheral/rtl876x_codec.c \
../../../../src/mcu/peripheral/rtl876x_i2s.c \
../../../../src/mcu/peripheral/rtl876x_pinmux.c \
../../../../src/mcu/peripheral/rtl876x_nvic.c \
../../../../src/mcu/peripheral/rtl876x_rcc.c \
../../../../src/mcu/peripheral/rtl876x_tim.c \
../../../../src/mcu/peripheral/rtl876x_gdma.c \
../../../../src/mcu/peripheral/rtl876x_uart.c \
../../../../src/mcu/peripheral/rtl876x_adc.c \
../../../../src/mcu/peripheral/rtl876x_lpc.c \
../../../../src/mcu/peripheral/rtl876x_aon_wdg.c \
../../../../src/ble/profile/server/dis.c \
../../../../src/ble/profile/server/bas.c \
../../../../src/ble/profile/server/hids_rmc.c \
../../../../src/ble/profile/server/vendor_service.c \
../../../../src/ble/profile/server/voice_service.c \
../../../../src/ble/profile/server/atvv_service.c \
../../../../src/ble/profile/server/ota_service.c \
../../../../src/ble/profile/server/dfu_service.c \
../../../../src/app/rcu/main.c \
../../../../src/app/rcu/rcu_application.c \
../../../../src/app/rcu/rcu_gap.c \
../../../../src/app/rcu/swtimer.c \
../../../../src/app/rcu/app_task.c \
../../../../src/app/rcu/reset_watch_dog_timer.c \
../../../../src/ble/privacy/privacy_mgnt.c \
../../../../src/mcu/rtl876x/overlay_mgr.c \
../../../../src/app/rcu/loop_queue.c \
../../../../src/dfu/dfu_main.c \
../../../../src/dfu/dfu_task.c \
../../../../src/dfu/dfu_application.c \
../../../../src/platform/dfu_flash.c \
../../../../src/app/rcu/key_module/keyscan_basic_driver.c \
../../../../src/app/rcu/key_module/keyscan_driver.c \
../../../../src/app/rcu/key_module/key_handle.c \
../../../../src/app/rcu/voice_module/voice_driver.c \
../../../../src/app/rcu/voice_module/voice.c \
../../../../src/app/rcu/voice_module/sw_equalizer.c \
../../../../src/app/rcu/ir_module/ir_send_driver.c \
../../../../src/app/rcu/ir_module/ir_send_handle.c \
../../../../src/app/rcu/ir_module/ir_learn_driver.c \
../../../../src/app/rcu/ir_module/ir_learn_handle.c \
../../../../src/app/rcu/ir_module/ir_protocol_nec.c \
../../../../src/app/rcu/led_module/led_driver.c \
../../../../src/app/rcu/bat_module/battery_driver.c \
../../../../src/app/rcu/test_module/data_uart_test.c \
../../../../src/app/rcu/test_module/mp_test.c \
../../../../src/app/rcu/test_module/single_tone.c \
../../../../src/app/rcu/test_module/uart_transport.c \
../../../../src/app/rcu/rtc_module/rtc_driver.c \
# sources END
# ASM sources
ASM_SOURCES = ../../../../src/mcu/rtl876x/arm/startup_rtl876x_gcc.s
#startup_rtl8762c_ARMCC.s
#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
OD = $(PREFIX)objdump
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m0plus

# fpu
FPU =

# float-abi
#FLOAT-ABI = -mfloat-abi=hard
FLOAT-ABI = -mfloat-abi=soft

# mcu
MCU = $(CPU) -mthumb  $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =


# AS includes
AS_INCLUDES = \

# C includes

C_INCLUDES =  \
-I../../../../bin/upperstack_img/upperstack_0_0 \
-I../../rcu \
-I../../../../src/app/rcu \
-I../../../../src/app/rcu/bat_module \
-I../../../../src/app/rcu/ir_module \
-I../../../../src/app/rcu/key_module \
-I../../../../src/app/rcu/led_module \
-I../../../../src/app/rcu/voice_module \
-I../../../../src/app/rcu/test_module \
-I../../../../src/app/rcu/rtc_module \
-I../../../../src/ble \
-I../../../../src/ble/profile/server \
-I../../../../src/ble/privacy \
-I../../../../inc/app \
-I../../../../inc/bluetooth/gap \
-I../../../../inc/bluetooth/gap/gap_lib \
-I../../../../inc/bluetooth/profile \
-I../../../../inc/bluetooth/profile/server \
-I../../../../inc/platform \
-I../../../../inc/peripheral \
-I../../../../inc/os \
-I../../../../inc/rcu \
-I../../../../src/dfu \
# includes END
#C_PRE_INCLUDES

PER_INCLUDE=  \
-include app_define.h \
-include mem_config.h \
#PRE_INCLUDES END

#C_PER_DEFINE

PER_DEFINE=  \
-D SUPPORT_ALONE_UPPERSTACK_IMG \
#PER_DEFINE END

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) -specs=nano.specs $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif

CFLAGS += -std=c99 
# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"
# perinclude 
ifneq ($(PER_INCLUDE), )
CFLAGS +=$(PER_INCLUDE)
endif
ifneq ($(PER_DEFINE), )
CFLAGS +=$(PER_DEFINE)
endif
#######################################
# LDFLAGS
#######################################
# link script
ifeq ($(ENCRYPTION),0)
      LDSCRIPT = app.ld 
else 
      LDSCRIPT = app-ENCRYPTION.ld
endif


LIBS = -lc -lm -lnosys 
# libraries

LIBDIR = \
../../../../bin/gcc/rom_symbol_gcc.axf \
../../../../bin/gcc/sbc_lib.a \
../../../../bin/gcc/msbc_lib.a \
../../../../bin/gcc/ima_adpcm_lib.a \
../../../../bin/gcc/auto_k_rf.a \
../../../../bin/gcc/gap_utils.a \
../../../../bin/gcc/adc.a \
../../../../bin/gcc/bee3_sdk.a \
# lib_end

LDFLAGS = $(MCU) -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections  -specs=nano.specs

# default action: build all
.PHONY : all
all:mem_define.ld $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex 
	-mkdir bin
	../../../../tool/hex2bin/Hex2Bin build/$(TARGET).hex bin/$(TARGET).bin
	../../../../tool/prepend_header/prepend_header.exe -t app_code -p bin/$(TARGET).bin -m 1 -i "..\mp.ini" -c crc -a ../../../tool/key.json
	../../../../tool/md5/md5 bin/$(TARGET)_MP.bin
	$(OD) -D -S build/$(TARGET).elf > bin/$(TARGET).dis
#	$(CC) -o all $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin
mem_define.ld :
	../../../../tool/memory_icf/MemDefine ../ gcc ./

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
#vpath %.c $(sort $(dir $(C_SOURCES)))
vpath %.c  $(dir $(C_SOURCES))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))
$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
	-rm -fR $(BIN_DIR)
	-rm -f mem_define.ld
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***