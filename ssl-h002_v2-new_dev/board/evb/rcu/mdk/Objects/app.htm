<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\app.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\app.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Dec 06 15:01:19 2024
<BR><P>
<H3>Maximum Stack Usage =        568 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
dfu_attr_write_cb &rArr; dfu_service_handle_control_point_req &rArr; dfu_buffer_check_process &rArr; dfu_update &rArr; check_dfu_update_image_length &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[63]">ADC_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[54]">BTMAC_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[4d]">BusFault_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[78]">CAP_Touch_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[7a]">DLPS_IO_EnterDlpsCb</a> from rtl876x_io_dlps.o(.app.data_ram.text) referenced from rtl876x_io_dlps.o(.text)
 <LI><a href="#[7b]">DLPS_IO_ExitDlpsCb</a> from rtl876x_io_dlps.o(.app.data_ram.text) referenced from rtl876x_io_dlps.o(.text)
 <LI><a href="#[7c]">Default_Handler</a> from startup_rtl876x.o(.text) referenced from system_rtl876x.o(.app.overlay_a)
 <LI><a href="#[69]">Enhanced_Timer0_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[6a]">Enhanced_Timer1_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[65]">GDMA0_Channel0_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[66]">GDMA0_Channel1_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[67]">GDMA0_Channel2_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[68]">GDMA0_Channel3_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[5a]">GPIO4_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[5b]">GPIO5_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[6f]">GPIO_Group0_Handler</a> from system_rtl876x.o(.app.data_ram.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[6e]">GPIO_Group1_Handler</a> from system_rtl876x.o(.app.data_ram.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[6c]">GPIO_Group2_Handler</a> from system_rtl876x.o(.app.data_ram.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[6b]">GPIO_Group3_Handler</a> from system_rtl876x.o(.app.data_ram.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[4b]">HardFault_Handler</a> from startup_rtl876x.o(.text) referenced 2 times from startup_rtl876x.o(VECTOR)
 <LI><a href="#[61]">I2C0_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[62]">I2C1_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[57]">I2S0_RX_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[58]">I2S0_TX_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[6d]">IR_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[74]">Keyscan_Handler</a> from keyscan_driver.o(.app.data_ram.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[76]">LPCOMP_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[4c]">MemManage_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[4a]">NMI_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[77]">PTA_Mailbox_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[50]">PendSV_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[64]">Peripheral_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[73]">Qdecode_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[7d]">ROM_Default_Handler</a> from ROM.lib(ABSOLUTE) referenced from system_rtl876x.o(.app.overlay_a)
 <LI><a href="#[5e]">RTC_Handler</a> from rtc_driver.o(.app.data_ram.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[49]">Reset_Handler</a> from startup_rtl876x.o(RESET) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[5f]">SPI0_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[60]">SPI1_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[75]">SPI2W_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[72]">SPI_Flash_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[4f]">SVC_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[51]">SysTick_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[6]">SystemInit</a> from system_rtl876x.o(.app.flash.text) referenced from startup_rtl876x.o(RESET)
 <LI><a href="#[52]">System_Handler</a> from main.o(.app.data_ram.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[79]">TRNG_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[56]">Timer2_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[55]">Timer3_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[59]">Timer4_5_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[70]">Timer4_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[71]">Timer5_Handler</a> from reset_watch_dog_timer.o(.app.data_ram.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[5d]">UART0_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[5c]">UART1_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[4e]">UsageFault_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[53]">WDG_Handler</a> from startup_rtl876x.o(.text) referenced from startup_rtl876x.o(VECTOR)
 <LI><a href="#[22]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[23]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[24]">_printf_fp_hex_real</a> from _printf_fp_hex.o(.text) referenced from printf2.o(x$fpl$printf2)
 <LI><a href="#[21]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[20]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[12]">adv_timer_callback</a> from swtimer.o(.app.data_ram.text) referenced from swtimer.o(.text)
 <LI><a href="#[c]">app_dlps_check_cb</a> from main.o(.app.data_ram.text) referenced from main.o(.text)
 <LI><a href="#[d]">app_enter_dlps_config</a> from main.o(.app.data_ram.text) referenced from main.o(.text)
 <LI><a href="#[e]">app_exit_dlps_config</a> from main.o(.app.data_ram.text) referenced from main.o(.text)
 <LI><a href="#[10]">app_gap_callback</a> from rcu_application.o(.text) referenced from rcu_gap.o(.text)
 <LI><a href="#[16]">app_main_task</a> from app_task.o(.app.data_ram.text) referenced from app_task.o(.text)
 <LI><a href="#[11]">app_privacy_callback</a> from rcu_application.o(.text) referenced from rcu_gap.o(.text)
 <LI><a href="#[f]">app_profile_callback</a> from rcu_application.o(.text) referenced from main.o(.text)
 <LI><a href="#[26]">bas_attr_read_cb</a> from bas.o(.text) referenced from bas.o(.constdata)
 <LI><a href="#[27]">bas_cccd_update_cb</a> from bas.o(.text) referenced from bas.o(.constdata)
 <LI><a href="#[1d]">bat_lpc_handler</a> from battery_driver.o(.app.data_ram.text) referenced from battery_driver.o(.text)
 <LI><a href="#[8]">common_main</a> from system_rtl876x.o(.text) referenced from system_rtl876x.o(.app.flash.text)
 <LI><a href="#[1e]">data_uart_test_interrupt_handler</a> from uart_transport.o(.app.data_ram.text) referenced from uart_transport.o(.text)
 <LI><a href="#[2f]">dfu_attr_write_cb</a> from dfu_service.o(.text) referenced from dfu_service.o(.constdata)
 <LI><a href="#[30]">dfu_cccd_update_cb</a> from dfu_service.o(.text) referenced from dfu_service.o(.constdata)
 <LI><a href="#[25]">dis_attr_read_cb</a> from dis.o(.text) referenced from dis.o(.constdata)
 <LI><a href="#[15]">enter_dss_timer_cb</a> from swtimer.o(.app.data_ram.text) referenced from swtimer.o(.text)
 <LI><a href="#[1f]">gap_lib_handle_btif_msg</a> from gap_lib.o(.text) referenced from gap_lib.o(.text)
 <LI><a href="#[28]">hids_attr_read_cb</a> from hids_rmc.o(.text) referenced from hids_rmc.o(.constdata)
 <LI><a href="#[29]">hids_attr_write_cb</a> from hids_rmc.o(.text) referenced from hids_rmc.o(.constdata)
 <LI><a href="#[2a]">hids_cccd_update_cb</a> from hids_rmc.o(.text) referenced from hids_rmc.o(.constdata)
 <LI><a href="#[19]">key_handle_comb_keys_timer_cb</a> from key_handle.o(.app.data_ram.text) referenced from key_handle.o(.text)
 <LI><a href="#[18]">keyscan_timer_callback</a> from keyscan_driver.o(.app.data_ram.text) referenced from keyscan_driver.o(.text)
 <LI><a href="#[1c]">led_ctrl_timer_cb</a> from led_driver.o(.app.data_ram.text) referenced from led_driver.o(.text)
 <LI><a href="#[b]">log_direct</a> from ROM.lib(ABSOLUTE) referenced from startup_rtl876x.o(.text)
 <LI><a href="#[1b]">long_press_key_detect_timer_cb</a> from key_handle.o(.app.data_ram.text) referenced from key_handle.o(.text)
 <LI><a href="#[13]">next_state_timeout_timer_callback</a> from swtimer.o(.app.data_ram.text) referenced from swtimer.o(.text)
 <LI><a href="#[1a]">notify_key_data_timer_cb</a> from key_handle.o(.app.data_ram.text) referenced from key_handle.o(.text)
 <LI><a href="#[2d]">ota_attr_read_cb</a> from ota_service.o(.text) referenced from ota_service.o(.constdata)
 <LI><a href="#[2e]">ota_attr_write_cb</a> from ota_service.o(.text) referenced from ota_service.o(.constdata)
 <LI><a href="#[7]">pre_main</a> from system_rtl876x.o(.app.flash.text) referenced from system_rtl876x.o(.app.flash.text)
 <LI><a href="#[17]">privacy_msg_callback</a> from privacy_mgnt.o(.text) referenced from privacy_mgnt.o(.text)
 <LI><a href="#[a]">set_active_timer_callback</a> from system_rtl876x.o(.text) referenced from system_rtl876x.o(.text)
 <LI><a href="#[43]">uart_test_auto_k_rf_freq</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[40]">uart_test_change_baudrate</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[41]">uart_test_direct_k_rf_freq</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[3d]">uart_test_disable_test_mode_flag</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[3e]">uart_test_enable_test_mode_flag</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[3a]">uart_test_enter_dlps</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[34]">uart_test_enter_fast_pair_mode</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[48]">uart_test_enter_hci_download_mode</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[3c]">uart_test_enter_hci_mode</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[46]">uart_test_enter_single_tone</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[3f]">uart_test_erase_pair_info</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[44]">uart_test_find_device_type</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[35]">uart_test_get_dev_state</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[42]">uart_test_get_dut_info</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[39]">uart_test_get_voice_config</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[32]">uart_test_read_app_version</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[33]">uart_test_read_mac_addr</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[31]">uart_test_read_patch_version</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[45]">uart_test_reboot_device</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[38]">uart_test_set_voice_config</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[3b]">uart_test_start_stop_adv</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[47]">uart_test_terminate_connect</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[36]">uart_test_voice_test_start</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[37]">uart_test_voice_test_stop</a> from data_uart_test.o(.text) referenced from data_uart_test.o(.constdata)
 <LI><a href="#[14]">update_conn_params_timer_cb</a> from swtimer.o(.app.data_ram.text) referenced from swtimer.o(.text)
 <LI><a href="#[2b]">vendor_svc_attr_write_cb</a> from vendor_service.o(.text) referenced from vendor_service.o(.constdata)
 <LI><a href="#[2c]">vendor_svc_cccd_update_cb</a> from vendor_service.o(.text) referenced from vendor_service.o(.constdata)
 <LI><a href="#[9]">wdg_system_reset_app_cb</a> from system_rtl876x.o(.app.flash.text) referenced from system_rtl876x.o(.app.flash.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1d5]"></a>WDG_SystemReset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_fw_reboot
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_lpc_handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_comb_keys_timer_cb
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_switch_to_ota_mode
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_hci_mode
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_test_mode
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_reboot_device
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_hci_mode
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_test_mode
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUpdateVectorTable
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_attr_read_cb
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_pressed_event
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dis_srv_cb
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_set_pending_keyscan_fifo_data
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_key_data_timer_cb
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyscan_Handler
</UL>

<P><STRONG><a name="[314]"></a>RamVectorTableInit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUpdateVectorTable
</UL>

<P><STRONG><a name="[203]"></a>RamVectorTableUpdate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_driver_lpc_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_transport_init
</UL>

<P><STRONG><a name="[7d]"></a>ROM_Default_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> system_rtl876x.o(.app.overlay_a)
</UL>
<P><STRONG><a name="[23b]"></a>SystemCall_Stack</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_param
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send_data
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_attr_read_confirm
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_add_service
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_start_bt_stack
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_handle_msg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_gap_param
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_register_app_cb
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_disconnect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_stop
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_start
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_set_param
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_param
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_data_len
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_high_priority_bond
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_addr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_disable_slave_latency
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_user_confirm
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_set_param
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_passkey_input_confirm
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_oob_input_confirm
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_just_work_confirm
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_get_display_key
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_clear_all_keys
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gaps_set_peripheral_preferred_conn_param
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIF_VendorGetResponse
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_register_app_cb
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_gap_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_update_conn_param
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_param
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_resolve_random_address
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_set_resolv_priv_addr_timeout
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_set_param
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_set_mode
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_set_addr_resolution
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_register_cb
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_read_peer_resolv_addr
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_read_local_resolv_addr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_modify_resolv_list
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_convert_addr_type
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_modify_white_list
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_privacy_info
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_max_le_paired_device_num
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_gap_param
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_find_key_entry_by_idx
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_coc_set_psm_security
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_coc_reg_psm
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_coc_send_data
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_coc_disc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_coc_create
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_coc_get_chann_param
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_coc_set_param
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_coc_register_app_cb
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_coc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_rf_set_path_loss_reporting_enable
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_rf_set_path_loss_reporting_params
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_rf_set_transmit_power_reporting_enable
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_rf_read_remote_transmit_power_level
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_rf_enhanced_read_transmit_power_level
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_rf_write_rf_path_compensation
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_rf_read_rf_path_compensation
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_service_changed_indicate
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gaps_set_parameter
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_register_callback
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_dtm_transmitter_test_v4
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_dtm_enhanced_transmitter_test
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_dtm_enhanced_receiver_test
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_dtm_test_end
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_dtm_transmitter_test
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_dtm_receiver_test
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_scan_gap_msg_info_way
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_scan_stop
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_scan_start
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_scan_set_phy_param
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_scan_get_param
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_scan_set_param
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_adv_gap_msg_info_way
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_adv_remove_set
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_adv_clear_set
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_adv_disable
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_adv_enable
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_adv_set_adv_enable_param
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_adv_start_setting
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_adv_set_random
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_adv_set_scan_response_data
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_adv_set_adv_data
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_adv_set_adv_param
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_adv_get_adv_handle_by_conn_id
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_adv_get_conn_id_by_adv_handle
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_adv_create_adv_handle
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_adv_get_param
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ext_adv_init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_get_param
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_local_ltk
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_dev_info
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_dev_bond_info
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_dev_bond_info
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_dev_bond_info_len
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_check_privacy_bond
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_privacy_info
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_clear_cccd_data
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_cccd_data
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_high_priority_bond
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_low_priority_bond
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_find_key_entry
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_load_local_irk
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_save_local_irk
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_load_local_appearance
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_save_local_appearance
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_load_local_name
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_save_local_name
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_id_by_handle
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_link_check_conn_id_internal
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_get_sec_level
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_delete_by_bd
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_delete_by_idx
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_cfg_local_key_distribute
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_keypress_notify
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_passkey_display_confirm
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_pair
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_get_param
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_local_addr_by_conn_id
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_conn_tx_power
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_connect
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_conn_param
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_update_passed_chann_map
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_phy
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_read_chann_map
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_read_rssi
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_write_authen_payload_timeout
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_read_remote_version
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_idle_link_num
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_active_link_num
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_id
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_info
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_scan_stop
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_scan_start
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_scan_get_param
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_scan_set_param
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_one_shot_adv
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_set_tx_power
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_read_tx_power
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_update_param
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_get_param
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_send_exchange_mtu_req
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_get_notify_data_buffer
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_attr_ind_confirm
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_attr_write
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_attr_read_using_uuid
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_attr_read
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_all_char_descriptor_discovery
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_by_uuid128_char_discovery
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_by_uuid_char_discovery
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_all_char_discovery
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_relationship_discovery
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_by_uuid128_srv_discovery
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_by_uuid_srv_discovery
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_all_primary_srv_discovery
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_register_spec_client_cb
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_register_general_client_cb
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_set_service_reg_mode
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_clear_service
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_get_start_handle
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_get_write_cmd_data_buffer
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_attr_write_confirm
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_exec_write_confirm
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_add_service_by_start_handle
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_builtin_service_reg
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_set_rem_min_sca
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_write_default_data_len
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_host_chann_classif
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_cfg_local_identity_address
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_rand_addr
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_gen_rand_addr
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_max_link_num
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_gap_msg_info_way
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_send_dev_state
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_buffer_free
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_read_airplan_mode
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_write_airplan_mode
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_pairable_mode
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_register_app_cb
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_if_confirm
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_if_write
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_if_close
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_if_open
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_send_event
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_sw_reset_req
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_register_extend_cb
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_gen_bond_dev
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_bond_dev_num
</UL>

<P><STRONG><a name="[c8]"></a>update_ram_layout</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b7]"></a>get_active_ota_bank_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_image_entry_addr
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_attr_read_cb
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ota_active_bank_image_info
</UL>

<P><STRONG><a name="[22e]"></a>btxfcs</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_packet_decode
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>

<P><STRONG><a name="[d2]"></a>LogUartTxChar</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
</UL>

<P><STRONG><a name="[ce]"></a>log_timestamp_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
</UL>

<P><STRONG><a name="[b]"></a>log_direct</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>log_buffer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_ExitDlpsCb
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUpdateVectorTable
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_reset_reason
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_add_service
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_attr_read_cb
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_attr_write_cb
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vendor_svc_add_service
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vendor_svc_cccd_update_cb
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vendor_svc_attr_write_cb
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_add_service
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_cccd_update_cb
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_attr_write_cb
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_attr_read_cb
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_add_service
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_cccd_update_cb
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_attr_read_cb
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_set_parameter
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_add_service
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_attr_read_cb
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_set_parameter
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5_Handler
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_timer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_init_timer
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_dss_timer_cb
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_conn_params_timer_cb
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_state_timeout_timer_callback
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_update_conn_params
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_stop_adv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_handle_uart_msg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_terminate_connection
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_start_adv
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_bond_modify_msg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_clear_bond_info
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_release_event
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_pressed_event
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_update_battery_info
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_msg_handle
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_privacy_callback
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_callback
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_latency_status
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_srv_cb
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hid_srv_cb
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_general_srv_cb
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_gap_msg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_conn_param_update_evt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_authen_state_evt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_conn_state_evt
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_dev_state_evt
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfu_srv_cb
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_vendor_srv_cb
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconn_reason_handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stop_adv_reason_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_load_fp_mac_addr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_init_data
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_check_trig_gpio_status
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_module_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_init_data
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_lib_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_nvic_config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_init_data
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_profile_callback
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_flash_bp_all
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_report_target_ic_type
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_report_target_fw_info
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_fw_reboot
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_erase_sector_with_retry
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_check_checksum
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_check_buf_crc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_add_service
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_cccd_update_cb
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_attr_write_cb
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_packet_req
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_valid_fw
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_notify_conn_para_update_req
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_buffer_check_process
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_handle_key_pressed_event
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_handle_enter_low_power_event
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_calculate_bat_level
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_calibrate_voltage
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_handle_comb_keys_timer_cb
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_key_event_by_fifo
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;two_key_to_handle
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;one_key_to_handle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_key_event_by_index
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_one_key_scenario
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_usage_buffer
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_prepare_hid_usage_buffer
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_press_key_detect_timer_cb
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_key_data_timer_cb
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_comb_keys_timer_cb
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyscan_Handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_switch_to_ota_mode
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_set_ota_mode_flag
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dfu_update_image_length
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_check_blank
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_block
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_msg_callback
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_le_privacy_resolution_status_info
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_le_privacy_modify_resolv_list_rsp
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_resolv_list_int
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_add_device
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_modify_resolving_list
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_set_comp_0_params
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_get_us
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_deinit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_packet_decode
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_test_interrupt_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_find_device_type
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_change_baudrate
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_erase_pair_info
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enable_test_mode_flag
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_disable_test_mode_flag
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_start_stop_adv
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_dlps
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_get_voice_config
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_set_voice_config
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_voice_test_stop
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_voice_test_start
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_get_dev_state
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_fast_pair_mode
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_read_mac_addr
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_read_app_version
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_read_patch_version
</UL>

<P><STRONG><a name="[18b]"></a>trace_bdaddr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_conn_state_evt
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_resolv_list_int
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_modify_resolving_list
</UL>

<P><STRONG><a name="[c4]"></a>trace_string</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUpdateVectorTable
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[145]"></a>trace_binary</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_load_fp_mac_addr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_usage_buffer
</UL>

<P><STRONG><a name="[1d7]"></a>hw_aes_decrypt_16byte</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_hw_aes_decrypt_image
</UL>

<P><STRONG><a name="[21e]"></a>ftl_load</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_load_fp_mac_addr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_init_data
</UL>

<P><STRONG><a name="[21d]"></a>ftl_save</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_disable_test_mode_flag
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_set_fast_pair_info
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_enable_test_mode_flag
</UL>

<P><STRONG><a name="[d6]"></a>ftl_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_main
</UL>

<P><STRONG><a name="[d5]"></a>flash_get_bank_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_main
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_attr_read_cb
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ota_active_bank_image_info
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_report_target_ic_type
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_report_target_fw_info
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_erase_sector_with_retry
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_check_checksum
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_active_image
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_check_blank
</UL>

<P><STRONG><a name="[d3]"></a>flash_get_bank_size</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_main
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_attr_read_cb
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dfu_update_image_length
</UL>

<P><STRONG><a name="[147]"></a>flash_erase_locked</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_block
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
</UL>

<P><STRONG><a name="[1d1]"></a>flash_write_locked</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write
</UL>

<P><STRONG><a name="[1cf]"></a>flash_auto_write_locked</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_set_compressed_ready
</UL>

<P><STRONG><a name="[2d0]"></a>flash_read_locked</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CalibrationInit
</UL>

<P><STRONG><a name="[1ce]"></a>flash_auto_read_locked</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_set_compressed_ready
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_check_blank
</UL>

<P><STRONG><a name="[1d2]"></a>flash_split_read_locked</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write
</UL>

<P><STRONG><a name="[164]"></a>flash_try_high_speed</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1da]"></a>flash_set_block_protect_locked</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash_bp
</UL>

<P><STRONG><a name="[1d8]"></a>flash_sw_protect_unlock_by_addr_locked</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_flash_bp_all
</UL>

<P><STRONG><a name="[212]"></a>set_hci_mode_flag</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_hci_mode
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_hci_mode
</UL>

<P><STRONG><a name="[c6]"></a>check_hci_mode_flag</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1e0]"></a>check_image_chksum</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_check_checksum
</UL>

<P><STRONG><a name="[b8]"></a>check_header_valid</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_image_entry_addr
</UL>

<P><STRONG><a name="[b9]"></a>get_header_addr_by_img_id</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_image_entry_addr
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_attr_read_cb
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_report_target_ic_type
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_report_target_fw_info
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_read_patch_version
</UL>

<P><STRONG><a name="[134]"></a>get_active_bank_image_size_by_img_id</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ota_active_bank_image_info
</UL>

<P><STRONG><a name="[133]"></a>is_ota_support_bank_switch</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_attr_read_cb
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ota_active_bank_image_info
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_check_checksum
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_active_image
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_valid_fw
</UL>

<P><STRONG><a name="[142]"></a>get_temp_ota_bank_addr_by_img_id</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_erase_sector_with_retry
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_check_checksum
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_active_image
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_check_blank
</UL>

<P><STRONG><a name="[1e1]"></a>get_temp_ota_bank_size_by_img_id</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dfu_update_image_length
</UL>

<P><STRONG><a name="[137]"></a>get_active_bank_image_version</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_attr_read_cb
</UL>

<P><STRONG><a name="[cd]"></a>platform_random</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_seed_init
</UL>

<P><STRONG><a name="[e6]"></a>power_manager_suspend_all</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_boot_active_time
</UL>

<P><STRONG><a name="[e2]"></a>power_manager_resume_all</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_active_timer_callback
</UL>

<P><STRONG><a name="[15c]"></a>platform_pm_set_power_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_dss_timer_cb
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_power_on_seq
</UL>

<P><STRONG><a name="[333]"></a>platform_pm_get_power_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_EnterDlpsCb
</UL>

<P><STRONG><a name="[159]"></a>platform_pm_register_callback_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IORegister
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_power_on_seq
</UL>

<P><STRONG><a name="[342]"></a>platform_pm_stop_all_non_excluded_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_dss_timer_cb
</UL>

<P><STRONG><a name="[1d6]"></a>hw_aes_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_hw_aes_decrypt_image
</UL>

<P><STRONG><a name="[c7]"></a>Pinmux_Deinit_rom</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[be]"></a>WDG_ClockEnable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_reset_reason
</UL>

<P><STRONG><a name="[bf]"></a>WDG_Config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_reset_reason
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
</UL>

<P><STRONG><a name="[c0]"></a>WDG_Enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_reset_reason
</UL>

<P><STRONG><a name="[c1]"></a>WDG_Disable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_reset_reason
</UL>

<P><STRONG><a name="[341]"></a>WDG_Restart</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[bc]"></a>reset_reason_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_reset_reason
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_dev_state_evt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>os_mem_alloc_intern</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_set_fast_pair_info
</UL>

<P><STRONG><a name="[dc]"></a>os_mem_zalloc_intern</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_init
</UL>

<P><STRONG><a name="[df]"></a>os_mem_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_deinit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_set_fast_pair_info
</UL>

<P><STRONG><a name="[16b]"></a>os_mem_peek</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_dev_state_evt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[343]"></a>os_msg_queue_create_intern</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[345]"></a>os_msg_send_intern</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
</UL>

<P><STRONG><a name="[344]"></a>os_msg_recv_intern</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[d8]"></a>os_sched_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>os_sched_suspend</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[e0]"></a>os_sched_resume</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[d0]"></a>os_lock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_copy_buf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_read_buf
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_write_buf
</UL>

<P><STRONG><a name="[d1]"></a>os_unlock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_copy_buf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_read_buf
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_write_buf
</UL>

<P><STRONG><a name="[1aa]"></a>os_task_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_init
</UL>

<P><STRONG><a name="[e7]"></a>os_timer_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_boot_active_time
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_timer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_init_timer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_module_init
</UL>

<P><STRONG><a name="[e8]"></a>os_timer_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_boot_active_time
</UL>

<P><STRONG><a name="[186]"></a>os_timer_restart</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_dss_timer_cb
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_update_conn_params
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_start_adv
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_start
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_conn_param_update_evt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_authen_state_evt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_conn_state_evt
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_dev_state_evt
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_init
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_ctrl_timer_cb
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_comb_keys_timer_cb
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyscan_Handler
</UL>

<P><STRONG><a name="[e3]"></a>os_timer_stop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_active_timer_callback
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_exit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_release_event
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_authen_state_evt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_conn_state_evt
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_dev_state_evt
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_ctrl_timer_cb
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_one_key_scenario
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_comb_keys_timer_cb
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_long_press_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyscan_Handler
</UL>

<P><STRONG><a name="[e4]"></a>os_timer_delete</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_active_timer_callback
</UL>

<P><STRONG><a name="[1f5]"></a>os_timer_state_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_start
</UL>

<P><STRONG><a name="[bb]"></a>btaon_fast_read_safe</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_EnterDlpsCb
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stack_config_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_reset_reason
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_Cmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_DeInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BypassCmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_ClearAllWakeupINT
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_ClearWakeupINTPendingBit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_ControlSelectValue
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_PowerOrShutDownValue
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_PullConfigValue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_PullUpOrDownValue
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_PullEnableValue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_OutputEnableValue
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_OutputControlValue
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_WakeupInterruptValue
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpPinEnable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_DebounceWakeupStatus
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_WakeupPolarityValue
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_WKDebounceConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_WakeupEnableValue
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_set_ota_mode_flag
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_test_mode
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_test_mode
</UL>

<P><STRONG><a name="[fe]"></a>btaon_fast_write_safe</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_EnterDlpsCb
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_Cmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_DeInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BypassCmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_ClearAllWakeupINT
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_ClearWakeupINTPendingBit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_ControlSelectValue
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_PowerOrShutDownValue
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_PullConfigValue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_PullUpOrDownValue
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_PullEnableValue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_OutputEnableValue
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_OutputControlValue
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpPinEnable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_DebounceWakeupStatus
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_WakeupPolarityValue
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_WKDebounceConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_WakeupEnableValue
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_set_ota_mode_flag
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_test_mode
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_test_mode
</UL>

<P><STRONG><a name="[fc]"></a>btaon_fast_update_safe</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SelectSrcToGpioInput
</UL>

<P><STRONG><a name="[15b]"></a>btmac_pm_set_power_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_dss_timer_cb
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_power_on_seq
</UL>

<P><STRONG><a name="[1df]"></a>dfu_set_ready</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_set_image_ready
</UL>

<P><STRONG><a name="[c3]"></a>setlocale</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[1b2]"></a>memcmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_overlay
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_usage_buffer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyscan_Handler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_scenario_index
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_modify_resolving_list
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_overlay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_cache_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_set_parameter
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_set_parameter
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_vendor_srv_cb
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_load_fp_mac_addr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_packet_req
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_copy_buf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_read_buf
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_write_buf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_modify_resolving_list
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_vendor_set_ant_ctrl
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_adv_3_data_set
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_set_fast_pair_info
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_overlay
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_cache_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_conn_state_evt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_init_data
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init_global_data
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_le_privacy_modify_resolv_list_rsp
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_resolv_list_int
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_modify_resolving_list
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_reset_pending_keyscan_fifo_data
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_le_gap_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_data
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_init_data
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyscan_Handler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_set_priority
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_get_voice_config
</UL>

<P><STRONG><a name="[b1]"></a>exit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6b]"></a>GPIO_Group3_Handler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, system_rtl876x.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Group3_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO7_Handler
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Handler
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO31_Handler
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO27_Handler
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO23_Handler
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO19_Handler
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO15_Handler
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[6c]"></a>GPIO_Group2_Handler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, system_rtl876x.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Group2_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO6_Handler
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO30_Handler
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Handler
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO26_Handler
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO22_Handler
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO18_Handler
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO14_Handler
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[6e]"></a>GPIO_Group1_Handler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_rtl876x.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Group1_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO9_Handler
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO29_Handler
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO25_Handler
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO21_Handler
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO17_Handler
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[6f]"></a>GPIO_Group0_Handler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_rtl876x.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Group0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO8_Handler
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO28_Handler
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO24_Handler
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO20_Handler
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO16_Handler
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO12_Handler
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[7a]"></a>DLPS_IO_EnterDlpsCb</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, rtl876x_io_dlps.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DLPS_IO_EnterDlpsCb &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DLPS_Enter
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DLPS_Enter
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_pm_get_power_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtl876x_io_dlps.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>DLPS_IO_ExitDlpsCb</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, rtl876x_io_dlps.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DLPS_IO_ExitDlpsCb &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DLPS_Exit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_DLPS_Exit
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DLPS_Exit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtl876x_io_dlps.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>System_Handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = System_Handler &rArr; keyscan_init_driver &rArr; keyscan_init_pad_config &rArr; keyscan_row_pad_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_DebounceWakeupStatus
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_driver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[340]"></a>app_handle_io_msg</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, rcu_application.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = app_handle_io_msg &rArr; periph_handle_gap_msg &rArr; periph_handle_dev_state_evt &rArr; app_nvic_config &rArr; keyscan_init_driver &rArr; keyscan_init_pad_config &rArr; keyscan_row_pad_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Restart
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_handle_uart_msg
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_release_event
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_pressed_event
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_msg_handle
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_gap_msg
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_valid_fw
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[17e]"></a>app_send_msg_to_apptask</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, app_task.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_send_msg_to_apptask
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_send_intern
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5_Handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_update_battery_info
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfu_srv_cb
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_key_data_timer_cb
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyscan_Handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_test_interrupt_handler
</UL>

<P><STRONG><a name="[71]"></a>Timer5_Handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, reset_watch_dog_timer.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Timer5_Handler &rArr; app_send_msg_to_apptask
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[22d]"></a>loop_queue_get_vailid_data_size</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, loop_queue.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = loop_queue_get_vailid_data_size &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_copy_buf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_read_buf
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_packet_decode
</UL>

<P><STRONG><a name="[346]"></a>loop_queue_get_free_data_size</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, loop_queue.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = loop_queue_get_free_data_size &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_write_buf
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_is_full
</UL>

<P><STRONG><a name="[347]"></a>loop_queue_is_full</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, loop_queue.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = loop_queue_is_full &rArr; loop_queue_get_free_data_size &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_get_free_data_size
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_write_buf
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_test_interrupt_handler
</UL>

<P><STRONG><a name="[22c]"></a>loop_queue_is_empty</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, loop_queue.o(.app.data_ram.text))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_packet_decode
</UL>

<P><STRONG><a name="[348]"></a>loop_queue_write_buf</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, loop_queue.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = loop_queue_write_buf &rArr; loop_queue_is_full &rArr; loop_queue_get_free_data_size &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_unlock
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_lock
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_is_full
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_get_free_data_size
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_test_interrupt_handler
</UL>

<P><STRONG><a name="[22b]"></a>loop_queue_read_buf</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, loop_queue.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = loop_queue_read_buf &rArr; loop_queue_get_vailid_data_size &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_unlock
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_lock
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_get_vailid_data_size
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_packet_decode
</UL>

<P><STRONG><a name="[349]"></a>loop_queue_copy_buf</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, loop_queue.o(.app.data_ram.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_unlock
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_lock
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_get_vailid_data_size
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[167]"></a>keyscan_init_data</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, keyscan_driver.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = keyscan_init_data
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_long_press_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyscan_Handler
</UL>

<P><STRONG><a name="[339]"></a>keyscan_enter_dlps_config</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, keyscan_driver.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = keyscan_enter_dlps_config &rArr; keyscan_row_pad_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpPinEnable
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_row_pad_config
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_column_pad_config
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_disable_wakeup_config
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_enable_wakeup_config
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_enter_dlps_config
</UL>

<P><STRONG><a name="[33c]"></a>keyscan_exit_dlps_config</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, keyscan_driver.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = keyscan_exit_dlps_config &rArr; keyscan_init_driver &rArr; keyscan_init_pad_config &rArr; keyscan_row_pad_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpPinDisable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_pad_config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_driver
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_disable_wakeup_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exit_dlps_config
</UL>

<P><STRONG><a name="[33e]"></a>keyscan_check_dlps</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, keyscan_driver.o(.app.data_ram.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dlps_check_cb
</UL>

<P><STRONG><a name="[74]"></a>Keyscan_Handler</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, keyscan_driver.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Keyscan_Handler &rArr; keyscan_init_driver &rArr; keyscan_init_pad_config &rArr; keyscan_row_pad_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_Cmd
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_Read
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_INTConfig
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_driver
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[18]"></a>keyscan_timer_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, keyscan_driver.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = keyscan_timer_callback &rArr; keyscan_init_driver &rArr; keyscan_init_pad_config &rArr; keyscan_row_pad_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_driver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyscan_driver.o(.text)
</UL>
<P><STRONG><a name="[34a]"></a>keyscan_column_pad_config</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, keyscan_basic_driver.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = keyscan_column_pad_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_pad_config
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_enter_dlps_config
</UL>

<P><STRONG><a name="[34b]"></a>keyscan_row_pad_config</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, keyscan_basic_driver.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = keyscan_row_pad_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_pad_config
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_enter_dlps_config
</UL>

<P><STRONG><a name="[151]"></a>keyscan_init_pad_config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, keyscan_basic_driver.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = keyscan_init_pad_config &rArr; keyscan_row_pad_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_row_pad_config
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_column_pad_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_driver
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_exit_dlps_config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_power_on_seq
</UL>

<P><STRONG><a name="[160]"></a>keyscan_init_driver</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, keyscan_basic_driver.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = keyscan_init_driver &rArr; keyscan_init_pad_config &rArr; keyscan_row_pad_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_Cmd
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_INTMask
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_INTConfig
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_StructInit
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_pad_config
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_exit_dlps_config
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_nvic_config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_timer_callback
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyscan_Handler
</UL>

<P><STRONG><a name="[33b]"></a>bat_enter_dlps_config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, battery_driver.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bat_enter_dlps_config &rArr; LPC_ClearINTPendingBit &rArr; LPC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_ClearINTPendingBit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_INTCmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_INTConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_enter_dlps_config
</UL>

<P><STRONG><a name="[33d]"></a>bat_exit_dlps_config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, battery_driver.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = bat_exit_dlps_config &rArr; bat_init_driver &rArr; ADC_DeInit &rArr; RCC_PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_ClearINTPendingBit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_ResetCounter
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_SetCompValue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_INTCmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_INTConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_CounterCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_Cmd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_init_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exit_dlps_config
</UL>

<P><STRONG><a name="[33f]"></a>uart_test_check_dlps</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, data_uart_test.o(.app.data_ram.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dlps_check_cb
</UL>

<P><STRONG><a name="[33a]"></a>uart_test_enter_dlps_config</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, data_uart_test.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_test_enter_dlps_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_enter_dlps_config
</UL>

<P><STRONG><a name="[5e]"></a>RTC_Handler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtc_driver.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC_Handler &rArr; rtc_driver_clear_comp_0 &rArr; RTC_ClearCompINT &rArr; RTC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearOverFlowINT
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetINTStatus
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_clear_comp_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[15a]"></a>DLPS_IORegister</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtl876x_io_dlps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLPS_IORegister
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_pm_register_callback_func
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_power_on_seq
</UL>

<P><STRONG><a name="[c5]"></a>AppUpdateVectorTable</STRONG> (Thumb, 168 bytes, Stack size 256 bytes, system_rtl876x.o(.app.overlay_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AppUpdateVectorTable
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_string
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamVectorTableInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[49]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_rtl876x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[7e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_main
</UL>

<P><STRONG><a name="[2fd]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[81]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_n &rArr; _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[82]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[84]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[86]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[88]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[89]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[8a]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[8c]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[8d]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[8f]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[90]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[91]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[93]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[95]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[97]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[98]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>

<P><STRONG><a name="[99]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[9b]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[9d]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>

<P><STRONG><a name="[9e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[a0]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[a2]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[a4]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[ae]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[356]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[357]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[358]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[359]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[35a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[35b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[35c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[35d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[35e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[35f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[360]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[361]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[362]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[363]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[364]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[365]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[366]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[367]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[368]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[369]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[36a]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[80]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[36b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[36c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry5.o(.ARM.Collect$$rtentry$$00000005))

<P><STRONG><a name="[ad]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[36d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[af]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; mp_test_check_trig_gpio_status &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b2]"></a>ram_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, system_rtl876x.o(.app.flash.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ram_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b5]"></a>ram_cache_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, system_rtl876x.o(.app.flash.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ram_cache_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[b6]"></a>get_image_entry_addr</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, system_rtl876x.o(.app.flash.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_image_entry_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_header_addr_by_img_id
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_header_valid
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_ota_bank_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[36f]"></a>set_os_clock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, system_rtl876x.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[9]"></a>wdg_system_reset_app_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_rtl876x.o(.app.flash.text))
<BR>[Address Reference Count : 1]<UL><LI> system_rtl876x.o(.app.flash.text)
</UL>
<P><STRONG><a name="[ba]"></a>print_reset_reason</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, system_rtl876x.o(.app.flash.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = print_reset_reason
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_reason_get
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Disable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Config
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_ClockEnable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[7]"></a>pre_main</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, system_rtl876x.o(.app.flash.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pre_main &rArr; AppUpdateVectorTable
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_overlay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUpdateVectorTable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_reset_reason
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_cache_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_string
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_rtl876x.o(.app.flash.text)
</UL>
<P><STRONG><a name="[6]"></a>SystemInit</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, system_rtl876x.o(.app.flash.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = SystemInit &rArr; bt_stack_config_init &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stack_config_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_image_entry_addr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pinmux_Deinit_rom
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_hci_mode_flag
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ram_layout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>bt_stack_config_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rcu_gap.o(.app.flash.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = bt_stack_config_init &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_config_cccd_not_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[370]"></a>gap_config_le_link_number</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[371]"></a>gap_config_bt_bd_addr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[cb]"></a>gap_config_cccd_not_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stack_config_init
</UL>

<P><STRONG><a name="[372]"></a>gap_config_le_min_rem_sca</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[373]"></a>gap_config_bte_pool_size</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[374]"></a>gap_config_bt_report_buf_num</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[375]"></a>gap_config_ccc_bits_count</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[376]"></a>gap_config_max_attribute_table_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[377]"></a>gap_config_max_mtu_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[378]"></a>gap_config_le_key_storage_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[379]"></a>gap_config_max_le_paired_device</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[37a]"></a>gap_config_pa_parameter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[37b]"></a>gap_config_local_addr_storage</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[37c]"></a>gap_config_bqb_en</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[37d]"></a>gap_config_l2c_param</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[cc]"></a>random_seed_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_rtl876x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = random_seed_init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_random
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_main
</UL>

<P><STRONG><a name="[d7]"></a>show_sdk_lib_version</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_main
</UL>

<P><STRONG><a name="[c9]"></a>log_direct_app</STRONG> (Thumb, 148 bytes, Stack size 160 bytes, system_rtl876x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_unlock
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_lock
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_timestamp_get
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUartTxChar
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stack_config_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_main
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfu_srv_cb
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_check_trig_gpio_status
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_packet_req
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_lpc_handler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_handle_comb_keys_timer_cb
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dfu_update_image_length
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_single_tone
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_reboot_device
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_hci_mode
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_fast_pair_mode
</UL>

<P><STRONG><a name="[8]"></a>common_main</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, system_rtl876x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = common_main &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_sdk_lib_version
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_seed_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_start
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Disable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_bank_size
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_bank_addr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_rtl876x.o(.app.flash.text)
</UL>
<P><STRONG><a name="[37e]"></a>__2printf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_rtl876x.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>malloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_rtl876x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
</UL>

<P><STRONG><a name="[db]"></a>calloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system_rtl876x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc_intern
</UL>

<P><STRONG><a name="[dd]"></a>realloc</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, system_rtl876x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_resume
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_suspend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
</UL>

<P><STRONG><a name="[e1]"></a>free</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_rtl876x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>

<P><STRONG><a name="[37f]"></a>get_cpu_clock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_rtl876x.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>get_ic_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_rtl876x.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>set_active_timer_callback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system_rtl876x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_active_timer_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manager_resume_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_rtl876x.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>set_boot_active_time</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, system_rtl876x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manager_suspend_all
</UL>

<P><STRONG><a name="[63]"></a>ADC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[54]"></a>BTMAC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[4d]"></a>BusFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[78]"></a>CAP_Touch_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[7c]"></a>Default_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> system_rtl876x.o(.app.overlay_a)
</UL>
<P><STRONG><a name="[69]"></a>Enhanced_Timer0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[6a]"></a>Enhanced_Timer1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[65]"></a>GDMA0_Channel0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[66]"></a>GDMA0_Channel1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[67]"></a>GDMA0_Channel2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[68]"></a>GDMA0_Channel3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[32c]"></a>GPIO0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group0_Handler
</UL>

<P><STRONG><a name="[31f]"></a>GPIO10_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group2_Handler
</UL>

<P><STRONG><a name="[317]"></a>GPIO11_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group3_Handler
</UL>

<P><STRONG><a name="[32e]"></a>GPIO12_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group0_Handler
</UL>

<P><STRONG><a name="[327]"></a>GPIO13_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group1_Handler
</UL>

<P><STRONG><a name="[320]"></a>GPIO14_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group2_Handler
</UL>

<P><STRONG><a name="[318]"></a>GPIO15_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group3_Handler
</UL>

<P><STRONG><a name="[32f]"></a>GPIO16_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group0_Handler
</UL>

<P><STRONG><a name="[328]"></a>GPIO17_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group1_Handler
</UL>

<P><STRONG><a name="[321]"></a>GPIO18_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group2_Handler
</UL>

<P><STRONG><a name="[319]"></a>GPIO19_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group3_Handler
</UL>

<P><STRONG><a name="[325]"></a>GPIO1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group1_Handler
</UL>

<P><STRONG><a name="[330]"></a>GPIO20_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group0_Handler
</UL>

<P><STRONG><a name="[329]"></a>GPIO21_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group1_Handler
</UL>

<P><STRONG><a name="[322]"></a>GPIO22_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group2_Handler
</UL>

<P><STRONG><a name="[31a]"></a>GPIO23_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group3_Handler
</UL>

<P><STRONG><a name="[331]"></a>GPIO24_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group0_Handler
</UL>

<P><STRONG><a name="[32a]"></a>GPIO25_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group1_Handler
</UL>

<P><STRONG><a name="[323]"></a>GPIO26_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group2_Handler
</UL>

<P><STRONG><a name="[31b]"></a>GPIO27_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group3_Handler
</UL>

<P><STRONG><a name="[332]"></a>GPIO28_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group0_Handler
</UL>

<P><STRONG><a name="[32b]"></a>GPIO29_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group1_Handler
</UL>

<P><STRONG><a name="[31d]"></a>GPIO2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group2_Handler
</UL>

<P><STRONG><a name="[324]"></a>GPIO30_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group2_Handler
</UL>

<P><STRONG><a name="[31c]"></a>GPIO31_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group3_Handler
</UL>

<P><STRONG><a name="[315]"></a>GPIO3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group3_Handler
</UL>

<P><STRONG><a name="[5a]"></a>GPIO4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[31e]"></a>GPIO6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group2_Handler
</UL>

<P><STRONG><a name="[316]"></a>GPIO7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group3_Handler
</UL>

<P><STRONG><a name="[32d]"></a>GPIO8_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group0_Handler
</UL>

<P><STRONG><a name="[326]"></a>GPIO9_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group1_Handler
</UL>

<P><STRONG><a name="[4b]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[61]"></a>I2C0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[62]"></a>I2C1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[57]"></a>I2S0_RX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[58]"></a>I2S0_TX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[6d]"></a>IR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[76]"></a>LPCOMP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[4c]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[4a]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[77]"></a>PTA_Mailbox_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[50]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[64]"></a>Peripheral_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[73]"></a>Qdecode_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[5f]"></a>SPI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[60]"></a>SPI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[75]"></a>SPI2W_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[72]"></a>SPI_Flash_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[4f]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[51]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[79]"></a>TRNG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[56]"></a>Timer2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[55]"></a>Timer3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[59]"></a>Timer4_5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[70]"></a>Timer4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[5d]"></a>UART0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[5c]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[4e]"></a>UsageFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[53]"></a>WDG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl876x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl876x.o(VECTOR)
</UL>
<P><STRONG><a name="[381]"></a>__user_setup_stackheap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rtl876x.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>GPIO_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtl876x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
</UL>

<P><STRONG><a name="[224]"></a>GPIO_Init</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, rtl876x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_check_trig_gpio_status
</UL>

<P><STRONG><a name="[222]"></a>GPIO_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_check_trig_gpio_status
</UL>

<P><STRONG><a name="[382]"></a>GPIO_INTConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>GPIO_ClearINTPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>GPIO_MaskINTConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>GPIO_GetPin</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_check_trig_gpio_status
</UL>

<P><STRONG><a name="[385]"></a>GPIO_GetNum</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[386]"></a>GPIO_DBClkCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[351]"></a>KeyScan_Init</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, rtl876x_keyscan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = KeyScan_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_driver
</UL>

<P><STRONG><a name="[eb]"></a>KeyScan_DeInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtl876x_keyscan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = KeyScan_DeInit &rArr; RCC_PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_long_press_handler
</UL>

<P><STRONG><a name="[350]"></a>KeyScan_StructInit</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, rtl876x_keyscan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = KeyScan_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_driver
</UL>

<P><STRONG><a name="[34d]"></a>KeyScan_INTConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_keyscan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_driver
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyscan_Handler
</UL>

<P><STRONG><a name="[352]"></a>KeyScan_INTMask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_keyscan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_driver
</UL>

<P><STRONG><a name="[34c]"></a>KeyScan_Read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtl876x_keyscan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyScan_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyscan_Handler
</UL>

<P><STRONG><a name="[34e]"></a>KeyScan_Cmd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rtl876x_keyscan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_driver
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyscan_Handler
</UL>

<P><STRONG><a name="[387]"></a>KeyScan_FilterDataConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtl876x_keyscan.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>RTC_WriteReg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtl876x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearTickINT
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearOverFlowINT
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearCompINT
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearWakeupStatusBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearINTPendingBit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetPrescalerCounter
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetCounter
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SystemWakeupConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NvCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_INTConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_set_comp_0_params
</UL>

<P><STRONG><a name="[ec]"></a>RTC_DeInit</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, rtl876x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_DeInit &rArr; RTC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_deinit
</UL>

<P><STRONG><a name="[ee]"></a>RTC_SetPrescaler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_SetPrescaler &rArr; RTC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_init
</UL>

<P><STRONG><a name="[ef]"></a>RTC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtl876x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Cmd &rArr; RTC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_init
</UL>

<P><STRONG><a name="[f0]"></a>RTC_INTConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_INTConfig &rArr; RTC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_clear_comp_0
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_set_comp_0_params
</UL>

<P><STRONG><a name="[f1]"></a>RTC_WKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
</UL>

<P><STRONG><a name="[f2]"></a>RTC_NvCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_NvCmd &rArr; RTC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_init
</UL>

<P><STRONG><a name="[f3]"></a>RTC_SystemWakeupConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_SystemWakeupConfig &rArr; RTC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_init
</UL>

<P><STRONG><a name="[f4]"></a>RTC_ResetCounter</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, rtl876x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_ResetCounter &rArr; RTC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_init
</UL>

<P><STRONG><a name="[f5]"></a>RTC_ResetPrescalerCounter</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, rtl876x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
</UL>

<P><STRONG><a name="[355]"></a>RTC_GetINTStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
</UL>

<P><STRONG><a name="[f6]"></a>RTC_ClearINTPendingBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtl876x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
</UL>

<P><STRONG><a name="[388]"></a>RTC_GetWakeupStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>RTC_ClearWakeupStatusBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtl876x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
</UL>

<P><STRONG><a name="[f8]"></a>RTC_ClearCompINT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtl876x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_ClearCompINT &rArr; RTC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_clear_comp_0
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_set_comp_0_params
</UL>

<P><STRONG><a name="[f9]"></a>RTC_ClearOverFlowINT</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtl876x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_ClearOverFlowINT &rArr; RTC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
</UL>

<P><STRONG><a name="[fa]"></a>RTC_ClearTickINT</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtl876x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
</UL>

<P><STRONG><a name="[fb]"></a>RTC_SelectSrcToGpioInput</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtl876x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_update_safe
</UL>

<P><STRONG><a name="[389]"></a>Pinmux_Reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>Pinmux_Deinit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>Pinmux_Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pinmux_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_check_trig_gpio_status
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_pinmux_config
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
</UL>

<P><STRONG><a name="[fd]"></a>Pad_Config</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_ExitDlpsCb
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_EnterDlpsCb
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_exit
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_dlps_config
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_check_trig_gpio_status
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_module_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_tick_handle
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_ctrl_timer_cb
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_row_pad_config
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_column_pad_config
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
</UL>

<P><STRONG><a name="[ff]"></a>Pad_WakeupEnableValue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pad_WakeupEnableValue
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpPinEnable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpPinDisable
</UL>

<P><STRONG><a name="[100]"></a>Pad_WKDebounceConfig</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pad_WKDebounceConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpPinEnable
</UL>

<P><STRONG><a name="[101]"></a>Pad_WakeupPolarityValue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pad_WakeupPolarityValue
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpPinEnable
</UL>

<P><STRONG><a name="[102]"></a>Pad_DebounceWakeupStatus</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pad_DebounceWakeupStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpPinEnable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_DebounceWakeupStatus
</UL>

<P><STRONG><a name="[103]"></a>System_DebounceWakeupStatus</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = System_DebounceWakeupStatus &rArr; Pad_DebounceWakeupStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_DebounceWakeupStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handler
</UL>

<P><STRONG><a name="[104]"></a>System_WakeUpPinDisable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = System_WakeUpPinDisable &rArr; Pad_WakeupEnableValue
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_WakeupEnableValue
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpPinEnable
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_exit_dlps_config
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_disable_wakeup_config
</UL>

<P><STRONG><a name="[105]"></a>System_WakeUpPinEnable</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rtl876x_pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = System_WakeUpPinEnable &rArr; System_WakeUpPinDisable &rArr; Pad_WakeupEnableValue
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpPinDisable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_DebounceWakeupStatus
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_WakeupPolarityValue
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_WKDebounceConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_WakeupEnableValue
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_enter_dlps_config
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_enable_wakeup_config
</UL>

<P><STRONG><a name="[106]"></a>Pad_WakeupInterruptValue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpInterruptValue
</UL>

<P><STRONG><a name="[107]"></a>System_WakeUpInterruptValue</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_WakeupInterruptValue
</UL>

<P><STRONG><a name="[108]"></a>Pad_OutputControlValue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>

<P><STRONG><a name="[109]"></a>Pad_OutputEnableValue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>

<P><STRONG><a name="[10a]"></a>Pad_PullEnableValue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>

<P><STRONG><a name="[10b]"></a>Pad_PullUpOrDownValue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>

<P><STRONG><a name="[10c]"></a>Pad_PullConfigValue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>

<P><STRONG><a name="[10d]"></a>Pad_PowerOrShutDownValue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>

<P><STRONG><a name="[10e]"></a>Pad_ControlSelectValue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>

<P><STRONG><a name="[10f]"></a>Pad_ClearWakeupINTPendingBit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>

<P><STRONG><a name="[110]"></a>Pad_ClearAllWakeupINT</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rtl876x_pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>

<P><STRONG><a name="[38b]"></a>Spic0_control</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>Spic1_control</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_pinmux.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>NVIC_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, rtl876x_nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_ExitDlpsCb
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_watch_dog_timer_enable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_nvic_config
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_driver_lpc_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
</UL>

<P><STRONG><a name="[ea]"></a>RCC_PeriphClockCmd</STRONG> (Thumb, 252 bytes, Stack size 20 bytes, rtl876x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_DeInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_watch_dog_timer_enable
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_check_trig_gpio_status
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_driver
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_init_driver
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
</UL>

<P><STRONG><a name="[38d]"></a>RCC_PeriFunctionConfig</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtl876x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>RCC_PeriClockConfig</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, rtl876x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38f]"></a>RCC_I2CClkDivConfig</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, rtl876x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>RCC_SPIClkDivConfig</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, rtl876x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>RCC_TIMClkDivConfig</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtl876x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>RCC_UARTClkDivConfig</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, rtl876x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>TIM_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtl876x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
</UL>

<P><STRONG><a name="[112]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, rtl876x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_watch_dog_timer_enable
</UL>

<P><STRONG><a name="[1ac]"></a>TIM_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtl876x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_watch_dog_timer_enable
</UL>

<P><STRONG><a name="[1af]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5_Handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_watch_dog_timer_enable
</UL>

<P><STRONG><a name="[393]"></a>TIM_ChangePeriod</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>TIM_INTConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_watch_dog_timer_enable
</UL>

<P><STRONG><a name="[113]"></a>TIM_PWMChangeFreqAndDuty</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtl876x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[394]"></a>TIM_PWMComplOutputEMCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_tim.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>TIM_PWMDZBypassCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_tim.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>TIM_PWMChangeDZClockSrc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_tim.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>UART_DeInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtl876x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_DeInit &rArr; RCC_PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
</UL>

<P><STRONG><a name="[227]"></a>UART_Init</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, rtl876x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
</UL>

<P><STRONG><a name="[226]"></a>UART_StructInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rtl876x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
</UL>

<P><STRONG><a name="[397]"></a>UART_MaskINTConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>UART_INTConfig</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, rtl876x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_INTConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_test_interrupt_handler
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
</UL>

<P><STRONG><a name="[21a]"></a>UART_SendData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_handle_gdma_msg
</UL>

<P><STRONG><a name="[354]"></a>UART_ReceiveData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_test_interrupt_handler
</UL>

<P><STRONG><a name="[398]"></a>UART_SetBaudRate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[399]"></a>UART_SetParams</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>UART_LoopBackCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>UART_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rtl876x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_test_interrupt_handler
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_handle_gdma_msg
</UL>

<P><STRONG><a name="[115]"></a>ADC_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtl876x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_DeInit &rArr; RCC_PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_init_driver
</UL>

<P><STRONG><a name="[116]"></a>ADC_Init</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, rtl876x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_init_driver
</UL>

<P><STRONG><a name="[209]"></a>ADC_StructInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, rtl876x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_init_driver
</UL>

<P><STRONG><a name="[117]"></a>ADC_Cmd</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, rtl876x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_update_battery_info
</UL>

<P><STRONG><a name="[204]"></a>ADC_INTConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_update_battery_info
</UL>

<P><STRONG><a name="[207]"></a>ADC_ReadRawData</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtl876x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_update_battery_info
</UL>

<P><STRONG><a name="[39b]"></a>ADC_ReadAvgRawData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtl876x_adc.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>ADC_ReadFIFO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_adc.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>ADC_ReadFIFOData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_adc.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>ADC_GetFIFODataLen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_adc.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>ADC_SchIndexConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtl876x_adc.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>ADC_SchTableConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtl876x_adc.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>ADC_BitMapConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_adc.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>ADC_ManualPowerOnCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_adc.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>ADC_WriteFIFOCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_adc.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>ADC_BypassCmd</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtl876x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>

<P><STRONG><a name="[205]"></a>ADC_GetINTStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_update_battery_info
</UL>

<P><STRONG><a name="[206]"></a>ADC_ClearINTPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_update_battery_info
</UL>

<P><STRONG><a name="[11a]"></a>LPC_WriteReg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtl876x_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_ClearINTPendingBit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_ClearFlag
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_ResetCounter
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_SetCompValue
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_WKCmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_INTCmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_INTConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_CounterCmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_DeInit
</UL>

<P><STRONG><a name="[119]"></a>LPC_DeInit</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, rtl876x_lpc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_WriteReg
</UL>

<P><STRONG><a name="[11b]"></a>LPC_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rtl876x_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPC_Init &rArr; LPC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_driver_lpc_init
</UL>

<P><STRONG><a name="[202]"></a>LPC_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_lpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_driver_lpc_init
</UL>

<P><STRONG><a name="[11c]"></a>LPC_Cmd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtl876x_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPC_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_exit_dlps_config
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_enter_dlps_config
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_driver_lpc_init
</UL>

<P><STRONG><a name="[11d]"></a>LPC_CounterCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtl876x_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPC_CounterCmd &rArr; LPC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_exit_dlps_config
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_driver_lpc_init
</UL>

<P><STRONG><a name="[11e]"></a>LPC_INTConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPC_INTConfig &rArr; LPC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_exit_dlps_config
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_enter_dlps_config
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_driver_lpc_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_lpc_handler
</UL>

<P><STRONG><a name="[11f]"></a>LPC_INTCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPC_INTCmd &rArr; LPC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_exit_dlps_config
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_enter_dlps_config
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_driver_lpc_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_lpc_handler
</UL>

<P><STRONG><a name="[120]"></a>LPC_WKCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_lpc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_WriteReg
</UL>

<P><STRONG><a name="[121]"></a>LPC_SetCompValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtl876x_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPC_SetCompValue &rArr; LPC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_exit_dlps_config
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_driver_lpc_init
</UL>

<P><STRONG><a name="[122]"></a>LPC_ResetCounter</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtl876x_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPC_ResetCounter &rArr; LPC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_exit_dlps_config
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_driver_lpc_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_lpc_handler
</UL>

<P><STRONG><a name="[353]"></a>LPC_GetFlagStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtl876x_lpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_lpc_handler
</UL>

<P><STRONG><a name="[123]"></a>LPC_ClearFlag</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, rtl876x_lpc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_WriteReg
</UL>

<P><STRONG><a name="[3a4]"></a>LPC_GetINTStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtl876x_lpc.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>LPC_ClearINTPendingBit</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, rtl876x_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LPC_ClearINTPendingBit &rArr; LPC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_exit_dlps_config
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_enter_dlps_config
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_driver_lpc_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_lpc_handler
</UL>

<P><STRONG><a name="[125]"></a>dis_set_parameter</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dis_set_parameter &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dis_srv_cb
</UL>

<P><STRONG><a name="[25]"></a>dis_attr_read_cb</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dis_attr_read_cb &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dis.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>dis_add_service</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dis_add_service &rArr; server_add_service
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>

<P><STRONG><a name="[129]"></a>bas_set_parameter</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bas_set_parameter
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_profile_callback
</UL>

<P><STRONG><a name="[12a]"></a>bas_battery_level_value_notify</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bas.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send_data
</UL>

<P><STRONG><a name="[12c]"></a>bas_battery_level_value_read_confirm</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bas.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_attr_read_confirm
</UL>

<P><STRONG><a name="[26]"></a>bas_attr_read_cb</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, bas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bas_attr_read_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bas.o(.constdata)
</UL>
<P><STRONG><a name="[27]"></a>bas_cccd_update_cb</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, bas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bas_cccd_update_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bas.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>bas_add_service</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bas_add_service &rArr; server_add_service
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>

<P><STRONG><a name="[12f]"></a>hids_set_parameter</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hids_rmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[28]"></a>hids_attr_read_cb</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, hids_rmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hids_attr_read_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hids_rmc.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>hids_attr_write_cb</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, hids_rmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hids_attr_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hids_rmc.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>hids_cccd_update_cb</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, hids_rmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hids_cccd_update_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hids_rmc.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>hids_add_service</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, hids_rmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hids_add_service &rArr; server_add_service
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>

<P><STRONG><a name="[2b]"></a>vendor_svc_attr_write_cb</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, vendor_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vendor_svc_attr_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vendor_service.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>vendor_svc_cccd_update_cb</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, vendor_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vendor_svc_cccd_update_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vendor_service.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>vendor_svc_add_service</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, vendor_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vendor_svc_add_service &rArr; server_add_service
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>

<P><STRONG><a name="[2e]"></a>ota_attr_write_cb</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, ota_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ota_attr_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_service.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>ota_attr_read_cb</STRONG> (Thumb, 726 bytes, Stack size 72 bytes, ota_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ota_attr_read_cb &rArr; get_ota_active_bank_image_info
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_bank_image_version
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ota_support_bank_switch
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_header_addr_by_img_id
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_bank_size
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_bank_addr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_ota_bank_addr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_param
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ota_active_bank_image_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_service.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>ota_add_service</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ota_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ota_add_service &rArr; server_add_service
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>

<P><STRONG><a name="[139]"></a>dfu_buffer_check_process</STRONG> (Thumb, 624 bytes, Stack size 64 bytes, dfu_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = dfu_buffer_check_process &rArr; dfu_update &rArr; check_dfu_update_image_length &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send_data
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_hw_aes_decrypt_image
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_erase_sector_with_retry
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_check_buf_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
</UL>

<P><STRONG><a name="[13e]"></a>dfu_notify_conn_para_update_req</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, dfu_service.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send_data
</UL>

<P><STRONG><a name="[13f]"></a>dfu_service_handle_valid_fw</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, dfu_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dfu_service_handle_valid_fw &rArr; dfu_check_checksum &rArr; dfu_set_image_ready &rArr; unlock_flash_bp_all
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ota_support_bank_switch
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send_data
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_check_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[141]"></a>dfu_service_handle_active_image</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dfu_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dfu_service_handle_active_image &rArr; dfu_set_image_ready &rArr; unlock_flash_bp_all
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_ota_bank_addr_by_img_id
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ota_support_bank_switch
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_bank_addr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_set_image_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
</UL>

<P><STRONG><a name="[144]"></a>dfu_service_handle_control_point_req</STRONG> (Thumb, 1640 bytes, Stack size 96 bytes, dfu_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = dfu_service_handle_control_point_req &rArr; dfu_buffer_check_process &rArr; dfu_update &rArr; check_dfu_update_image_length &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_ota_bank_addr_by_img_id
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ota_support_bank_switch
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_locked
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send_data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_flash_bp_all
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_update_conn_param
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_param
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_report_target_ic_type
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_report_target_fw_info
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_hw_aes_decrypt_image
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_fw_reboot
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_active_image
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_buffer_check_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_attr_write_cb
</UL>

<P><STRONG><a name="[14d]"></a>dfu_service_handle_packet_req</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, dfu_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = dfu_service_handle_packet_req &rArr; dfu_update &rArr; check_dfu_update_image_length &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_hw_aes_decrypt_image
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_fw_reboot
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_attr_write_cb
</UL>

<P><STRONG><a name="[2f]"></a>dfu_attr_write_cb</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, dfu_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = dfu_attr_write_cb &rArr; dfu_service_handle_control_point_req &rArr; dfu_buffer_check_process &rArr; dfu_update &rArr; check_dfu_update_image_length &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_packet_req
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_service.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>dfu_cccd_update_cb</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, dfu_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dfu_cccd_update_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_service.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>dfu_add_service</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dfu_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dfu_add_service &rArr; server_add_service
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>

<P><STRONG><a name="[15f]"></a>app_nvic_config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_nvic_config &rArr; keyscan_init_driver &rArr; keyscan_init_pad_config &rArr; keyscan_row_pad_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_nvic_config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_driver
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_nvic_config
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_dev_state_evt
</UL>

<P><STRONG><a name="[b0]"></a>main</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = main &rArr; mp_test_check_trig_gpio_status &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_start
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_peek
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_reason_get
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_try_high_speed
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_load_fp_mac_addr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_init_data
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_check_trig_gpio_status
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_data
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_init_data
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_init_data
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init_global_data
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_power_on_seq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[179]"></a>app_set_latency_status</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_set_latency_status &rArr; le_disable_slave_latency
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_disable_slave_latency
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_conn_params_timer_cb
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_callback
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_conn_state_evt
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfu_srv_cb
</UL>

<P><STRONG><a name="[166]"></a>app_init_global_data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_init_global_data
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10]"></a>app_gap_callback</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_gap_callback &rArr; privacy_handle_bond_modify_msg &rArr; privacy_handle_resolv_list &rArr; privacy_handle_resolv_list_int &rArr; le_privacy_set_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_bond_modify_msg
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_latency_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rcu_gap.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>app_privacy_callback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_privacy_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rcu_gap.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>app_profile_callback</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = app_profile_callback &rArr; app_dfu_srv_cb &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_set_parameter
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_update_battery_info
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_get_current_voltage_level
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_srv_cb
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hid_srv_cb
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_general_srv_cb
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfu_srv_cb
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_vendor_srv_cb
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dis_srv_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[157]"></a>rcu_le_gap_init</STRONG> (Thumb, 336 bytes, Stack size 120 bytes, rcu_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rcu_le_gap_init &rArr; privacy_init &rArr; privacy_add_device &rArr; privacy_modify_resolving_list &rArr; le_get_max_le_paired_device_num
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_gap_param
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_register_app_cb
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_set_param
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_param
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_power_on_seq
</UL>

<P><STRONG><a name="[171]"></a>rcu_start_adv</STRONG> (Thumb, 1178 bytes, Stack size 48 bytes, rcu_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rcu_start_adv &rArr; led_blink_start
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_set_addr_resolution
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_start
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_set_param
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_start
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_high_priority_bond
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_clear_all_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_conn_state_evt
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_dev_state_evt
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconn_reason_handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stop_adv_reason_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_one_key_scenario
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_comb_keys_timer_cb
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_start_stop_adv
</UL>

<P><STRONG><a name="[1a4]"></a>rcu_stop_adv</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rcu_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rcu_stop_adv &rArr; le_adv_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_timer_callback
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_handle_enter_low_power_event
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_one_key_scenario
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_comb_keys_timer_cb
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_start_stop_adv
</UL>

<P><STRONG><a name="[17f]"></a>rcu_terminate_connection</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rcu_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rcu_terminate_connection &rArr; le_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_state_timeout_timer_callback
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfu_srv_cb
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_handle_enter_low_power_event
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_comb_keys_timer_cb
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_terminate_connect
</UL>

<P><STRONG><a name="[1a7]"></a>rcu_update_conn_params</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rcu_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rcu_update_conn_params &rArr; le_update_conn_param
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_update_conn_param
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_conn_params_timer_cb
</UL>

<P><STRONG><a name="[15d]"></a>sw_timer_init</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, swtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sw_timer_init &rArr; key_handle_init_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_timer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_init_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_power_on_seq
</UL>

<P><STRONG><a name="[15e]"></a>app_task_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_task_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_power_on_seq
</UL>

<P><STRONG><a name="[1ab]"></a>reset_watch_dog_timer_enable</STRONG> (Thumb, 84 bytes, Stack size 80 bytes, reset_watch_dog_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = reset_watch_dog_timer_enable &rArr; RCC_PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_INTConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_StructInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[1b3]"></a>privacy_change_state</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, privacy_mgnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = privacy_change_state
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_resolv_list
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_modify_resolving_list
</UL>

<P><STRONG><a name="[1b0]"></a>privacy_modify_resolving_list</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, privacy_mgnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = privacy_modify_resolving_list &rArr; le_get_max_le_paired_device_num
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_bdaddr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_max_le_paired_device_num
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_change_state
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_bond_modify_msg
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_add_device
</UL>

<P><STRONG><a name="[1b4]"></a>privacy_add_device</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, privacy_mgnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = privacy_add_device &rArr; privacy_modify_resolving_list &rArr; le_get_max_le_paired_device_num
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_privacy_info
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_modify_resolving_list
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_bond_modify_msg
</UL>

<P><STRONG><a name="[1b6]"></a>privacy_handle_resolv_list_int</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, privacy_mgnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = privacy_handle_resolv_list_int &rArr; le_privacy_set_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_bdaddr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_set_mode
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_modify_resolv_list
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_modify_white_list
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_max_le_paired_device_num
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_resolv_list
</UL>

<P><STRONG><a name="[181]"></a>privacy_handle_resolv_list</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, privacy_mgnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = privacy_handle_resolv_list &rArr; privacy_handle_resolv_list_int &rArr; le_privacy_set_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_gap_param
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_resolv_list_int
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_change_state
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_bond_modify_msg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_dev_state_evt
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_le_privacy_modify_resolv_list_rsp
</UL>

<P><STRONG><a name="[1bb]"></a>privacy_handle_le_privacy_modify_resolv_list_rsp</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, privacy_mgnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = privacy_handle_le_privacy_modify_resolv_list_rsp &rArr; privacy_handle_resolv_list &rArr; privacy_handle_resolv_list_int &rArr; le_privacy_set_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_resolv_list
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_max_le_paired_device_num
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_msg_callback
</UL>

<P><STRONG><a name="[1bc]"></a>privacy_handle_le_privacy_resolution_status_info</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, privacy_mgnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = privacy_handle_le_privacy_resolution_status_info
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_msg_callback
</UL>

<P><STRONG><a name="[17]"></a>privacy_msg_callback</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, privacy_mgnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = privacy_msg_callback &rArr; privacy_handle_le_privacy_modify_resolv_list_rsp &rArr; privacy_handle_resolv_list &rArr; privacy_handle_resolv_list_int &rArr; le_privacy_set_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_le_privacy_resolution_status_info
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_le_privacy_modify_resolv_list_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> privacy_mgnt.o(.text)
</UL>
<P><STRONG><a name="[19f]"></a>privacy_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, privacy_mgnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = privacy_init &rArr; privacy_add_device &rArr; privacy_modify_resolving_list &rArr; le_get_max_le_paired_device_num
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc_intern
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_register_cb
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_max_le_paired_device_num
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_find_key_entry_by_idx
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_add_device
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_change_state
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_le_gap_init
</UL>

<P><STRONG><a name="[197]"></a>privacy_handle_bond_modify_msg</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, privacy_mgnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = privacy_handle_bond_modify_msg &rArr; privacy_handle_resolv_list &rArr; privacy_handle_resolv_list_int &rArr; le_privacy_set_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_resolv_list
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_add_device
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_modify_resolving_list
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_callback
</UL>

<P><STRONG><a name="[1a2]"></a>privacy_set_addr_resolution</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, privacy_mgnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = privacy_set_addr_resolution &rArr; le_privacy_set_addr_resolution
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_set_addr_resolution
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_start_adv
</UL>

<P><STRONG><a name="[1c0]"></a>privacy_read_peer_resolv_addr</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, privacy_mgnt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_resolve_random_address
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_read_peer_resolv_addr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_convert_addr_type
</UL>

<P><STRONG><a name="[1c4]"></a>privacy_read_local_resolv_addr</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, privacy_mgnt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_resolve_random_address
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_read_local_resolv_addr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_convert_addr_type
</UL>

<P><STRONG><a name="[3a5]"></a>privacy_manage_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, privacy_mgnt.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>privacy_set_peer_mode</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, privacy_mgnt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_resolve_random_address
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_set_mode
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_convert_addr_type
</UL>

<P><STRONG><a name="[1c7]"></a>privacy_set_gen_priv_addr_interval</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, privacy_mgnt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_set_resolv_priv_addr_timeout
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_privacy_set_param
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_gap_param
</UL>

<P><STRONG><a name="[c2]"></a>load_overlay</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, overlay_mgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = load_overlay
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[1ca]"></a>get_current_scenario_index</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, overlay_mgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[1cb]"></a>loop_queue_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, loop_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = loop_queue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_transport_init
</UL>

<P><STRONG><a name="[1cc]"></a>loop_queue_deinit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, loop_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>

<P><STRONG><a name="[1cd]"></a>dfu_set_compressed_ready</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dfu_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_auto_read_locked
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_auto_write_locked
</UL>

<P><STRONG><a name="[1d3]"></a>dfu_set_ota_mode_flag</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dfu_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_switch_to_ota_mode
</UL>

<P><STRONG><a name="[1d4]"></a>dfu_switch_to_ota_mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dfu_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_SystemReset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_set_ota_mode_flag
</UL>

<P><STRONG><a name="[148]"></a>dfu_fw_reboot</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfu_fw_reboot
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconn_reason_handler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_packet_req
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
</UL>

<P><STRONG><a name="[13b]"></a>dfu_hw_aes_decrypt_image</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_hw_aes_decrypt_image
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_aes_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_aes_decrypt_16byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_packet_req
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_buffer_check_process
</UL>

<P><STRONG><a name="[14c]"></a>dfu_report_target_ic_type</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfu_report_target_ic_type
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_header_addr_by_img_id
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_bank_addr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
</UL>

<P><STRONG><a name="[149]"></a>dfu_report_target_fw_info</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_report_target_fw_info
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_header_addr_by_img_id
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_bank_addr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
</UL>

<P><STRONG><a name="[13a]"></a>dfu_check_buf_crc</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dfu_check_buf_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_buffer_check_process
</UL>

<P><STRONG><a name="[146]"></a>unlock_flash_bp_all</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = unlock_flash_bp_all
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sw_protect_unlock_by_addr_locked
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_set_image_ready
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_erase_sector_with_retry
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
</UL>

<P><STRONG><a name="[1d9]"></a>lock_flash_bp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lock_flash_bp
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_block_protect_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_set_image_ready
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_erase_sector_with_retry
</UL>

<P><STRONG><a name="[13d]"></a>dfu_flash_erase_sector_with_retry</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dfu_flash_erase_sector_with_retry &rArr; dfu_flash_check_blank
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_ota_bank_addr_by_img_id
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_bank_addr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_flash_bp_all
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash_bp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_check_blank
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_buffer_check_process
</UL>

<P><STRONG><a name="[13c]"></a>dfu_update</STRONG> (Thumb, 504 bytes, Stack size 48 bytes, dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = dfu_update &rArr; check_dfu_update_image_length &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_ota_bank_addr_by_img_id
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_bank_addr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_flash_bp_all
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash_bp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dfu_update_image_length
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_block
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_packet_req
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_buffer_check_process
</UL>

<P><STRONG><a name="[143]"></a>dfu_set_image_ready</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfu_set_image_ready &rArr; unlock_flash_bp_all
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_set_ready
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_flash_bp_all
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash_bp
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_check_checksum
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_active_image
</UL>

<P><STRONG><a name="[140]"></a>dfu_check_checksum</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dfu_check_checksum &rArr; dfu_set_image_ready &rArr; unlock_flash_bp_all
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_ota_bank_addr_by_img_id
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ota_support_bank_switch
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_image_chksum
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_bank_addr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_set_image_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_valid_fw
</UL>

<P><STRONG><a name="[161]"></a>keyscan_nvic_config</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, keyscan_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = keyscan_nvic_config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_nvic_config
</UL>

<P><STRONG><a name="[1e3]"></a>keyscan_long_press_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, keyscan_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = keyscan_long_press_handler &rArr; KeyScan_DeInit &rArr; RCC_PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan_DeInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_press_key_detect_timer_cb
</UL>

<P><STRONG><a name="[1a8]"></a>keyscan_init_timer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, keyscan_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = keyscan_init_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_init
</UL>

<P><STRONG><a name="[1e8]"></a>key_handle_get_key_type_by_index</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, key_handle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_one_key_scenario
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_prepare_hid_usage_buffer
</UL>

<P><STRONG><a name="[1e7]"></a>key_handle_get_hid_usage_id_by_index</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, key_handle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_prepare_hid_usage_buffer
</UL>

<P><STRONG><a name="[1e6]"></a>key_handle_get_hid_usage_page_by_index</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, key_handle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_prepare_hid_usage_buffer
</UL>

<P><STRONG><a name="[1ea]"></a>key_handle_set_pending_keyscan_fifo_data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key_handle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_handle_set_pending_keyscan_fifo_data
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_one_key_scenario
</UL>

<P><STRONG><a name="[1eb]"></a>key_handle_notify_hid_key_event_by_index</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, key_handle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = key_handle_notify_hid_key_event_by_index &rArr; key_handle_notify_hid_usage_buffer &rArr; server_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_usage_buffer
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_prepare_hid_usage_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_one_key_scenario
</UL>

<P><STRONG><a name="[1ec]"></a>key_handle_notify_hid_release_event</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, key_handle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = key_handle_notify_hid_release_event &rArr; key_handle_notify_hid_usage_buffer &rArr; server_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_usage_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_release_event
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_one_key_scenario
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_press_key_detect_timer_cb
</UL>

<P><STRONG><a name="[172]"></a>key_handle_reset_pending_keyscan_fifo_data</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key_handle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_handle_reset_pending_keyscan_fifo_data
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_authen_state_evt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stop_adv_reason_handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_key_data_timer_cb
</UL>

<P><STRONG><a name="[3a6]"></a>key_handle_get_ir_key_code_by_index</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, key_handle.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>key_handle_init_data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, key_handle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_handle_init_data
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a9]"></a>key_handle_init_timer</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, key_handle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = key_handle_init_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_init
</UL>

<P><STRONG><a name="[18e]"></a>key_handle_is_key_index_in_fifo</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, key_handle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = key_handle_is_key_index_in_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_authen_state_evt
</UL>

<P><STRONG><a name="[1ee]"></a>one_key_to_handle</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, key_handle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>

<P><STRONG><a name="[1ef]"></a>two_key_to_handle</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, key_handle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>

<P><STRONG><a name="[1f0]"></a>key_handle_notify_hid_key_event_by_fifo</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, key_handle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_usage_buffer
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_prepare_hid_usage_buffer
</UL>

<P><STRONG><a name="[1f1]"></a>key_handle_release_event</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, key_handle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = key_handle_release_event &rArr; key_handle_notify_hid_release_event &rArr; key_handle_notify_hid_usage_buffer &rArr; server_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_exit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_release_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_pressed_event
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[1f2]"></a>key_handle_pressed_event</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, key_handle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = key_handle_pressed_event &rArr; key_handle_one_key_scenario &rArr; key_handle_notify_hid_key_event_by_index &rArr; key_handle_notify_hid_usage_buffer &rArr; server_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_start
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_exit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_release_event
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_one_key_scenario
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[150]"></a>keyscan_pinmux_config</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, keyscan_basic_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = keyscan_pinmux_config &rArr; Pinmux_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pinmux_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_power_on_seq
</UL>

<P><STRONG><a name="[152]"></a>led_module_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, led_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = led_module_init &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_power_on_seq
</UL>

<P><STRONG><a name="[182]"></a>led_blink_start</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, led_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_blink_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_state_get
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_start_adv
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_pressed_event
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_authen_state_evt
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_dev_state_evt
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_handle_key_pressed_event
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_handle_enter_low_power_event
</UL>

<P><STRONG><a name="[187]"></a>led_blink_exit</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, led_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = led_blink_exit &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_timer_callback
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_release_event
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_pressed_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_dev_state_evt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_press_key_detect_timer_cb
</UL>

<P><STRONG><a name="[17c]"></a>bat_update_battery_info</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, battery_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bat_update_battery_info &rArr; bat_calibrate_voltage &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearINTPendingBit
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetINTStatus
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadRawData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_INTConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_calculate_bat_level
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_calibrate_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_msg_handle
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_dev_state_evt
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfu_srv_cb
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_profile_callback
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_handle_key_pressed_event
</UL>

<P><STRONG><a name="[154]"></a>bat_init_driver</STRONG> (Thumb, 70 bytes, Stack size 120 bytes, battery_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = bat_init_driver &rArr; ADC_DeInit &rArr; RCC_PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_exit_dlps_config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_power_on_seq
</UL>

<P><STRONG><a name="[169]"></a>bat_init_data</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, battery_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bat_init_data &rArr; ADC_CalibrationInit &rArr; ADC_GetKValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CalibrationInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>bat_get_current_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, battery_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_dev_state_evt
</UL>

<P><STRONG><a name="[17d]"></a>bat_get_current_voltage_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, battery_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfu_srv_cb
</UL>

<P><STRONG><a name="[199]"></a>bat_get_current_voltage_level</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, battery_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_profile_callback
</UL>

<P><STRONG><a name="[162]"></a>bat_nvic_config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, battery_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bat_nvic_config &rArr; bat_driver_lpc_init &rArr; LPC_Init &rArr; LPC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_driver_lpc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_nvic_config
</UL>

<P><STRONG><a name="[20b]"></a>bat_msg_handle</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, battery_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bat_msg_handle &rArr; bat_handle_key_pressed_event &rArr; bat_update_battery_info &rArr; bat_calibrate_voltage &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_update_battery_info
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_handle_key_pressed_event
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_handle_enter_low_power_event
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_driver_lpc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[153]"></a>uart_test_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = uart_test_init &rArr; data_uart_transport_init &rArr; data_uart_init &rArr; UART_DeInit &rArr; RCC_PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_transport_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_power_on_seq
</UL>

<P><STRONG><a name="[217]"></a>uart_test_handle_uart_msg</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uart_test_handle_uart_msg &rArr; data_uart_packet_decode &rArr; uart_packet_decode &rArr; loop_queue_read_buf &rArr; loop_queue_get_vailid_data_size &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_packet_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[219]"></a>uart_test_handle_gdma_msg</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, data_uart_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>

<P><STRONG><a name="[213]"></a>mp_test_enable_test_mode_flag</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mp_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_test_enable_test_mode_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_save
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_init_data
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enable_test_mode_flag
</UL>

<P><STRONG><a name="[16a]"></a>mp_test_init_data</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mp_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_test_init_data &rArr; mp_test_enable_test_mode_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_load
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_enable_test_mode_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>mp_test_disable_test_mode_flag</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mp_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_test_disable_test_mode_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_save
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_vendor_srv_cb
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_comb_keys_timer_cb
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_disable_test_mode_flag
</UL>

<P><STRONG><a name="[34f]"></a>mp_test_is_test_mode_flag_en</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mp_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_comb_keys_timer_cb
</UL>

<P><STRONG><a name="[211]"></a>mp_test_set_fast_pair_info</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, mp_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mp_test_set_fast_pair_info &rArr; le_gen_bond_dev
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_save
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_gen_bond_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_handle_comb_keys_timer_cb
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_fast_pair_mode
</UL>

<P><STRONG><a name="[16d]"></a>mp_test_load_fp_mac_addr</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mp_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_test_load_fp_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_load
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177]"></a>mp_test_clear_bond_info</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mp_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_test_clear_bond_info &rArr; le_bond_clear_all_keys
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_clear_all_keys
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_bond_dev_num
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_srv_cb
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_vendor_srv_cb
</UL>

<P><STRONG><a name="[220]"></a>mp_test_handle_comb_keys_timer_cb</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, mp_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = mp_test_handle_comb_keys_timer_cb &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_hci_mode
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_test_mode
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_set_fast_pair_info
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_comb_keys_timer_cb
</UL>

<P><STRONG><a name="[16c]"></a>mp_test_check_trig_gpio_status</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, mp_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = mp_test_check_trig_gpio_status &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPin
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pinmux_Config
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_hci_mode
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_test_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[215]"></a>data_uart_init</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, uart_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = data_uart_init &rArr; UART_DeInit &rArr; RCC_PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTConfig
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StructInit
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pinmux_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_transport_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_change_baudrate
</UL>

<P><STRONG><a name="[216]"></a>data_uart_transport_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = data_uart_transport_init &rArr; data_uart_init &rArr; UART_DeInit &rArr; RCC_PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamVectorTableUpdate
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_packet_struct_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_init
</UL>

<P><STRONG><a name="[210]"></a>data_uart_cmd_response</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, uart_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btxfcs
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_find_device_type
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_auto_k_rf_freq
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_get_dut_info
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_single_tone
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_reboot_device
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_hci_download_mode
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_terminate_connect
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_change_baudrate
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_erase_pair_info
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enable_test_mode_flag
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_disable_test_mode_flag
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_hci_mode
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_start_stop_adv
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_dlps
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_get_voice_config
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_set_voice_config
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_get_dev_state
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_fast_pair_mode
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_read_mac_addr
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_read_app_version
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_read_patch_version
</UL>

<P><STRONG><a name="[218]"></a>data_uart_packet_decode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = data_uart_packet_decode &rArr; uart_packet_decode &rArr; loop_queue_read_buf &rArr; loop_queue_get_vailid_data_size &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_packet_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_handle_uart_msg
</UL>

<P><STRONG><a name="[163]"></a>rtc_driver_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtc_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rtc_driver_init &rArr; RTC_ResetCounter &rArr; RTC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetCounter
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SystemWakeupConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NvCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_nvic_config
</UL>

<P><STRONG><a name="[22f]"></a>rtc_driver_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtc_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>

<P><STRONG><a name="[230]"></a>rtc_driver_get_us</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, rtc_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_get_seconds
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_get_ms
</UL>

<P><STRONG><a name="[233]"></a>rtc_driver_get_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtc_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_get_us
</UL>

<P><STRONG><a name="[234]"></a>rtc_driver_get_seconds</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtc_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_get_us
</UL>

<P><STRONG><a name="[235]"></a>rtc_driver_set_comp_0_params</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rtc_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearCompINT
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_INTConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>

<P><STRONG><a name="[236]"></a>rtc_driver_clear_comp_0</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtc_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtc_driver_clear_comp_0 &rArr; RTC_ClearCompINT &rArr; RTC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearCompINT
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_INTConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
</UL>

<P><STRONG><a name="[1f]"></a>gap_lib_handle_btif_msg</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gap_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gap_lib_handle_btif_msg &rArr; le_handle_vendor_cmd_rsp &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_handle_vendor_evt_info
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_handle_vendor_cmd_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_lib.o(.text)
</UL>
<P><STRONG><a name="[156]"></a>gap_lib_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gap_lib_init &rArr; gap_register_extend_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_register_extend_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_power_on_seq
</UL>

<P><STRONG><a name="[23a]"></a>btif_vendor_cmd_req</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_vendor_read_thermal_meter_data
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_vendor_set_ant_ctrl
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_measure_master_clk_freq_mode
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_ae_scheme
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_more_precise_32k_option
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_set_priority
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_ae_coding_scheme
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_modify_bt_le_fw_policy
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_vendor_cmd_req
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_trigger_internal_32k_calibration
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_update_conn_param
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_drop_acl_data
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_adv_3_data_set
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_adv_3_data_enable
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_lps_bootup_active_time
</UL>

<P><STRONG><a name="[23c]"></a>btif_sw_reset_req</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[176]"></a>BTIF_VendorGetResponse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTIF_VendorGetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_vendor_srv_cb
</UL>

<P><STRONG><a name="[23d]"></a>btif_send_event</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[23e]"></a>hci_if_open</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[23f]"></a>hci_if_close</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[240]"></a>hci_if_write</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[241]"></a>hci_if_confirm</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[242]"></a>gap_start_bt_stack</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gap_start_bt_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[243]"></a>gap_register_app_cb</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[1a1]"></a>gap_set_param</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gap_set_param
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_le_gap_init
</UL>

<P><STRONG><a name="[135]"></a>gap_get_param</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gap_get_param
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_attr_read_cb
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_read_mac_addr
</UL>

<P><STRONG><a name="[244]"></a>gap_set_pairable_mode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[245]"></a>gap_write_airplan_mode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[246]"></a>gap_read_airplan_mode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[247]"></a>gap_handle_msg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gap_handle_msg
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[248]"></a>gap_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[239]"></a>gap_register_extend_cb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gap_register_extend_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_lib_init
</UL>

<P><STRONG><a name="[249]"></a>gap_send_dev_state</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[155]"></a>le_gap_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_gap_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_power_on_seq
</UL>

<P><STRONG><a name="[24a]"></a>le_gap_msg_info_way</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[24b]"></a>le_get_max_link_num</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[19e]"></a>le_register_app_cb</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_register_app_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_le_gap_init
</UL>

<P><STRONG><a name="[19d]"></a>le_set_gap_param</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = le_set_gap_param
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_le_gap_init
</UL>

<P><STRONG><a name="[1ba]"></a>le_get_gap_param</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_get_gap_param
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_resolv_list
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_set_gen_priv_addr_interval
</UL>

<P><STRONG><a name="[1b8]"></a>le_modify_white_list</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = le_modify_white_list
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_resolv_list_int
</UL>

<P><STRONG><a name="[24c]"></a>le_gen_rand_addr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[24d]"></a>le_set_rand_addr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[24e]"></a>le_cfg_local_identity_address</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[24f]"></a>le_set_host_chann_classif</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[250]"></a>le_write_default_data_len</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[251]"></a>le_vendor_set_rem_min_sca</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[16e]"></a>server_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = server_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>

<P><STRONG><a name="[252]"></a>server_builtin_service_reg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[128]"></a>server_add_service</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = server_add_service
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_add_service
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vendor_svc_add_service
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_add_service
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_add_service
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_add_service
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_add_service
</UL>

<P><STRONG><a name="[253]"></a>server_add_service_by_start_handle</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[16f]"></a>server_register_app_cb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = server_register_app_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>

<P><STRONG><a name="[12d]"></a>server_attr_read_confirm</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_battery_level_value_read_confirm
</UL>

<P><STRONG><a name="[254]"></a>server_exec_write_confirm</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[255]"></a>server_attr_write_confirm</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[12b]"></a>server_send_data</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = server_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_battery_level_value_notify
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_srv_cb
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfu_srv_cb
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_vendor_srv_cb
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_valid_fw
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_notify_conn_para_update_req
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_buffer_check_process
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_usage_buffer
</UL>

<P><STRONG><a name="[256]"></a>server_get_write_cmd_data_buffer</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[257]"></a>server_get_start_handle</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[258]"></a>server_clear_service</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[259]"></a>server_set_service_reg_mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[25a]"></a>client_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[25b]"></a>client_register_general_client_cb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[25c]"></a>client_register_spec_client_cb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[25d]"></a>client_all_primary_srv_discovery</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[25e]"></a>client_by_uuid_srv_discovery</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[25f]"></a>client_by_uuid128_srv_discovery</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[260]"></a>client_relationship_discovery</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[261]"></a>client_all_char_discovery</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[262]"></a>client_by_uuid_char_discovery</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[263]"></a>client_by_uuid128_char_discovery</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[264]"></a>client_all_char_descriptor_discovery</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[265]"></a>client_attr_read</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[266]"></a>client_attr_read_using_uuid</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[267]"></a>client_attr_write</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[268]"></a>client_attr_ind_confirm</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[269]"></a>client_get_notify_data_buffer</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[26a]"></a>client_send_exchange_mtu_req</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[1a0]"></a>le_adv_set_param</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = le_adv_set_param
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_start_adv
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_le_gap_init
</UL>

<P><STRONG><a name="[26b]"></a>le_adv_get_param</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[1a3]"></a>le_adv_start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_adv_start
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_start_adv
</UL>

<P><STRONG><a name="[1a5]"></a>le_adv_stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_adv_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_stop_adv
</UL>

<P><STRONG><a name="[26c]"></a>le_adv_update_param</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[26d]"></a>le_adv_read_tx_power</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[26e]"></a>le_adv_set_tx_power</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[26f]"></a>le_vendor_one_shot_adv</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[270]"></a>le_scan_set_param</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[271]"></a>le_scan_get_param</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[272]"></a>le_scan_start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[273]"></a>le_scan_stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[14b]"></a>le_get_conn_param</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = le_get_conn_param
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_gap_msg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_conn_param_update_evt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_conn_state_evt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_set_priority
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_update_conn_param
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_drop_acl_data
</UL>

<P><STRONG><a name="[274]"></a>le_get_conn_info</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[18a]"></a>le_get_conn_addr</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = le_get_conn_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_conn_state_evt
</UL>

<P><STRONG><a name="[275]"></a>le_get_conn_id</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[276]"></a>le_get_active_link_num</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[277]"></a>le_get_idle_link_num</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[1a6]"></a>le_disconnect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_terminate_connection
</UL>

<P><STRONG><a name="[278]"></a>le_read_remote_version</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[279]"></a>le_write_authen_payload_timeout</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[27a]"></a>le_read_rssi</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[27b]"></a>le_read_chann_map</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[189]"></a>le_set_data_len</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = le_set_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_conn_state_evt
</UL>

<P><STRONG><a name="[27c]"></a>le_set_phy</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[17a]"></a>le_disable_slave_latency</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_disable_slave_latency
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_latency_status
</UL>

<P><STRONG><a name="[27d]"></a>le_update_passed_chann_map</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[27e]"></a>le_set_conn_param</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[27f]"></a>le_connect</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[14a]"></a>le_update_conn_param</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = le_update_conn_param
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_update_conn_params
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
</UL>

<P><STRONG><a name="[280]"></a>le_set_conn_tx_power</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[281]"></a>le_get_conn_local_addr_by_conn_id</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[195]"></a>le_bond_set_param</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = le_bond_set_param
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_gap_msg
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_le_gap_init
</UL>

<P><STRONG><a name="[282]"></a>le_bond_get_param</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[283]"></a>le_bond_pair</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[192]"></a>le_bond_get_display_key</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_bond_get_display_key
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_gap_msg
</UL>

<P><STRONG><a name="[194]"></a>le_bond_passkey_input_confirm</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = le_bond_passkey_input_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_gap_msg
</UL>

<P><STRONG><a name="[196]"></a>le_bond_oob_input_confirm</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_bond_oob_input_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_gap_msg
</UL>

<P><STRONG><a name="[191]"></a>le_bond_just_work_confirm</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_bond_just_work_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_gap_msg
</UL>

<P><STRONG><a name="[284]"></a>le_bond_passkey_display_confirm</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[193]"></a>le_bond_user_confirm</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_bond_user_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_gap_msg
</UL>

<P><STRONG><a name="[285]"></a>le_bond_keypress_notify</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[286]"></a>le_bond_cfg_local_key_distribute</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[18d]"></a>le_bond_clear_all_keys</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_bond_clear_all_keys
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_start_adv
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_clear_bond_info
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_authen_state_evt
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_comb_keys_timer_cb
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_erase_pair_info
</UL>

<P><STRONG><a name="[287]"></a>le_bond_delete_by_idx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[288]"></a>le_bond_delete_by_bd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[289]"></a>le_bond_get_sec_level</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[28a]"></a>le_link_check_conn_id_internal</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_set_priority
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_update_conn_param
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_drop_acl_data
</UL>

<P><STRONG><a name="[28b]"></a>le_get_conn_id_by_handle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_get_conn_id_by_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_handle_vendor_cmd_rsp
</UL>

<P><STRONG><a name="[28c]"></a>flash_save_local_name</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[28d]"></a>flash_load_local_name</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[28e]"></a>flash_save_local_appearance</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[28f]"></a>flash_load_local_appearance</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[290]"></a>flash_save_local_irk</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[291]"></a>flash_load_local_irk</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[292]"></a>le_find_key_entry</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[1be]"></a>le_find_key_entry_by_idx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_find_key_entry_by_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_init
</UL>

<P><STRONG><a name="[214]"></a>le_get_bond_dev_num</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_get_bond_dev_num
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_clear_bond_info
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_erase_pair_info
</UL>

<P><STRONG><a name="[293]"></a>le_get_low_priority_bond</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[184]"></a>le_get_high_priority_bond</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_get_high_priority_bond
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_start_adv
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_dev_state_evt
</UL>

<P><STRONG><a name="[294]"></a>le_set_high_priority_bond</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[1c2]"></a>le_resolve_random_address</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_set_peer_mode
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_read_local_resolv_addr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_read_peer_resolv_addr
</UL>

<P><STRONG><a name="[295]"></a>le_get_cccd_data</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[21f]"></a>le_gen_bond_dev</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = le_gen_bond_dev
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_set_fast_pair_info
</UL>

<P><STRONG><a name="[296]"></a>le_clear_cccd_data</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[297]"></a>le_set_privacy_info</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[1b5]"></a>le_get_privacy_info</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_get_privacy_info
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_add_device
</UL>

<P><STRONG><a name="[298]"></a>le_check_privacy_bond</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[1b1]"></a>le_get_max_le_paired_device_num</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_get_max_le_paired_device_num
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_le_privacy_modify_resolv_list_rsp
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_resolv_list_int
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_modify_resolving_list
</UL>

<P><STRONG><a name="[299]"></a>le_get_dev_bond_info_len</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[29a]"></a>le_get_dev_bond_info</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[29b]"></a>le_set_dev_bond_info</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[29c]"></a>le_get_dev_info</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[29d]"></a>le_set_local_ltk</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[1c8]"></a>le_privacy_set_param</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_set_gen_priv_addr_interval
</UL>

<P><STRONG><a name="[29e]"></a>le_privacy_get_param</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[1bd]"></a>le_privacy_register_cb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_privacy_register_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_init
</UL>

<P><STRONG><a name="[1bf]"></a>le_privacy_set_addr_resolution</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_privacy_set_addr_resolution
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_set_addr_resolution
</UL>

<P><STRONG><a name="[1c3]"></a>le_privacy_read_peer_resolv_addr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_read_peer_resolv_addr
</UL>

<P><STRONG><a name="[1c5]"></a>le_privacy_read_local_resolv_addr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_read_local_resolv_addr
</UL>

<P><STRONG><a name="[1c9]"></a>le_privacy_set_resolv_priv_addr_timeout</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_set_gen_priv_addr_interval
</UL>

<P><STRONG><a name="[1b7]"></a>le_privacy_modify_resolv_list</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = le_privacy_modify_resolv_list
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_resolv_list_int
</UL>

<P><STRONG><a name="[1b9]"></a>le_privacy_set_mode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = le_privacy_set_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_set_peer_mode
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_resolv_list_int
</UL>

<P><STRONG><a name="[1c1]"></a>le_privacy_convert_addr_type</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_set_peer_mode
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_read_local_resolv_addr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_read_peer_resolv_addr
</UL>

<P><STRONG><a name="[29f]"></a>le_ext_adv_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2a0]"></a>le_ext_adv_get_param</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2a1]"></a>le_ext_adv_create_adv_handle</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2a2]"></a>le_ext_adv_get_conn_id_by_adv_handle</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2a3]"></a>le_ext_adv_get_adv_handle_by_conn_id</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2a4]"></a>le_ext_adv_set_adv_param</STRONG> (Thumb, 64 bytes, Stack size 80 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2a5]"></a>le_ext_adv_set_adv_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2a6]"></a>le_ext_adv_set_scan_response_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2a7]"></a>le_ext_adv_set_random</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2a8]"></a>le_ext_adv_start_setting</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2a9]"></a>le_ext_adv_set_adv_enable_param</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2aa]"></a>le_ext_adv_enable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2ab]"></a>le_ext_adv_disable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2ac]"></a>le_ext_adv_clear_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2ad]"></a>le_ext_adv_remove_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2ae]"></a>le_ext_adv_gap_msg_info_way</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2af]"></a>le_ext_scan_set_param</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2b0]"></a>le_ext_scan_get_param</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2b1]"></a>le_ext_scan_set_phy_param</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2b2]"></a>le_ext_scan_start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2b3]"></a>le_ext_scan_stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2b4]"></a>le_ext_scan_gap_msg_info_way</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2b5]"></a>le_dtm_receiver_test</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2b6]"></a>le_dtm_transmitter_test</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2b7]"></a>le_dtm_test_end</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2b8]"></a>le_dtm_enhanced_receiver_test</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2b9]"></a>le_dtm_enhanced_transmitter_test</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2ba]"></a>le_dtm_transmitter_test_v4</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2bb]"></a>gatt_register_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2bc]"></a>gaps_set_parameter</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[183]"></a>gaps_set_peripheral_preferred_conn_param</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gaps_set_peripheral_preferred_conn_param
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_dev_state_evt
</UL>

<P><STRONG><a name="[2bd]"></a>gatts_service_changed_indicate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2be]"></a>le_rf_read_rf_path_compensation</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2bf]"></a>le_rf_write_rf_path_compensation</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2c0]"></a>le_rf_enhanced_read_transmit_power_level</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2c1]"></a>le_rf_read_remote_transmit_power_level</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2c2]"></a>le_rf_set_transmit_power_reporting_enable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2c3]"></a>le_rf_set_path_loss_reporting_params</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2c4]"></a>le_rf_set_path_loss_reporting_enable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2c5]"></a>le_coc_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2c6]"></a>le_coc_register_app_cb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2c7]"></a>le_coc_set_param</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2c8]"></a>le_coc_get_chann_param</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2c9]"></a>le_coc_create</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2ca]"></a>le_coc_disc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2cb]"></a>le_coc_send_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2cc]"></a>le_coc_reg_psm</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[2cd]"></a>le_coc_set_psm_security</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, gap_lib_system_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall_Stack
</UL>

<P><STRONG><a name="[20a]"></a>ADC_CalibrationInit</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, adc_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC_CalibrationInit &rArr; ADC_GetKValue
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_locked
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetKValue
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_init_data
</UL>

<P><STRONG><a name="[1f7]"></a>ADC_GetVoltage</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, adc_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADC_GetVoltage &rArr; ADC_GetKVoltage &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetKVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_calibrate_voltage
</UL>

<P><STRONG><a name="[3a7]"></a>ADC_GetResistance</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, adc_lib.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>gap_register_vendor_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_vendor_cmd.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>gap_set_lps_bootup_active_time</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[3a9]"></a>lps_get_wakeup_time</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, gap_vendor_cmd.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>le_vendor_adv_3_data_enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[2d4]"></a>le_vendor_adv_3_data_set</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[2d5]"></a>le_vendor_drop_acl_data</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_param
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_link_check_conn_id_internal
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[2d6]"></a>le_vendor_update_conn_param</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_param
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_link_check_conn_id_internal
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[2d7]"></a>le_vendor_trigger_internal_32k_calibration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[237]"></a>le_handle_vendor_cmd_rsp</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, gap_vendor_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = le_handle_vendor_cmd_rsp &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_id_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_lib_handle_btif_msg
</UL>

<P><STRONG><a name="[2d8]"></a>gap_vendor_cmd_req</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[238]"></a>le_handle_vendor_evt_info</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_vendor_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_handle_vendor_evt_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_lib_handle_btif_msg
</UL>

<P><STRONG><a name="[2d9]"></a>le_vendor_modify_bt_le_fw_policy</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[2da]"></a>le_ae_coding_scheme</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[2dc]"></a>le_vendor_check_priority_level</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_set_priority
</UL>

<P><STRONG><a name="[2db]"></a>le_vendor_set_priority</STRONG> (Thumb, 374 bytes, Stack size 72 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_param
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_check_priority_level
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_link_check_conn_id_internal
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[2dd]"></a>le_vendor_more_precise_32k_option</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[2de]"></a>le_vendor_ae_scheme</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[2df]"></a>le_vendor_measure_master_clk_freq_mode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[2e0]"></a>gap_vendor_set_ant_ctrl</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[2e1]"></a>gap_vendor_read_thermal_meter_data</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[231]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_get_us
</UL>

<P><STRONG><a name="[3aa]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_get_seconds
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_get_ms
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_driver_get_us
</UL>

<P><STRONG><a name="[3ab]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>vsnprintf</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
</UL>

<P><STRONG><a name="[165]"></a>srand</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[a7]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[3ac]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_main
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMChangeFreqAndDuty
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_update_conn_params
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_start
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_tick_handle
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_ctrl_timer_cb
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_copy_buf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_read_buf
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_write_buf
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_is_full
</UL>

<P><STRONG><a name="[3ad]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_calculate_bat_level
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_get_free_data_size
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_get_vailid_data_size
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[1ff]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_calibrate_voltage
</UL>

<P><STRONG><a name="[3ae]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_calibrate_voltage
</UL>

<P><STRONG><a name="[2e4]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[3af]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[3b0]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[2ea]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[2e9]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[3b1]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_calibrate_voltage
</UL>

<P><STRONG><a name="[3b2]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_calibrate_voltage
</UL>

<P><STRONG><a name="[3b3]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_calibrate_voltage
</UL>

<P><STRONG><a name="[3b4]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_calibrate_voltage
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetKVoltage
</UL>

<P><STRONG><a name="[2ec]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[2eb]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[200]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_calibrate_voltage
</UL>

<P><STRONG><a name="[3b5]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[1fa]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_calibrate_voltage
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetKVoltage
</UL>

<P><STRONG><a name="[3b6]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[3b7]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[2f1]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[2f2]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2f3]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2ef]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[8e]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[83]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[2e2]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[2e3]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[20]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[2f7]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[96]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[2fa]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[92]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[9a]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[2fb]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[94]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[9c]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[85]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[2f6]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[2f9]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2f5]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3b8]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[24]"></a>_printf_fp_hex_real</STRONG> (Thumb, 718 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf2.o(x$fpl$printf2)
</UL>
<P><STRONG><a name="[305]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[9f]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[a1]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[307]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[a3]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[a5]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[2f8]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[2f4]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[309]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[a9]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[304]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2ff]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[300]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[302]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[30c]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[301]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[30e]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>

<P><STRONG><a name="[30f]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[30b]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[126]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dis.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_attr_read_cb
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_set_parameter
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_start_adv
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_gap_msg
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconn_reason_handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stop_adv_reason_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_service_handle_control_point_req
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_msg_callback
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_handle_vendor_cmd_rsp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_start_stop_adv
</UL>

<P><STRONG><a name="[303]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2fc]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[ac]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[22]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[2cf]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetKVoltage
</UL>

<P><STRONG><a name="[310]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[1fc]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_calibrate_voltage
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetKVoltage
</UL>

<P><STRONG><a name="[3b9]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[3ba]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[312]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[87]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[8b]"></a>_printf_fp_hex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[335]"></a>TIM_DLPS_Enter</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rtl876x_io_dlps.o(.app.data_ram.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_EnterDlpsCb
</UL>

<P><STRONG><a name="[334]"></a>GPIO_DLPS_Enter</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, rtl876x_io_dlps.o(.app.data_ram.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_EnterDlpsCb
</UL>

<P><STRONG><a name="[336]"></a>GPIO_DLPS_Exit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, rtl876x_io_dlps.o(.app.data_ram.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_ExitDlpsCb
</UL>

<P><STRONG><a name="[337]"></a>KeyScan_DLPS_Exit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, rtl876x_io_dlps.o(.app.data_ram.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_ExitDlpsCb
</UL>

<P><STRONG><a name="[338]"></a>TIM_DLPS_Exit</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, rtl876x_io_dlps.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DLPS_Exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_ExitDlpsCb
</UL>

<P><STRONG><a name="[132]"></a>get_ota_active_bank_image_info</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ota_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_ota_active_bank_image_info
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ota_support_bank_switch
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_bank_image_size_by_img_id
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_bank_addr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_ota_bank_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_attr_read_cb
</UL>

<P><STRONG><a name="[d]"></a>app_enter_dlps_config</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = app_enter_dlps_config &rArr; keyscan_enter_dlps_config &rArr; keyscan_row_pad_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_dlps_config
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_enter_dlps_config
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_enter_dlps_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>app_exit_dlps_config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = app_exit_dlps_config &rArr; keyscan_exit_dlps_config &rArr; keyscan_init_driver &rArr; keyscan_init_pad_config &rArr; keyscan_row_pad_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_exit_dlps_config
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_exit_dlps_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>app_dlps_check_cb</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_dlps_check_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_check_dlps
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_check_dlps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[14f]"></a>app_normal_power_on_seq</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = app_normal_power_on_seq &rArr; rcu_le_gap_init &rArr; privacy_init &rArr; privacy_add_device &rArr; privacy_modify_resolving_list &rArr; le_get_max_le_paired_device_num
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IORegister
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btmac_pm_set_power_mode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_pm_register_callback_func
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_pm_set_power_mode
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_le_gap_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_module_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_gap_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_pinmux_config
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_init_pad_config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_lib_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_init_driver
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>app_le_profile_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_le_profile_init &rArr; ota_add_service &rArr; server_add_service
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_add_service
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vendor_svc_add_service
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_add_service
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_add_service
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_add_service
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_register_app_cb
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_power_on_seq
</UL>

<P><STRONG><a name="[170]"></a>app_stop_adv_reason_handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_stop_adv_reason_handler &rArr; rcu_start_adv &rArr; led_blink_start
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_start_adv
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_reset_pending_keyscan_fifo_data
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_dev_state_evt
</UL>

<P><STRONG><a name="[173]"></a>app_disconn_reason_handler</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_disconn_reason_handler &rArr; rcu_start_adv &rArr; led_blink_start
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_start_adv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_fw_reboot
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_conn_state_evt
</UL>

<P><STRONG><a name="[174]"></a>app_dis_srv_cb</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_dis_srv_cb &rArr; dis_set_parameter &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_set_parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_profile_callback
</UL>

<P><STRONG><a name="[175]"></a>app_vendor_srv_cb</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_vendor_srv_cb &rArr; server_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send_data
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_disable_test_mode_flag
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_clear_bond_info
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIF_VendorGetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_profile_callback
</UL>

<P><STRONG><a name="[17b]"></a>app_dfu_srv_cb</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = app_dfu_srv_cb &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send_data
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_terminate_connection
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_update_battery_info
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_get_current_voltage_value
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_latency_status
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_profile_callback
</UL>

<P><STRONG><a name="[180]"></a>periph_handle_dev_state_evt</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = periph_handle_dev_state_evt &rArr; app_nvic_config &rArr; keyscan_init_driver &rArr; keyscan_init_pad_config &rArr; keyscan_row_pad_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_peek
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_reason_get
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_start_adv
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_handle_resolv_list
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_start
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_exit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_high_priority_bond
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gaps_set_peripheral_preferred_conn_param
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_update_battery_info
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_get_current_mode
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stop_adv_reason_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_nvic_config
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_gap_msg
</UL>

<P><STRONG><a name="[188]"></a>periph_handle_conn_state_evt</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = periph_handle_conn_state_evt &rArr; app_disconn_reason_handler &rArr; rcu_start_adv &rArr; led_blink_start
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_bdaddr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_start_adv
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_data_len
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_addr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_latency_status
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconn_reason_handler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_param
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_gap_msg
</UL>

<P><STRONG><a name="[18c]"></a>periph_handle_authen_state_evt</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = periph_handle_authen_state_evt &rArr; led_blink_start
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_start
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_clear_all_keys
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_reset_pending_keyscan_fifo_data
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_is_key_index_in_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_gap_msg
</UL>

<P><STRONG><a name="[18f]"></a>periph_conn_param_update_evt</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = periph_conn_param_update_evt &rArr; le_get_conn_param
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_param
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_gap_msg
</UL>

<P><STRONG><a name="[190]"></a>periph_handle_gap_msg</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = periph_handle_gap_msg &rArr; periph_handle_dev_state_evt &rArr; app_nvic_config &rArr; keyscan_init_driver &rArr; keyscan_init_pad_config &rArr; keyscan_row_pad_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_user_confirm
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_set_param
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_passkey_input_confirm
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_oob_input_confirm
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_just_work_confirm
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_get_display_key
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_conn_param_update_evt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_authen_state_evt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_conn_state_evt
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_handle_dev_state_evt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_param
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[198]"></a>app_general_srv_cb</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_general_srv_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_profile_callback
</UL>

<P><STRONG><a name="[19a]"></a>app_hid_srv_cb</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_hid_srv_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_profile_callback
</UL>

<P><STRONG><a name="[19b]"></a>app_ota_srv_cb</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, rcu_application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_ota_srv_cb &rArr; server_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_clear_bond_info
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_profile_callback
</UL>

<P><STRONG><a name="[12]"></a>adv_timer_callback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, swtimer.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = adv_timer_callback &rArr; led_blink_exit &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_stop_adv
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> swtimer.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>next_state_timeout_timer_callback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, swtimer.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = next_state_timeout_timer_callback &rArr; rcu_terminate_connection &rArr; le_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_terminate_connection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> swtimer.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>update_conn_params_timer_cb</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, swtimer.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = update_conn_params_timer_cb &rArr; rcu_update_conn_params &rArr; le_update_conn_param
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_update_conn_params
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_latency_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> swtimer.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>enter_dss_timer_cb</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, swtimer.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enter_dss_timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btmac_pm_set_power_mode
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_pm_stop_all_non_excluded_timer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_pm_set_power_mode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> swtimer.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>app_main_task</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, app_task.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = app_main_task &rArr; app_handle_io_msg &rArr; periph_handle_gap_msg &rArr; periph_handle_dev_state_evt &rArr; app_nvic_config &rArr; keyscan_init_driver &rArr; keyscan_init_pad_config &rArr; keyscan_row_pad_config &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_recv_intern
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_queue_create_intern
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_watch_dog_timer_enable
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_start_bt_stack
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_handle_msg
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.text)
</UL>
<P><STRONG><a name="[1d0]"></a>dfu_write</STRONG> (Thumb, 180 bytes, Stack size 304 bytes, dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dfu_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_split_read_locked
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_locked
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update
</UL>

<P><STRONG><a name="[1db]"></a>flash_erase_sector</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_erase_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_locked
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_erase_sector_with_retry
</UL>

<P><STRONG><a name="[1de]"></a>flash_erase_block</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_erase_block
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_locked
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update
</UL>

<P><STRONG><a name="[1dc]"></a>dfu_flash_check_blank</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dfu_flash_check_blank
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_ota_bank_addr_by_img_id
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_auto_read_locked
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_bank_addr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_erase_sector_with_retry
</UL>

<P><STRONG><a name="[1dd]"></a>check_dfu_update_image_length</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = check_dfu_update_image_length &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_ota_bank_size_by_img_id
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_bank_size
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update
</UL>

<P><STRONG><a name="[1e2]"></a>keyscan_enable_wakeup_config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, keyscan_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = keyscan_enable_wakeup_config &rArr; System_WakeUpPinEnable &rArr; System_WakeUpPinDisable &rArr; Pad_WakeupEnableValue
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpPinEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_enter_dlps_config
</UL>

<P><STRONG><a name="[1e4]"></a>keyscan_disable_wakeup_config</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, keyscan_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = keyscan_disable_wakeup_config &rArr; System_WakeUpPinDisable &rArr; Pad_WakeupEnableValue
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_WakeUpPinDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_exit_dlps_config
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_enter_dlps_config
</UL>

<P><STRONG><a name="[19]"></a>key_handle_comb_keys_timer_cb</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, key_handle.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = key_handle_comb_keys_timer_cb &rArr; mp_test_handle_comb_keys_timer_cb &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_SystemReset
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_stop_adv
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_terminate_connection
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_start_adv
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_disable_test_mode_flag
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_clear_all_keys
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_is_test_mode_flag_en
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_handle_comb_keys_timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_handle.o(.text)
</UL>
<P><STRONG><a name="[1a]"></a>notify_key_data_timer_cb</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, key_handle.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = notify_key_data_timer_cb &rArr; app_send_msg_to_apptask
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_reset_pending_keyscan_fifo_data
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_handle.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>long_press_key_detect_timer_cb</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, key_handle.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = long_press_key_detect_timer_cb &rArr; key_handle_notify_hid_release_event &rArr; key_handle_notify_hid_usage_buffer &rArr; server_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_exit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_release_event
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_long_press_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_handle.o(.text)
</UL>
<P><STRONG><a name="[1e5]"></a>key_handle_prepare_hid_usage_buffer</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, key_handle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = key_handle_prepare_hid_usage_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_get_hid_usage_page_by_index
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_get_hid_usage_id_by_index
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_get_key_type_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_key_event_by_fifo
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_key_event_by_index
</UL>

<P><STRONG><a name="[1e9]"></a>key_handle_notify_hid_usage_buffer</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, key_handle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = key_handle_notify_hid_usage_buffer &rArr; server_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_key_event_by_fifo
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_release_event
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_key_event_by_index
</UL>

<P><STRONG><a name="[1ed]"></a>key_handle_one_key_scenario</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, key_handle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = key_handle_one_key_scenario &rArr; key_handle_notify_hid_key_event_by_index &rArr; key_handle_notify_hid_usage_buffer &rArr; server_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_stop_adv
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_start_adv
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_release_event
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_notify_hid_key_event_by_index
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_set_pending_keyscan_fifo_data
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_get_key_type_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_handle_pressed_event
</UL>

<P><STRONG><a name="[1c]"></a>led_ctrl_timer_cb</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, led_driver.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = led_ctrl_timer_cb &rArr; led_tick_handle &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_tick_handle
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led_driver.o(.text)
</UL>
<P><STRONG><a name="[1f4]"></a>led_tick_handle</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, led_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = led_tick_handle &rArr; Pad_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_ctrl_timer_cb
</UL>

<P><STRONG><a name="[1d]"></a>bat_lpc_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, battery_driver.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = bat_lpc_handler &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_SystemReset
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_ClearINTPendingBit
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_GetFlagStatus
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_ResetCounter
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_INTCmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_INTConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battery_driver.o(.text)
</UL>
<P><STRONG><a name="[1f6]"></a>bat_calibrate_voltage</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, battery_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bat_calibrate_voltage &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_update_battery_info
</UL>

<P><STRONG><a name="[201]"></a>bat_driver_lpc_init</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, battery_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bat_driver_lpc_init &rArr; LPC_Init &rArr; LPC_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamVectorTableUpdate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_ClearINTPendingBit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_ResetCounter
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_SetCompValue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_INTCmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_INTConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_CounterCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_Cmd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_StructInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_msg_handle
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_nvic_config
</UL>

<P><STRONG><a name="[208]"></a>bat_calculate_bat_level</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, battery_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bat_calculate_bat_level &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_update_battery_info
</UL>

<P><STRONG><a name="[20c]"></a>bat_handle_enter_low_power_event</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, battery_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bat_handle_enter_low_power_event &rArr; rcu_stop_adv &rArr; le_adv_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_stop_adv
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_terminate_connection
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_start
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_msg_handle
</UL>

<P><STRONG><a name="[20d]"></a>bat_handle_key_pressed_event</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, battery_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bat_handle_key_pressed_event &rArr; bat_update_battery_info &rArr; bat_calibrate_voltage &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_start
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_update_battery_info
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_msg_handle
</UL>

<P><STRONG><a name="[20f]"></a>switch_to_test_mode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = switch_to_test_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_single_tone
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_test_enter_fast_pair_mode
</UL>

<P><STRONG><a name="[31]"></a>uart_test_read_patch_version</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_test_read_patch_version &rArr; data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_header_addr_by_img_id
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>uart_test_read_app_version</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uart_test_read_app_version &rArr; data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>uart_test_read_mac_addr</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uart_test_read_mac_addr &rArr; data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_param
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>uart_test_enter_fast_pair_mode</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = uart_test_enter_fast_pair_mode &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_set_fast_pair_info
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_test_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>uart_test_get_dev_state</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_test_get_dev_state &rArr; data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>uart_test_voice_test_start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_test_voice_test_start
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>uart_test_voice_test_stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_test_voice_test_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>uart_test_set_voice_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_test_set_voice_config &rArr; data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>uart_test_get_voice_config</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uart_test_get_voice_config &rArr; data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>uart_test_enter_dlps</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_test_enter_dlps &rArr; data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>uart_test_start_stop_adv</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_test_start_stop_adv &rArr; data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_stop_adv
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_start_adv
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>uart_test_enter_hci_mode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = uart_test_enter_hci_mode &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hci_mode_flag
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_SystemReset
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>uart_test_disable_test_mode_flag</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_test_disable_test_mode_flag &rArr; data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_disable_test_mode_flag
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>uart_test_enable_test_mode_flag</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_test_enable_test_mode_flag &rArr; data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_enable_test_mode_flag
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>uart_test_erase_pair_info</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_test_erase_pair_info &rArr; data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_clear_all_keys
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_bond_dev_num
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>uart_test_change_baudrate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = uart_test_change_baudrate &rArr; data_uart_init &rArr; UART_DeInit &rArr; RCC_PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>uart_test_terminate_connect</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_test_terminate_connect &rArr; data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_terminate_connection
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>uart_test_enter_hci_download_mode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_test_enter_hci_download_mode &rArr; data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>uart_test_reboot_device</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = uart_test_reboot_device &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_SystemReset
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>uart_test_enter_single_tone</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = uart_test_enter_single_tone &rArr; log_direct_app &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct_app
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_test_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>uart_test_direct_k_rf_freq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, data_uart_test.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>uart_test_get_dut_info</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_test_get_dut_info &rArr; data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>uart_test_auto_k_rf_freq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_test_auto_k_rf_freq &rArr; data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>uart_test_find_device_type</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, data_uart_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_test_find_device_type &rArr; data_uart_cmd_response
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_cmd_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_uart_test.o(.constdata)
</UL>
<P><STRONG><a name="[21c]"></a>switch_to_test_mode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mp_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = switch_to_test_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_write_safe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btaon_fast_read_safe
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_check_trig_gpio_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_handle_comb_keys_timer_cb
</UL>

<P><STRONG><a name="[221]"></a>switch_to_hci_mode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mp_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = switch_to_hci_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hci_mode_flag
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_check_trig_gpio_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_handle_comb_keys_timer_cb
</UL>

<P><STRONG><a name="[225]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mp_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_test_check_trig_gpio_status
</UL>

<P><STRONG><a name="[1e]"></a>data_uart_test_interrupt_handler</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, uart_transport.o(.app.data_ram.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = data_uart_test_interrupt_handler &rArr; loop_queue_write_buf &rArr; loop_queue_is_full &rArr; loop_queue_get_free_data_size &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_write_buf
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_is_full
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_transport.o(.text)
</UL>
<P><STRONG><a name="[22a]"></a>uart_packet_decode</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, uart_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_packet_decode &rArr; loop_queue_read_buf &rArr; loop_queue_get_vailid_data_size &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btxfcs
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_read_buf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_is_empty
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_queue_get_vailid_data_size
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_packet_struct_init
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_packet_decode
</UL>

<P><STRONG><a name="[229]"></a>uart_packet_struct_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart_transport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_packet_decode
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_transport_init
</UL>

<P><STRONG><a name="[2d1]"></a>ADC_GetKValue</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, adc_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetKValue
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CalibrationInit
</UL>

<P><STRONG><a name="[2ce]"></a>ADC_GetKVoltage</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, adc_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_GetKVoltage &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetVoltage
</UL>

<P><STRONG><a name="[2e6]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2e5]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[313]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[311]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[21]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[2fe]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[30a]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[30d]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[7f]"></a>__scatterload</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[306]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[308]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
