
========================================================================

** ELF Header Information

    File Name: D:\xiangmu¡ªkeil\pan216x_evb\pan2160_evb_demo\example\tx_rx_demo\tx\keil\Objects\tx.axf

    Machine class: ELFCLASS32 (32-bit)
    Data encoding: ELFDATA2LSB (Little endian)
    Header version: EV_CURRENT (Current version)
    Operating System ABI: none
    ABI Version: 0
    File Type: ET_EXEC (Executable) (2)
    Machine: EM_ARM (ARM)

    Image Entry point: 0x000000f5
    Flags: EF_ARM_HASENTRY + EF_ARM_ABI_FLOAT_SOFT (0x05000202)

    ARM ELF revision: 5 (ABI version 2)

    Conforms to Soft float procedure-call standard

    Built with
    Component: ARM Compiler 5.06 update 7 (build 960) Tool: armasm [4d35fa]
    Component: ARM Compiler 5.06 update 7 (build 960) Tool: armlink [4d3601]

    Header size: 52 bytes (0x34)
    Program header entry size: 32 bytes (0x20)
    Section header entry size: 40 bytes (0x28)

    Program header entries: 1
    Section header entries: 16

    Program header offset: 429380 (0x00068d44)
    Section header offset: 429412 (0x00068d64)

    Section header string table index: 15

========================================================================

** Program header #0 (PT_LOAD) [PF_X + PF_W + PF_R + PF_ARM_ENTRY]
    Size : 22472 bytes (19324 bytes in file)
    Virtual address: 0x00000000 (Alignment 8)


========================================================================

** Section #1 'ER_IROM1' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 19240 bytes (alignment 4)
    Address: 0x00000000

    $d.realdata
    RESET
    __Vectors
        0x00000000:    20000ca0    ...     DCD    536874144
        0x00000004:    000000f5    ....    DCD    245
        0x00000008:    000000fd    ....    DCD    253
        0x0000000c:    000000d9    ....    DCD    217
        0x00000010:    00000000    ....    DCD    0
        0x00000014:    00000000    ....    DCD    0
        0x00000018:    00000000    ....    DCD    0
        0x0000001c:    00000000    ....    DCD    0
        0x00000020:    00000000    ....    DCD    0
        0x00000024:    00000000    ....    DCD    0
        0x00000028:    00000000    ....    DCD    0
        0x0000002c:    00000101    ....    DCD    257
        0x00000030:    00000000    ....    DCD    0
        0x00000034:    00000000    ....    DCD    0
        0x00000038:    00000103    ....    DCD    259
        0x0000003c:    00000105    ....    DCD    261
        0x00000040:    00000107    ....    DCD    263
        0x00000044:    00000107    ....    DCD    263
        0x00000048:    00000107    ....    DCD    263
        0x0000004c:    00000107    ....    DCD    263
        0x00000050:    00000107    ....    DCD    263
        0x00000054:    00000107    ....    DCD    263
        0x00000058:    00000107    ....    DCD    263
        0x0000005c:    00000107    ....    DCD    263
        0x00000060:    00001cbd    ....    DCD    7357
        0x00000064:    00000107    ....    DCD    263
        0x00000068:    00000107    ....    DCD    263
        0x0000006c:    00000107    ....    DCD    263
        0x00000070:    00000107    ....    DCD    263
        0x00000074:    00000107    ....    DCD    263
        0x00000078:    00000107    ....    DCD    263
        0x0000007c:    00000107    ....    DCD    263
        0x00000080:    00000107    ....    DCD    263
        0x00000084:    00000107    ....    DCD    263
        0x00000088:    00000107    ....    DCD    263
        0x0000008c:    00000107    ....    DCD    263
        0x00000090:    00000107    ....    DCD    263
        0x00000094:    00000107    ....    DCD    263
        0x00000098:    00000107    ....    DCD    263
        0x0000009c:    00000000    ....    DCD    0
        0x000000a0:    00000107    ....    DCD    263
        0x000000a4:    00000107    ....    DCD    263
        0x000000a8:    00000107    ....    DCD    263
        0x000000ac:    00000107    ....    DCD    263
        0x000000b0:    00000107    ....    DCD    263
        0x000000b4:    00000107    ....    DCD    263
        0x000000b8:    00000107    ....    DCD    263
        0x000000bc:    00000107    ....    DCD    263
    $t
    .ARM.Collect$$$$00000000
    .ARM.Collect$$$$00000001
    __Vectors_End
    __main
    _main_stk
        0x000000c0:    4804        .H      LDR      r0,__lit__00000000 ; [0xd4] = 0x20000ca0
        0x000000c2:    4685        .F      MOV      sp,r0
    .ARM.Collect$$$$00000004
    _main_scatterload
        0x000000c4:    f000f98a    ....    BL       __scatterload ; 0x3dc
    .ARM.Collect$$$$00000008
    .ARM.Collect$$$$0000000A
    .ARM.Collect$$$$0000000B
    __main_after_scatterload
    _main_clock
    _main_cpp_init
    _main_init
        0x000000c8:    4800        .H      LDR      r0,[pc,#0] ; [0xcc] = 0x255d
        0x000000ca:    4700        .G      BX       r0
    $d
        0x000000cc:    0000255d    ]%..    DCD    9565
    $t
    .ARM.Collect$$$$0000000E
    __rt_lib_shutdown_fini
        0x000000d0:    46c0        .F      MOV      r8,r8
        0x000000d2:    46c0        .F      MOV      r8,r8
    $d
    .ARM.Collect$$$$00002712
    __lit__00000000
    .ARM.Collect$$$$0000000F
    .ARM.Collect$$$$00000011
    __rt_final_cpp
    __rt_final_exit
        0x000000d4:    20000ca0    ...     DCD    536874144
    $t
    .emb_text
    HardFault_Handler
;;;72         MOVS    r0, #4
        0x000000d8:    2004        .       MOVS     r0,#4
;;;73         MOV     r1, LR
        0x000000da:    4671        qF      MOV      r1,lr
;;;74         TST     r0, r1
        0x000000dc:    4208        .B      TST      r0,r1
;;;75         BEQ     Stack_Use_MSP
        0x000000de:    d002        ..      BEQ      0xe6 ; HardFault_Handler + 14
;;;76         MRS     R0, PSP ;stack use PSP
        0x000000e0:    f3ef8009    ....    MRS      r0,PSP
;;;77         B       Get_LR_and_Branch
        0x000000e4:    e001        ..      B        0xea ; HardFault_Handler + 18
;;;78     Stack_Use_MSP
;;;79         MRS     R0, MSP ; stack use MSP
        0x000000e6:    f3ef8008    ....    MRS      r0,MSP
;;;80     Get_LR_and_Branch
;;;81         MOV     R1, LR ; LR current value
        0x000000ea:    4671        qF      MOV      r1,lr
;;;82         LDR     R2,=__cpp(Hard_Fault_Handler)
        0x000000ec:    4a00        .J      LDR      r2,[pc,#0] ; [0xf0] = 0xb25
;;;83         BX      R2
        0x000000ee:    4710        .G      BX       r2
    $d
        0x000000f0:    00000b25    %...    DCD    2853
    $t
    .text
    Reset_Handler
;;; ..\..\..\..\pan108\device\Source\arm\startup_PANSeries.s
;;;100                     LDR     R0, =SystemInit
        0x000000f4:    4804        .H      LDR      r0,[pc,#16] ; [0x108] = 0x1c29
;;;101                     BLX     R0
        0x000000f6:    4780        .G      BLX      r0
;;;102                     LDR     R0, =__main
        0x000000f8:    4804        .H      LDR      r0,[pc,#16] ; [0x10c] = 0xc1
;;;103                     BX      R0
        0x000000fa:    4700        .G      BX       r0
    NMI_Handler
;;;104                     ENDP
;;;105    
;;;106    ; Dummy Exception Handlers (infinite loops which can be modified)
;;;107    
;;;108    NMI_Handler     PROC
;;;109                    EXPORT  NMI_Handler                [WEAK]
;;;110                    B       .
        0x000000fc:    e7fe        ..      B        NMI_Handler ; 0xfc
;;;111                    ENDP
;;;112    HardFault_Handler\
;;;113                    PROC
;;;114                    EXPORT  HardFault_Handler          [WEAK]
;;;115                    B       .
        0x000000fe:    e7fe        ..      B        0xfe ; NMI_Handler + 2
    SVC_Handler
;;;116                    ENDP
;;;117    SVC_Handler     PROC
;;;118                    EXPORT  SVC_Handler                [WEAK]
;;;119                    B       .
        0x00000100:    e7fe        ..      B        SVC_Handler ; 0x100
    PendSV_Handler
;;;120                    ENDP
;;;121    PendSV_Handler  PROC
;;;122                    EXPORT  PendSV_Handler             [WEAK]
;;;123                    B       .
        0x00000102:    e7fe        ..      B        PendSV_Handler ; 0x102
    SysTick_Handler
;;;124                    ENDP
;;;125    SysTick_Handler PROC
;;;126                    EXPORT  SysTick_Handler            [WEAK]
;;;127                    B       .
        0x00000104:    e7fe        ..      B        SysTick_Handler ; 0x104
    ACC_IRQHandler
    ADC_IRQHandler
    BOD_IRQHandler
    DMA_IRQHandler
    EXT0_IRQHandler
    EXT1_IRQHandler
    EXT2_IRQHandler
    GPIO_IRQHandler
    I2C0_IRQHandler
    I2S_IRQHandler
    KSCAN_IRQHandler
    LL_IRQHandler
    MODEM_IRQHandler
    PWM0_IRQHandler
    PWM1_IRQHandler
    PWM2_IRQHandler
    QDEC_IRQHandler
    RSVD_IRQHandler
    SLEEP_IRQHandler
    SPI0_IRQHandler
    SPI1_IRQHandler
    STANDBY_IRQHandler
    TMR1_IRQHandler
    TMR2_IRQHandler
    TRIM_IRQHandler
    UART0_IRQHandler
    UART1_IRQHandler
    USBDMA_IRQHandler
    USB_IRQHandler
    WDT_IRQHandler
    WWDT_IRQHandler
;;;128                    ENDP
;;;129    
;;;130    Default_Handler PROC
;;;131                    EXPORT  I2C0_IRQHandler            [WEAK]
;;;132                    EXPORT  SPI0_IRQHandler            [WEAK]
;;;133                    EXPORT  I2S_IRQHandler             [WEAK]
;;;134                    EXPORT  UART0_IRQHandler           [WEAK]
;;;135                    EXPORT  PWM0_IRQHandler            [WEAK]
;;;136                    EXPORT  ADC_IRQHandler             [WEAK]
;;;137                    EXPORT  WDT_IRQHandler             [WEAK]
;;;138                    EXPORT  WWDT_IRQHandler            [WEAK]
;;;139                    EXPORT  TMR0_IRQHandler            [WEAK]
;;;140                    EXPORT  ACC_IRQHandler             [WEAK]
;;;141                    EXPORT  SPI1_IRQHandler            [WEAK]
;;;142                    EXPORT  LL_IRQHandler              [WEAK]
;;;143                    EXPORT  UART1_IRQHandler           [WEAK]
;;;144                    EXPORT  TMR1_IRQHandler            [WEAK]
;;;145                    EXPORT  TMR2_IRQHandler            [WEAK]
;;;146                    EXPORT  TRIM_IRQHandler            [WEAK]
;;;147                    EXPORT  KSCAN_IRQHandler           [WEAK]
;;;148                    EXPORT  QDEC_IRQHandler            [WEAK]
;;;149                    EXPORT  GPIO_IRQHandler            [WEAK]
;;;150                    EXPORT  PWM1_IRQHandler            [WEAK]
;;;151                    EXPORT  PWM2_IRQHandler            [WEAK]
;;;152                    EXPORT  USBDMA_IRQHandler          [WEAK]
;;;153                    EXPORT  USB_IRQHandler             [WEAK]
;;;154                    EXPORT  RSVD_IRQHandler            [WEAK]
;;;155                    EXPORT  EXT0_IRQHandler            [WEAK]
;;;156                    EXPORT  EXT1_IRQHandler            [WEAK]
;;;157                    EXPORT  EXT2_IRQHandler            [WEAK]
;;;158                    EXPORT  DMA_IRQHandler             [WEAK]
;;;159                    EXPORT  BOD_IRQHandler             [WEAK]
;;;160                    EXPORT  SLEEP_IRQHandler           [WEAK]
;;;161                    EXPORT  STANDBY_IRQHandler         [WEAK]
;;;162                    EXPORT  MODEM_IRQHandler           [WEAK]
;;;163    
;;;164    
;;;165    I2C0_IRQHandler            ; 0,
;;;166    SPI0_IRQHandler            ; 1,
;;;167    I2S_IRQHandler             ; 2,
;;;168    UART0_IRQHandler           ; 3,
;;;169    PWM0_IRQHandler            ; 4,
;;;170    ADC_IRQHandler             ; 5,
;;;171    WDT_IRQHandler             ; 6,
;;;172    WWDT_IRQHandler            ; 7,
;;;173    TMR0_IRQHandler            ; 8,
;;;174    
;;;175    ACC_IRQHandler             ; 9,
;;;176    SPI1_IRQHandler            ; 10,
;;;177    LL_IRQHandler              ; 11,
;;;178    UART1_IRQHandler           ; 12,
;;;179    TMR1_IRQHandler            ; 13,
;;;180    TMR2_IRQHandler            ; 14,
;;;181    TRIM_IRQHandler            ; 15,
;;;182    KSCAN_IRQHandler           ; 16,
;;;183    QDEC_IRQHandler            ; 17,
;;;184    
;;;185    GPIO_IRQHandler            ; 18,
;;;186    PWM1_IRQHandler            ; 19,
;;;187    PWM2_IRQHandler            ; 20,
;;;188    USBDMA_IRQHandler          ; 21,
;;;189    USB_IRQHandler             ; 22,
;;;190    RSVD_IRQHandler            ; 23,
;;;191    EXT0_IRQHandler            ; 24,
;;;192    EXT1_IRQHandler            ; 25,
;;;193    EXT2_IRQHandler            ; 26,
;;;194    
;;;195    DMA_IRQHandler             ; 27,
;;;196    BOD_IRQHandler             ; 28,
;;;197    SLEEP_IRQHandler           ; 29,
;;;198    STANDBY_IRQHandler         ; 30,
;;;199    MODEM_IRQHandler           ; 31,
;;;200    
;;;201                    B       .
        0x00000106:    e7fe        ..      B        ACC_IRQHandler ; 0x106
    $d
        0x00000108:    00001c29    )...    DCD    7209
        0x0000010c:    000000c1    ....    DCD    193
    $t
    .text
    __aeabi_uidiv
    __aeabi_uidivmod
        0x00000110:    b530        0.      PUSH     {r4,r5,lr}
        0x00000112:    460b        .F      MOV      r3,r1
        0x00000114:    4601        .F      MOV      r1,r0
        0x00000116:    2000        .       MOVS     r0,#0
        0x00000118:    2220         "      MOVS     r2,#0x20
        0x0000011a:    2401        .$      MOVS     r4,#1
        0x0000011c:    e009        ..      B        0x132 ; __aeabi_uidiv + 34
        0x0000011e:    460d        .F      MOV      r5,r1
        0x00000120:    40d5        .@      LSRS     r5,r5,r2
        0x00000122:    429d        .B      CMP      r5,r3
        0x00000124:    d305        ..      BCC      0x132 ; __aeabi_uidiv + 34
        0x00000126:    461d        .F      MOV      r5,r3
        0x00000128:    4095        .@      LSLS     r5,r5,r2
        0x0000012a:    1b49        I.      SUBS     r1,r1,r5
        0x0000012c:    4625        %F      MOV      r5,r4
        0x0000012e:    4095        .@      LSLS     r5,r5,r2
        0x00000130:    1940        @.      ADDS     r0,r0,r5
        0x00000132:    4615        .F      MOV      r5,r2
        0x00000134:    1e52        R.      SUBS     r2,r2,#1
        0x00000136:    2d00        .-      CMP      r5,#0
        0x00000138:    dcf1        ..      BGT      0x11e ; __aeabi_uidiv + 14
        0x0000013a:    bd30        0.      POP      {r4,r5,pc}
    .text
    __aeabi_uldivmod
        0x0000013c:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0000013e:    b41f        ..      PUSH     {r0-r4}
        0x00000140:    4606        .F      MOV      r6,r0
        0x00000142:    2000        .       MOVS     r0,#0
        0x00000144:    b082        ..      SUB      sp,sp,#8
        0x00000146:    4605        .F      MOV      r5,r0
        0x00000148:    2440        @$      MOVS     r4,#0x40
        0x0000014a:    9101        ..      STR      r1,[sp,#4]
        0x0000014c:    9000        ..      STR      r0,[sp,#0]
        0x0000014e:    e01b        ..      B        0x188 ; __aeabi_uldivmod + 76
        0x00000150:    9901        ..      LDR      r1,[sp,#4]
        0x00000152:    4622        "F      MOV      r2,r4
        0x00000154:    460f        .F      MOV      r7,r1
        0x00000156:    4630        0F      MOV      r0,r6
        0x00000158:    f000f8ee    ....    BL       __aeabi_llsr ; 0x338
        0x0000015c:    9a04        ..      LDR      r2,[sp,#0x10]
        0x0000015e:    9b05        ..      LDR      r3,[sp,#0x14]
        0x00000160:    1a80        ..      SUBS     r0,r0,r2
        0x00000162:    4199        .A      SBCS     r1,r1,r3
        0x00000164:    d310        ..      BCC      0x188 ; __aeabi_uldivmod + 76
        0x00000166:    4610        .F      MOV      r0,r2
        0x00000168:    4619        .F      MOV      r1,r3
        0x0000016a:    4622        "F      MOV      r2,r4
        0x0000016c:    f000f8d4    ....    BL       __aeabi_llsl ; 0x318
        0x00000170:    1a36        6.      SUBS     r6,r6,r0
        0x00000172:    418f        .A      SBCS     r7,r7,r1
        0x00000174:    9701        ..      STR      r7,[sp,#4]
        0x00000176:    4622        "F      MOV      r2,r4
        0x00000178:    2001        .       MOVS     r0,#1
        0x0000017a:    2100        .!      MOVS     r1,#0
        0x0000017c:    9f00        ..      LDR      r7,[sp,#0]
        0x0000017e:    f000f8cb    ....    BL       __aeabi_llsl ; 0x318
        0x00000182:    1838        8.      ADDS     r0,r7,r0
        0x00000184:    414d        MA      ADCS     r5,r5,r1
        0x00000186:    9000        ..      STR      r0,[sp,#0]
        0x00000188:    4620         F      MOV      r0,r4
        0x0000018a:    1e64        d.      SUBS     r4,r4,#1
        0x0000018c:    2800        .(      CMP      r0,#0
        0x0000018e:    dcdf        ..      BGT      0x150 ; __aeabi_uldivmod + 20
        0x00000190:    9b01        ..      LDR      r3,[sp,#4]
        0x00000192:    9800        ..      LDR      r0,[sp,#0]
        0x00000194:    4629        )F      MOV      r1,r5
        0x00000196:    4632        2F      MOV      r2,r6
        0x00000198:    b007        ..      ADD      sp,sp,#0x1c
        0x0000019a:    bdf0        ..      POP      {r4-r7,pc}
    .text
    __aeabi_lmul
    _ll_mul
        0x0000019c:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0000019e:    b41f        ..      PUSH     {r0-r4}
        0x000001a0:    b086        ..      SUB      sp,sp,#0x18
        0x000001a2:    2000        .       MOVS     r0,#0
        0x000001a4:    9000        ..      STR      r0,[sp,#0]
        0x000001a6:    9001        ..      STR      r0,[sp,#4]
        0x000001a8:    9002        ..      STR      r0,[sp,#8]
        0x000001aa:    9806        ..      LDR      r0,[sp,#0x18]
        0x000001ac:    9906        ..      LDR      r1,[sp,#0x18]
        0x000001ae:    b280        ..      UXTH     r0,r0
        0x000001b0:    9004        ..      STR      r0,[sp,#0x10]
        0x000001b2:    9807        ..      LDR      r0,[sp,#0x1c]
        0x000001b4:    0c09        ..      LSRS     r1,r1,#16
        0x000001b6:    0402        ..      LSLS     r2,r0,#16
        0x000001b8:    1400        ..      ASRS     r0,r0,#16
        0x000001ba:    4311        .C      ORRS     r1,r1,r2
        0x000001bc:    9007        ..      STR      r0,[sp,#0x1c]
        0x000001be:    2700        .'      MOVS     r7,#0
        0x000001c0:    9d08        ..      LDR      r5,[sp,#0x20]
        0x000001c2:    9809        ..      LDR      r0,[sp,#0x24]
        0x000001c4:    9106        ..      STR      r1,[sp,#0x18]
        0x000001c6:    463e        >F      MOV      r6,r7
        0x000001c8:    463c        <F      MOV      r4,r7
        0x000001ca:    9003        ..      STR      r0,[sp,#0xc]
        0x000001cc:    9803        ..      LDR      r0,[sp,#0xc]
        0x000001ce:    b2a9        ..      UXTH     r1,r5
        0x000001d0:    0402        ..      LSLS     r2,r0,#16
        0x000001d2:    0c00        ..      LSRS     r0,r0,#16
        0x000001d4:    9003        ..      STR      r0,[sp,#0xc]
        0x000001d6:    9804        ..      LDR      r0,[sp,#0x10]
        0x000001d8:    0c2d        -.      LSRS     r5,r5,#16
        0x000001da:    4315        .C      ORRS     r5,r5,r2
        0x000001dc:    4348        HC      MULS     r0,r1,r0
        0x000001de:    2100        .!      MOVS     r1,#0
        0x000001e0:    4622        "F      MOV      r2,r4
        0x000001e2:    f000f899    ....    BL       __aeabi_llsl ; 0x318
        0x000001e6:    19c7        ..      ADDS     r7,r0,r7
        0x000001e8:    4171        qA      ADCS     r1,r1,r6
        0x000001ea:    3410        .4      ADDS     r4,r4,#0x10
        0x000001ec:    460e        .F      MOV      r6,r1
        0x000001ee:    2c40        @,      CMP      r4,#0x40
        0x000001f0:    dbec        ..      BLT      0x1cc ; __aeabi_lmul + 48
        0x000001f2:    4638        8F      MOV      r0,r7
        0x000001f4:    9a02        ..      LDR      r2,[sp,#8]
        0x000001f6:    f000f88f    ....    BL       __aeabi_llsl ; 0x318
        0x000001fa:    9a00        ..      LDR      r2,[sp,#0]
        0x000001fc:    9b01        ..      LDR      r3,[sp,#4]
        0x000001fe:    1880        ..      ADDS     r0,r0,r2
        0x00000200:    9000        ..      STR      r0,[sp,#0]
        0x00000202:    4159        YA      ADCS     r1,r1,r3
        0x00000204:    9802        ..      LDR      r0,[sp,#8]
        0x00000206:    9101        ..      STR      r1,[sp,#4]
        0x00000208:    3010        .0      ADDS     r0,r0,#0x10
        0x0000020a:    9002        ..      STR      r0,[sp,#8]
        0x0000020c:    2840        @(      CMP      r0,#0x40
        0x0000020e:    dbcc        ..      BLT      0x1aa ; __aeabi_lmul + 14
        0x00000210:    9800        ..      LDR      r0,[sp,#0]
        0x00000212:    b00b        ..      ADD      sp,sp,#0x2c
        0x00000214:    bdf0        ..      POP      {r4-r7,pc}
    .text
    __aeabi_memcpy
    __aeabi_memcpy4
    __aeabi_memcpy8
        0x00000216:    4603        .F      MOV      r3,r0
        0x00000218:    430b        .C      ORRS     r3,r3,r1
        0x0000021a:    079b        ..      LSLS     r3,r3,#30
        0x0000021c:    d003        ..      BEQ      0x226 ; __aeabi_memcpy + 16
        0x0000021e:    e009        ..      B        0x234 ; __aeabi_memcpy + 30
        0x00000220:    c908        ..      LDM      r1!,{r3}
        0x00000222:    1f12        ..      SUBS     r2,r2,#4
        0x00000224:    c008        ..      STM      r0!,{r3}
        0x00000226:    2a04        .*      CMP      r2,#4
        0x00000228:    d2fa        ..      BCS      0x220 ; __aeabi_memcpy + 10
        0x0000022a:    e003        ..      B        0x234 ; __aeabi_memcpy + 30
        0x0000022c:    780b        .x      LDRB     r3,[r1,#0]
        0x0000022e:    7003        .p      STRB     r3,[r0,#0]
        0x00000230:    1c40        @.      ADDS     r0,r0,#1
        0x00000232:    1c49        I.      ADDS     r1,r1,#1
        0x00000234:    1e52        R.      SUBS     r2,r2,#1
        0x00000236:    d2f9        ..      BCS      0x22c ; __aeabi_memcpy + 22
        0x00000238:    4770        pG      BX       lr
    .text
    __aeabi_fadd
        0x0000023a:    b5f8        ..      PUSH     {r3-r7,lr}
        0x0000023c:    4602        .F      MOV      r2,r0
        0x0000023e:    404a        J@      EORS     r2,r2,r1
        0x00000240:    0fd4        ..      LSRS     r4,r2,#31
        0x00000242:    0042        B.      LSLS     r2,r0,#1
        0x00000244:    004b        K.      LSLS     r3,r1,#1
        0x00000246:    0852        R.      LSRS     r2,r2,#1
        0x00000248:    085b        [.      LSRS     r3,r3,#1
        0x0000024a:    429a        .B      CMP      r2,r3
        0x0000024c:    d202        ..      BCS      0x254 ; __aeabi_fadd + 26
        0x0000024e:    4602        .F      MOV      r2,r0
        0x00000250:    4608        .F      MOV      r0,r1
        0x00000252:    4611        .F      MOV      r1,r2
        0x00000254:    004a        J.      LSLS     r2,r1,#1
        0x00000256:    d023        #.      BEQ      0x2a0 ; __aeabi_fadd + 102
        0x00000258:    0dc3        ..      LSRS     r3,r0,#23
        0x0000025a:    004a        J.      LSLS     r2,r1,#1
        0x0000025c:    b2dd        ..      UXTB     r5,r3
        0x0000025e:    0e12        ..      LSRS     r2,r2,#24
        0x00000260:    1aad        ..      SUBS     r5,r5,r2
        0x00000262:    2d20         -      CMP      r5,#0x20
        0x00000264:    da35        5.      BGE      0x2d2 ; __aeabi_fadd + 152
        0x00000266:    0249        I.      LSLS     r1,r1,#9
        0x00000268:    2601        .&      MOVS     r6,#1
        0x0000026a:    0a49        I.      LSRS     r1,r1,#9
        0x0000026c:    05f6        ..      LSLS     r6,r6,#23
        0x0000026e:    198a        ..      ADDS     r2,r1,r6
        0x00000270:    2c00        .,      CMP      r4,#0
        0x00000272:    d000        ..      BEQ      0x276 ; __aeabi_fadd + 60
        0x00000274:    4252        RB      RSBS     r2,r2,#0
        0x00000276:    2120         !      MOVS     r1,#0x20
        0x00000278:    1b4f        O.      SUBS     r7,r1,r5
        0x0000027a:    4611        .F      MOV      r1,r2
        0x0000027c:    40b9        .@      LSLS     r1,r1,r7
        0x0000027e:    412a        *A      ASRS     r2,r2,r5
        0x00000280:    1810        ..      ADDS     r0,r2,r0
        0x00000282:    0dc2        ..      LSRS     r2,r0,#23
        0x00000284:    429a        .B      CMP      r2,r3
        0x00000286:    d021        !.      BEQ      0x2cc ; __aeabi_fadd + 146
        0x00000288:    2c00        .,      CMP      r4,#0
        0x0000028a:    d017        ..      BEQ      0x2bc ; __aeabi_fadd + 130
        0x0000028c:    2d01        .-      CMP      r5,#1
        0x0000028e:    dc08        ..      BGT      0x2a2 ; __aeabi_fadd + 104
        0x00000290:    05da        ..      LSLS     r2,r3,#23
        0x00000292:    1a80        ..      SUBS     r0,r0,r2
        0x00000294:    0fd2        ..      LSRS     r2,r2,#31
        0x00000296:    1980        ..      ADDS     r0,r0,r6
        0x00000298:    07d2        ..      LSLS     r2,r2,#31
        0x0000029a:    b2db        ..      UXTB     r3,r3
        0x0000029c:    f000f865    ..e.    BL       _float_epilogue ; 0x36a
        0x000002a0:    bdf8        ..      POP      {r3-r7,pc}
        0x000002a2:    05da        ..      LSLS     r2,r3,#23
        0x000002a4:    1a80        ..      SUBS     r0,r0,r2
        0x000002a6:    2301        .#      MOVS     r3,#1
        0x000002a8:    0040        @.      LSLS     r0,r0,#1
        0x000002aa:    061b        ..      LSLS     r3,r3,#24
        0x000002ac:    18c0        ..      ADDS     r0,r0,r3
        0x000002ae:    1880        ..      ADDS     r0,r0,r2
        0x000002b0:    425a        ZB      RSBS     r2,r3,#0
        0x000002b2:    1880        ..      ADDS     r0,r0,r2
        0x000002b4:    0fca        ..      LSRS     r2,r1,#31
        0x000002b6:    4310        .C      ORRS     r0,r0,r2
        0x000002b8:    0049        I.      LSLS     r1,r1,#1
        0x000002ba:    e007        ..      B        0x2cc ; __aeabi_fadd + 146
        0x000002bc:    0849        I.      LSRS     r1,r1,#1
        0x000002be:    07c2        ..      LSLS     r2,r0,#31
        0x000002c0:    4311        .C      ORRS     r1,r1,r2
        0x000002c2:    05da        ..      LSLS     r2,r3,#23
        0x000002c4:    1a80        ..      SUBS     r0,r0,r2
        0x000002c6:    1980        ..      ADDS     r0,r0,r6
        0x000002c8:    0840        @.      LSRS     r0,r0,#1
        0x000002ca:    1880        ..      ADDS     r0,r0,r2
        0x000002cc:    f000f845    ..E.    BL       __I$use$fp ; 0x35a
        0x000002d0:    bdf8        ..      POP      {r3-r7,pc}
        0x000002d2:    0061        a.      LSLS     r1,r4,#1
        0x000002d4:    2201        ."      MOVS     r2,#1
        0x000002d6:    1a51        Q.      SUBS     r1,r2,r1
        0x000002d8:    1b00        ..      SUBS     r0,r0,r4
        0x000002da:    e7f7        ..      B        0x2cc ; __aeabi_fadd + 146
    __aeabi_fsub
        0x000002dc:    2201        ."      MOVS     r2,#1
        0x000002de:    07d2        ..      LSLS     r2,r2,#31
        0x000002e0:    4051        Q@      EORS     r1,r1,r2
        0x000002e2:    e7aa        ..      B        __aeabi_fadd ; 0x23a
    __aeabi_frsub
        0x000002e4:    2201        ."      MOVS     r2,#1
        0x000002e6:    07d2        ..      LSLS     r2,r2,#31
        0x000002e8:    4050        P@      EORS     r0,r0,r2
        0x000002ea:    e7a6        ..      B        __aeabi_fadd ; 0x23a
    .text
    __aeabi_i2f
        0x000002ec:    17c2        ..      ASRS     r2,r0,#31
        0x000002ee:    0fc1        ..      LSRS     r1,r0,#31
        0x000002f0:    4050        P@      EORS     r0,r0,r2
        0x000002f2:    b510        ..      PUSH     {r4,lr}
        0x000002f4:    1840        @.      ADDS     r0,r0,r1
        0x000002f6:    07ca        ..      LSLS     r2,r1,#31
        0x000002f8:    2396        .#      MOVS     r3,#0x96
        0x000002fa:    2100        .!      MOVS     r1,#0
        0x000002fc:    f000f835    ..5.    BL       _float_epilogue ; 0x36a
        0x00000300:    bd10        ..      POP      {r4,pc}
        0x00000302:    0000        ..      MOVS     r0,r0
    .text
    __aeabi_cfrcmple
        0x00000304:    2201        ."      MOVS     r2,#1
        0x00000306:    07d2        ..      LSLS     r2,r2,#31
        0x00000308:    2800        .(      CMP      r0,#0
        0x0000030a:    db00        ..      BLT      0x30e ; __aeabi_cfrcmple + 10
        0x0000030c:    1a10        ..      SUBS     r0,r2,r0
        0x0000030e:    2900        .)      CMP      r1,#0
        0x00000310:    db00        ..      BLT      0x314 ; __aeabi_cfrcmple + 16
        0x00000312:    1a51        Q.      SUBS     r1,r2,r1
        0x00000314:    4288        .B      CMP      r0,r1
        0x00000316:    4770        pG      BX       lr
    .text
    __aeabi_llsl
    _ll_shift_l
        0x00000318:    b510        ..      PUSH     {r4,lr}
        0x0000031a:    2a20         *      CMP      r2,#0x20
        0x0000031c:    db04        ..      BLT      0x328 ; __aeabi_llsl + 16
        0x0000031e:    4601        .F      MOV      r1,r0
        0x00000320:    3a20         :      SUBS     r2,r2,#0x20
        0x00000322:    4091        .@      LSLS     r1,r1,r2
        0x00000324:    2000        .       MOVS     r0,#0
        0x00000326:    bd10        ..      POP      {r4,pc}
        0x00000328:    4091        .@      LSLS     r1,r1,r2
        0x0000032a:    2320         #      MOVS     r3,#0x20
        0x0000032c:    1a9c        ..      SUBS     r4,r3,r2
        0x0000032e:    4603        .F      MOV      r3,r0
        0x00000330:    40e3        .@      LSRS     r3,r3,r4
        0x00000332:    4319        .C      ORRS     r1,r1,r3
        0x00000334:    4090        .@      LSLS     r0,r0,r2
        0x00000336:    bd10        ..      POP      {r4,pc}
    .text
    __aeabi_llsr
    _ll_ushift_r
        0x00000338:    b510        ..      PUSH     {r4,lr}
        0x0000033a:    2a20         *      CMP      r2,#0x20
        0x0000033c:    db04        ..      BLT      0x348 ; __aeabi_llsr + 16
        0x0000033e:    4608        .F      MOV      r0,r1
        0x00000340:    3a20         :      SUBS     r2,r2,#0x20
        0x00000342:    40d0        .@      LSRS     r0,r0,r2
        0x00000344:    2100        .!      MOVS     r1,#0
        0x00000346:    bd10        ..      POP      {r4,pc}
        0x00000348:    460b        .F      MOV      r3,r1
        0x0000034a:    40d3        .@      LSRS     r3,r3,r2
        0x0000034c:    40d0        .@      LSRS     r0,r0,r2
        0x0000034e:    2420         $      MOVS     r4,#0x20
        0x00000350:    1aa2        ..      SUBS     r2,r4,r2
        0x00000352:    4091        .@      LSLS     r1,r1,r2
        0x00000354:    4308        .C      ORRS     r0,r0,r1
        0x00000356:    4619        .F      MOV      r1,r3
        0x00000358:    bd10        ..      POP      {r4,pc}
    .text
    .text
    __I$use$fp
    _float_round
        0x0000035a:    2900        .)      CMP      r1,#0
        0x0000035c:    da04        ..      BGE      0x368 ; __I$use$fp + 14
        0x0000035e:    1c40        @.      ADDS     r0,r0,#1
        0x00000360:    0049        I.      LSLS     r1,r1,#1
        0x00000362:    d101        ..      BNE      0x368 ; __I$use$fp + 14
        0x00000364:    0840        @.      LSRS     r0,r0,#1
        0x00000366:    0040        @.      LSLS     r0,r0,#1
        0x00000368:    4770        pG      BX       lr
    _float_epilogue
        0x0000036a:    b470        p.      PUSH     {r4-r6}
        0x0000036c:    2400        .$      MOVS     r4,#0
        0x0000036e:    0c05        ..      LSRS     r5,r0,#16
        0x00000370:    d105        ..      BNE      0x37e ; _float_epilogue + 20
        0x00000372:    2410        .$      MOVS     r4,#0x10
        0x00000374:    0400        ..      LSLS     r0,r0,#16
        0x00000376:    d102        ..      BNE      0x37e ; _float_epilogue + 20
        0x00000378:    2900        .)      CMP      r1,#0
        0x0000037a:    d021        !.      BEQ      0x3c0 ; _float_epilogue + 86
        0x0000037c:    2411        .$      MOVS     r4,#0x11
        0x0000037e:    0e05        ..      LSRS     r5,r0,#24
        0x00000380:    d101        ..      BNE      0x386 ; _float_epilogue + 28
        0x00000382:    0200        ..      LSLS     r0,r0,#8
        0x00000384:    3408        .4      ADDS     r4,r4,#8
        0x00000386:    0f05        ..      LSRS     r5,r0,#28
        0x00000388:    d101        ..      BNE      0x38e ; _float_epilogue + 36
        0x0000038a:    0100        ..      LSLS     r0,r0,#4
        0x0000038c:    1d24        $.      ADDS     r4,r4,#4
        0x0000038e:    0f85        ..      LSRS     r5,r0,#30
        0x00000390:    d101        ..      BNE      0x396 ; _float_epilogue + 44
        0x00000392:    0080        ..      LSLS     r0,r0,#2
        0x00000394:    1ca4        ..      ADDS     r4,r4,#2
        0x00000396:    2800        .(      CMP      r0,#0
        0x00000398:    db01        ..      BLT      0x39e ; _float_epilogue + 52
        0x0000039a:    0040        @.      LSLS     r0,r0,#1
        0x0000039c:    1c64        d.      ADDS     r4,r4,#1
        0x0000039e:    2900        .)      CMP      r1,#0
        0x000003a0:    d008        ..      BEQ      0x3b4 ; _float_epilogue + 74
        0x000003a2:    2520         %      MOVS     r5,#0x20
        0x000003a4:    1b2e        ..      SUBS     r6,r5,r4
        0x000003a6:    460d        .F      MOV      r5,r1
        0x000003a8:    40f5        .@      LSRS     r5,r5,r6
        0x000003aa:    40a1        .@      LSLS     r1,r1,r4
        0x000003ac:    d000        ..      BEQ      0x3b0 ; _float_epilogue + 70
        0x000003ae:    2101        .!      MOVS     r1,#1
        0x000003b0:    4329        )C      ORRS     r1,r1,r5
        0x000003b2:    4308        .C      ORRS     r0,r0,r1
        0x000003b4:    0601        ..      LSLS     r1,r0,#24
        0x000003b6:    1b1b        ..      SUBS     r3,r3,r4
        0x000003b8:    0a00        ..      LSRS     r0,r0,#8
        0x000003ba:    1ddb        ..      ADDS     r3,r3,#7
        0x000003bc:    d502        ..      BPL      0x3c4 ; _float_epilogue + 90
        0x000003be:    2000        .       MOVS     r0,#0
        0x000003c0:    bc70        p.      POP      {r4-r6}
        0x000003c2:    4770        pG      BX       lr
        0x000003c4:    05db        ..      LSLS     r3,r3,#23
        0x000003c6:    1818        ..      ADDS     r0,r3,r0
        0x000003c8:    1880        ..      ADDS     r0,r0,r2
        0x000003ca:    2900        .)      CMP      r1,#0
        0x000003cc:    daf8        ..      BGE      0x3c0 ; _float_epilogue + 86
        0x000003ce:    1c40        @.      ADDS     r0,r0,#1
        0x000003d0:    0049        I.      LSLS     r1,r1,#1
        0x000003d2:    d1f5        ..      BNE      0x3c0 ; _float_epilogue + 86
        0x000003d4:    bc70        p.      POP      {r4-r6}
        0x000003d6:    0840        @.      LSRS     r0,r0,#1
        0x000003d8:    0040        @.      LSLS     r0,r0,#1
        0x000003da:    4770        pG      BX       lr
    .text
    __scatterload
    __scatterload_rt2
        0x000003dc:    4c06        .L      LDR      r4,[pc,#24] ; [0x3f8] = 0x4b08
        0x000003de:    2501        .%      MOVS     r5,#1
        0x000003e0:    4e06        .N      LDR      r6,[pc,#24] ; [0x3fc] = 0x4b28
        0x000003e2:    e005        ..      B        0x3f0 ; __scatterload + 20
        0x000003e4:    68e3        .h      LDR      r3,[r4,#0xc]
        0x000003e6:    cc07        ..      LDM      r4!,{r0-r2}
        0x000003e8:    432b        +C      ORRS     r3,r3,r5
        0x000003ea:    3c0c        .<      SUBS     r4,r4,#0xc
        0x000003ec:    4798        .G      BLX      r3
        0x000003ee:    3410        .4      ADDS     r4,r4,#0x10
        0x000003f0:    42b4        .B      CMP      r4,r6
        0x000003f2:    d3f7        ..      BCC      0x3e4 ; __scatterload + 8
        0x000003f4:    f7fffe68    ..h.    BL       __main_after_scatterload ; 0xc8
    $d
        0x000003f8:    00004b08    .K..    DCD    19208
        0x000003fc:    00004b28    (K..    DCD    19240
    $t
    i.BSP_4LineSPIInit
    BSP_4LineSPIInit
;;; ..\..\..\..\pan108\bsp.c
;;;205    {
        0x00000400:    b510        ..      PUSH     {r4,lr}
;;;206        CLK_AHBPeriphClockCmd(CLK_AHBPeriph_GPIO, ENABLE);
        0x00000402:    2101        .!      MOVS     r1,#1
        0x00000404:    2002        .       MOVS     r0,#2
        0x00000406:    f000f95b    ..[.    BL       CLK_AHBPeriphClockCmd ; 0x6c0
;;;207    
;;;208        SYS_ConfigMFP(P4_0, SYS_MFP_GPIO); // sck
        0x0000040a:    2100        .!      MOVS     r1,#0
        0x0000040c:    2040        @       MOVS     r0,#0x40
        0x0000040e:    f001fbc7    ....    BL       SYS_ConfigMFP ; 0x1ba0
;;;209        SYS_ConfigMFP(P4_1, SYS_MFP_GPIO); // csn
        0x00000412:    2100        .!      MOVS     r1,#0
        0x00000414:    2041        A       MOVS     r0,#0x41
        0x00000416:    f001fbc3    ....    BL       SYS_ConfigMFP ; 0x1ba0
;;;210        SYS_ConfigMFP(P4_2, SYS_MFP_GPIO); // miso
        0x0000041a:    2100        .!      MOVS     r1,#0
        0x0000041c:    2042        B       MOVS     r0,#0x42
        0x0000041e:    f001fbbf    ....    BL       SYS_ConfigMFP ; 0x1ba0
;;;211        SYS_ConfigMFP(P4_3, SYS_MFP_GPIO); // mosi
        0x00000422:    2100        .!      MOVS     r1,#0
        0x00000424:    2043        C       MOVS     r0,#0x43
        0x00000426:    f001fbbb    ....    BL       SYS_ConfigMFP ; 0x1ba0
;;;212        SYS_ConfigMFP(P4_5, SYS_MFP_GPIO); // irq
        0x0000042a:    2100        .!      MOVS     r1,#0
        0x0000042c:    2045        E       MOVS     r0,#0x45
        0x0000042e:    f001fbb7    ....    BL       SYS_ConfigMFP ; 0x1ba0
;;;213    
;;;214        GPIO_SetModeByPin(P4_1, GPIO_MODE_OUTPUT); // cs
        0x00000432:    2101        .!      MOVS     r1,#1
        0x00000434:    2041        A       MOVS     r0,#0x41
        0x00000436:    f000fb57    ..W.    BL       GPIO_SetModeByPin ; 0xae8
;;;215        GPIO_SetModeByPin(P4_0, GPIO_MODE_OUTPUT); // sck
        0x0000043a:    2101        .!      MOVS     r1,#1
        0x0000043c:    2040        @       MOVS     r0,#0x40
        0x0000043e:    f000fb53    ..S.    BL       GPIO_SetModeByPin ; 0xae8
;;;216        GPIO_SetModeByPin(P4_3, GPIO_MODE_OUTPUT); // mosi
        0x00000442:    2101        .!      MOVS     r1,#1
        0x00000444:    2043        C       MOVS     r0,#0x43
        0x00000446:    f000fb4f    ..O.    BL       GPIO_SetModeByPin ; 0xae8
;;;217        GPIO_SetModeByPin(P4_2, GPIO_MODE_INPUT);  // miso
        0x0000044a:    2100        .!      MOVS     r1,#0
        0x0000044c:    2042        B       MOVS     r0,#0x42
        0x0000044e:    f000fb4b    ..K.    BL       GPIO_SetModeByPin ; 0xae8
;;;218        GPIO_SetModeByPin(P4_5, GPIO_MODE_INPUT);  // irq
        0x00000452:    2100        .!      MOVS     r1,#0
        0x00000454:    2045        E       MOVS     r0,#0x45
        0x00000456:    f000fb47    ..G.    BL       GPIO_SetModeByPin ; 0xae8
;;;219    
;;;220        P41 = 1; // cs = 1;
        0x0000045a:    2101        .!      MOVS     r1,#1
        0x0000045c:    4802        .H      LDR      r0,[pc,#8] ; [0x468] = 0x40020280
        0x0000045e:    6041        A`      STR      r1,[r0,#4]
;;;221        P40 = 0; // sck = 0;
        0x00000460:    2100        .!      MOVS     r1,#0
        0x00000462:    6001        .`      STR      r1,[r0,#0]
;;;222        P43 = 0; // mosi = 0;
        0x00000464:    60c1        .`      STR      r1,[r0,#0xc]
;;;223    }
        0x00000466:    bd10        ..      POP      {r4,pc}
    $d
        0x00000468:    40020280    ...@    DCD    1073873536
    $t
    i.BSP_ClockInit
    BSP_ClockInit
;;; ..\..\..\..\pan108\bsp.c (8)
        0x0000046c:    b510        ..      PUSH     {r4,lr}
;;;9          CLK_RefClkSrcConfig(CLK_SYS_SRCSEL_XTH);
        0x0000046e:    20ff        .       MOVS     r0,#0xff
        0x00000470:    3001        .0      ADDS     r0,#1
        0x00000472:    f000f9a3    ....    BL       CLK_RefClkSrcConfig ; 0x7bc
;;; ..\..\..\..\pan108\device\Include\pan_clk.h
;;;219        CLK->CLK_TOP_CTRL = (CLK->CLK_TOP_CTRL & (~CLK_TOPCTL_APB1_DIV_Msk))| (u32ClkDiv << CLK_TOPCTL_APB1_DIV_Pos);
        0x00000476:    4812        .H      LDR      r0,[pc,#72] ; [0x4c0] = 0x40040000
        0x00000478:    6a01        .j      LDR      r1,[r0,#0x20]
        0x0000047a:    220f        ."      MOVS     r2,#0xf
        0x0000047c:    0412        ..      LSLS     r2,r2,#16
        0x0000047e:    4391        .C      BICS     r1,r1,r2
        0x00000480:    2201        ."      MOVS     r2,#1
        0x00000482:    0412        ..      LSLS     r2,r2,#16
        0x00000484:    4311        .C      ORRS     r1,r1,r2
        0x00000486:    6201        .b      STR      r1,[r0,#0x20]
;;;220    }
;;;221    
;;;222    /**
;;;223      * @brief  Configures the High Speed APB clock (PCLK2).
;;;224      * @param  u32ClkDiv: defines the APB2 clock divisor. This clock is derived from 
;;;225      *         the AHB clock (HCLK).
;;;226      * 		This parameter can be 0~15,PCLK2 = hclk / (u32ClkDiv * 2):
;;;227      * @return None
;;;228      */
;;;229    __STATIC_INLINE void CLK_PCLK2Config(uint32_t u32ClkDiv)
;;;230    {
;;;231        CLK->CLK_TOP_CTRL = (CLK->CLK_TOP_CTRL & (~CLK_TOPCTL_APB2_DIV_Msk))| (u32ClkDiv << CLK_TOPCTL_APB2_DIV_Pos);
        0x00000488:    6a01        .j      LDR      r1,[r0,#0x20]
        0x0000048a:    220f        ."      MOVS     r2,#0xf
        0x0000048c:    0512        ..      LSLS     r2,r2,#20
        0x0000048e:    4391        .C      BICS     r1,r1,r2
        0x00000490:    0082        ..      LSLS     r2,r0,#2
        0x00000492:    4311        .C      ORRS     r1,r1,r2
        0x00000494:    6201        .b      STR      r1,[r0,#0x20]
;;; ..\..\..\..\pan108\bsp.c
;;;13         CLK_SYSCLKConfig(CLK_DPLL_REF_CLKSEL_XTH, CLK_DPLL_OUT_64M);
        0x00000496:    2101        .!      MOVS     r1,#1
        0x00000498:    2002        .       MOVS     r0,#2
        0x0000049a:    f000f9c7    ....    BL       CLK_SYSCLKConfig ; 0x82c
;;;14         CLK_RefClkSrcConfig(CLK_SYS_SRCSEL_DPLL);
        0x0000049e:    2001        .       MOVS     r0,#1
        0x000004a0:    0240        @.      LSLS     r0,r0,#9
        0x000004a2:    f000f98b    ....    BL       CLK_RefClkSrcConfig ; 0x7bc
;;;15     
;;;16         //APB Enable
;;;17         CLK_AHBPeriphClockCmd(CLK_AHBPeriph_All, ENABLE);
        0x000004a6:    2101        .!      MOVS     r1,#1
        0x000004a8:    4806        .H      LDR      r0,[pc,#24] ; [0x4c4] = 0x7cff
        0x000004aa:    f000f909    ....    BL       CLK_AHBPeriphClockCmd ; 0x6c0
;;;18         CLK_APB1PeriphClockCmd(CLK_APB1Periph_All, ENABLE);
        0x000004ae:    2101        .!      MOVS     r1,#1
        0x000004b0:    4805        .H      LDR      r0,[pc,#20] ; [0x4c8] = 0xfff01ffb
        0x000004b2:    f000f911    ....    BL       CLK_APB1PeriphClockCmd ; 0x6d8
;;;19         CLK_APB2PeriphClockCmd(CLK_APB2Periph_All, ENABLE);
        0x000004b6:    2101        .!      MOVS     r1,#1
        0x000004b8:    4804        .H      LDR      r0,[pc,#16] ; [0x4cc] = 0x40103a
        0x000004ba:    f000f919    ....    BL       CLK_APB2PeriphClockCmd ; 0x6f0
;;;20     }
        0x000004be:    bd10        ..      POP      {r4,pc}
    $d
        0x000004c0:    40040000    ...@    DCD    1074003968
        0x000004c4:    00007cff    .|..    DCD    31999
        0x000004c8:    fff01ffb    ....    DCD    4293926907
        0x000004cc:    0040103a    :.@.    DCD    4198458
    $t
    i.BSP_DelayMs
    BSP_DelayMs
;;;21     
;;;22     void BSP_GpioInit(void)
;;;23     {
;;;24         SYS_ConfigMFP(P1_0, SYS_MFP_GPIO); // LED2
;;;25         SYS_ConfigMFP(P1_1, SYS_MFP_GPIO); // LED3
;;;26     
;;;27         GPIO_SetModeByPin(P1_0, GPIO_MODE_OUTPUT); // LED2
;;;28         GPIO_SetModeByPin(P1_1, GPIO_MODE_OUTPUT); // LED3
;;;29         
;;;30         P10 = 0;  // 0:off; 1:on
;;;31         P11 = 0;  // 0:off; 1:on
;;;32     		 
;;;33     }
;;;34     
;;;35     void BSP_TriggerGpioInit(void)
;;;36     {
;;;37         SYS_ConfigMFP(P3_0, SYS_MFP_GPIO);
;;;38         GPIO_SetModeByPin(P3_0, GPIO_MODE_OUTPUT);
;;;39     }
;;;40     
;;;41     void BSP_UartInit(void)
;;;42     {
;;;43         /* Unlock protected registers */
;;;44         SYS_UnlockReg();
;;;45     
;;;46         GPIO_EnableDigitalPath(P1, BIT5);
;;;47         SYS_SET_MFP(P1, 4, UART1_TX);
;;;48         SYS_SET_MFP(P1, 5, UART1_RX);
;;;49     
;;;50         /* Relock protected registers */
;;;51         SYS_LockReg();
;;;52         
;;;53         UART_InitTypeDef Init_Struct;
;;;54     
;;;55         Init_Struct.UART_BaudRate = 1000000;
;;;56         Init_Struct.UART_LineCtrl = Uart_Line_8n1;
;;;57     
;;;58         /* Init UART0 for printf */
;;;59         UART_Init(UART1, &Init_Struct);
;;;60         UART_EnableFifo(UART1);
;;;61     }
;;;62     
;;;63     void BSP_Timer0Init(void)
;;;64     {
;;;65         // Select Timer clock source
;;;66         CLK_SetTmrClkSrc(TIMER0, CLK_APB1_TMR0SEL_APB1CLK);
;;;67     
;;;68         // Set Timer work mode and expected clock frequency
;;;69         TIMER_Open(TIMER0, TIMER_PERIODIC_MODE, 16000000);
;;;70     
;;;71         // Set compare value (to 16M)
;;;72         // expect_timeout = tmrCmpValue / tmrExpCntFreq = 16M / 16MHz = 1s
;;;73         // real_timeout = tmrCmpValue / tmrRealCntFreq = 16M / tmrRealCntFreq
;;;74         TIMER_SetCmpValue(TIMER0, 16000);
;;;75     
;;;76         // Enable interrupt
;;;77         TIMER_EnableInt(TIMER0);
;;;78         NVIC_EnableIRQ(TMR0_IRQn);
;;;79     
;;;80         // Start Timer counting
;;;81         TIMER_Start(TIMER0);
;;;82     }
;;;83     
;;;84     void TMR0_IRQHandler(void)
;;;85     {
;;;86         if (TIMER_GetIntFlag(TIMER0))
;;;87         {
;;;88             // Clear Timer interrupt flag
;;;89             TIMER_ClearIntFlag(TIMER0);
;;;90             g_SystemTick++;
;;;91             
;;;92     //        if(g_SystemTick >= 1000)
;;;93     //        {
;;;94     //            g_SystemTick = 0;
;;;95     //            SYS_TEST("1 second.\n");
;;;96     //        }
;;;97         }
;;;98     }
;;;99     
;;;100    void BSP_KeyInit(void)
;;;101    {
;;;102    	GPIO_EnablePullupPath(P0, BIT1);
;;;103    	GPIO_EnablePullupPath(P1, BIT6);
;;;104    	GPIO_EnablePullupPath(P1, BIT7);
;;;105        GPIO_EnablePullupPath(P3, BIT1);
;;;106    	GPIO_EnablePullupPath(P3, BIT0);
;;;107    
;;;108        SYS_ConfigMFP(P0_1, SYS_MFP_GPIO);
;;;109        SYS_ConfigMFP(P1_6, SYS_MFP_GPIO);
;;;110        SYS_ConfigMFP(P1_7, SYS_MFP_GPIO);
;;;111        SYS_ConfigMFP(P3_1, SYS_MFP_GPIO);
;;;112        SYS_ConfigMFP(P3_0, SYS_MFP_GPIO);
;;;113    
;;;114        GPIO_SetModeByPin(P0_1, GPIO_MODE_QUASI);
;;;115        GPIO_SetModeByPin(P1_6, GPIO_MODE_QUASI);
;;;116        GPIO_SetModeByPin(P1_7, GPIO_MODE_QUASI);
;;;117        GPIO_SetModeByPin(P3_1, GPIO_MODE_QUASI);
;;;118        GPIO_SetModeByPin(P3_0, GPIO_MODE_INPUT);
;;;119    
;;;120    }
;;;121    
;;;122    void BSP_OLEDInit(void)
;;;123    {
;;;124        SYS_ConfigMFP(P2_2, SYS_MFP_GPIO); // OLED_DC
;;;125        SYS_ConfigMFP(P2_0, SYS_MFP_GPIO); // OLED_CS
;;;126        SYS_ConfigMFP(P2_6, SYS_MFP_GPIO); // OLED_RST
;;;127        SYS_ConfigMFP(P2_1, SYS_MFP_GPIO); // OLED_SCLK
;;;128        SYS_ConfigMFP(P2_3, SYS_MFP_GPIO); // OLED_SDIN
;;;129    
;;;130        GPIO_SetModeByPin(P2_2, GPIO_MODE_OUTPUT); // OLED_DC
;;;131        GPIO_SetModeByPin(P2_0, GPIO_MODE_OUTPUT); // OLED_CS
;;;132        GPIO_SetModeByPin(P2_6, GPIO_MODE_OUTPUT); // OLED_RST
;;;133        GPIO_SetModeByPin(P2_1, GPIO_MODE_OUTPUT); // OLED_SCLK
;;;134        GPIO_SetModeByPin(P2_3, GPIO_MODE_OUTPUT); // OLED_SDIN
;;;135    
;;;136        P22 = 0; // OLED_DC
;;;137        P20 = 0; // OLED_CS
;;;138        P26 = 0; // OLED_RST
;;;139        P21 = 0; // OLED_SCLK
;;;140        P23 = 0; // OLED_SDIN
;;;141    }
;;;142    
;;;143    void BSP_Led2Toggle(void)
;;;144    {
;;;145        static bool FlagStatus = 0;
;;;146    
;;;147        FlagStatus = !FlagStatus;
;;;148        LED2_PIN = FlagStatus;
;;;149    }
;;;150    
;;;151    void BSP_Led3Toggle(void)
;;;152    {
;;;153        static bool FlagStatus = 0;
;;;154    
;;;155        FlagStatus = !FlagStatus;
;;;156        LED3_PIN = FlagStatus;
;;;157    }
;;;158    
;;;159    void BSP_IICInit(void)
;;;160    {
;;;161        CLK_AHBPeriphClockCmd(CLK_AHBPeriph_GPIO, ENABLE);
;;;162    
;;;163        SYS_ConfigMFP(P4_1, SYS_MFP_GPIO); // cs
;;;164        SYS_ConfigMFP(P4_0, SYS_MFP_GPIO); // scl/sck
;;;165        SYS_ConfigMFP(P4_3, SYS_MFP_GPIO); // sda/mosi
;;;166        SYS_ConfigMFP(P4_2, SYS_MFP_GPIO); // miso
;;;167        SYS_ConfigMFP(P4_5, SYS_MFP_GPIO); // IRQ pin
;;;168    
;;;169        GPIO_SetModeByPin(P4_1, GPIO_MODE_OUTPUT); // cs
;;;170        GPIO_SetModeByPin(P4_0, GPIO_MODE_OUTPUT); // scl/sck
;;;171        GPIO_SetModeByPin(P4_3, GPIO_MODE_OUTPUT); // sda/mosi
;;;172        GPIO_SetModeByPin(P4_2, GPIO_MODE_INPUT);  // miso
;;;173        GPIO_SetModeByPin(P4_5, GPIO_MODE_INPUT);  // irq
;;;174                                                   // GPIO_EnablePullupPath(P4, BIT5);
;;;175    
;;;176        P41 = 1; // cs = 1;
;;;177        P40 = 1; // scl = 1;
;;;178        P43 = 1; // sda = 1;
;;;179    }
;;;180    
;;;181    void BSP_3LineSPIInit(void)
;;;182    {
;;;183        CLK_AHBPeriphClockCmd(CLK_AHBPeriph_GPIO, ENABLE);
;;;184    
;;;185        SYS_ConfigMFP(P4_0, SYS_MFP_GPIO); // sck
;;;186        SYS_ConfigMFP(P4_1, SYS_MFP_GPIO); // csn
;;;187        SYS_ConfigMFP(P4_2, SYS_MFP_GPIO); // miso
;;;188        SYS_ConfigMFP(P4_3, SYS_MFP_GPIO); // mosi
;;;189        SYS_ConfigMFP(P4_5, SYS_MFP_GPIO); // irq
;;;190    
;;;191        GPIO_SetModeByPin(P4_1, GPIO_MODE_OUTPUT); // cs
;;;192        GPIO_SetModeByPin(P4_0, GPIO_MODE_OUTPUT); // sck
;;;193        GPIO_SetModeByPin(P4_3, GPIO_MODE_OUTPUT); // mosi
;;;194        GPIO_SetModeByPin(P4_2, GPIO_MODE_INPUT);  // miso
;;;195        GPIO_SetModeByPin(P4_5, GPIO_MODE_INPUT);  // irq
;;;196    
;;;197        P41 = 1; // cs = 1;
;;;198        P40 = 0; // sck = 0;
;;;199        P43 = 0; // mosi
;;;200    
;;;201        GPIO_EnablePullupPath(P4, BIT3);
;;;202    }
;;;203    
;;;204    void BSP_4LineSPIInit(void)
;;;205    {
;;;206        CLK_AHBPeriphClockCmd(CLK_AHBPeriph_GPIO, ENABLE);
;;;207    
;;;208        SYS_ConfigMFP(P4_0, SYS_MFP_GPIO); // sck
;;;209        SYS_ConfigMFP(P4_1, SYS_MFP_GPIO); // csn
;;;210        SYS_ConfigMFP(P4_2, SYS_MFP_GPIO); // miso
;;;211        SYS_ConfigMFP(P4_3, SYS_MFP_GPIO); // mosi
;;;212        SYS_ConfigMFP(P4_5, SYS_MFP_GPIO); // irq
;;;213    
;;;214        GPIO_SetModeByPin(P4_1, GPIO_MODE_OUTPUT); // cs
;;;215        GPIO_SetModeByPin(P4_0, GPIO_MODE_OUTPUT); // sck
;;;216        GPIO_SetModeByPin(P4_3, GPIO_MODE_OUTPUT); // mosi
;;;217        GPIO_SetModeByPin(P4_2, GPIO_MODE_INPUT);  // miso
;;;218        GPIO_SetModeByPin(P4_5, GPIO_MODE_INPUT);  // irq
;;;219    
;;;220        P41 = 1; // cs = 1;
;;;221        P40 = 0; // sck = 0;
;;;222        P43 = 0; // mosi = 0;
;;;223    }
;;;224    
;;;225    void SYS_ConfigMFP(uint8_t PinID, uint32_t PinFunction)
;;;226    {
;;;227        uint8_t port = PinID / 0x10;
;;;228        uint8_t bit = PinID % 0x10;
;;;229    
;;;230        (&SYS->P0_MFP)[port] = ((&SYS->P0_MFP)[port] & ~(SYS_MFP_P00_Msk << bit)) | PinFunction;
;;;231    }
;;;232    
;;;233    /* GPIO Driver Wrapper Functions */
;;;234    void GPIO_SetModeByPin(uint8_t PinID, GPIO_ModeDef Mode)
;;;235    {
;;;236        uint8_t port = PinID / 0x10;
;;;237        uint8_t bit = PinID % 0x10;
;;;238    
;;;239        GPIO_SetMode((GPIO_T*)(P0_BASE + 0x40 * port), BIT0 << bit, Mode);
;;;240    
;;;241        if (Mode == GPIO_MODE_INPUT || Mode == GPIO_MODE_QUASI)
;;;242        {
;;;243            if (PinID == P5_6 || PinID == P4_6 || PinID == P4_7)
;;;244            {
;;;245                // These Pins' DINOFF bits should be synced to 3v area
;;;246                CLK_Wait3vSyncReady();
;;;247            }
;;;248        }
;;;249    }
;;;250    
;;;251    #pragma O0 // disable optimization, otherwise the delay time will be inaccurate
;;;252    
;;;253    /**
;;;254     * @brief BSP_DelayMs
;;;255     * @param[in] <time> ms
;;;256     * @return none
;;;257     * @note user should modify this function according to the actual situation
;;;258     */
;;;259    void BSP_DelayMs(const uint32_t ms)
;;;260    {
;;;261        int i, j;
;;;262        for (i = 0; i < ms; i++)
        0x000004d0:    2100        .!      MOVS     r1,#0
;;; ..\..\..\..\pan108\bsp.c (262)
        0x000004d2:    e008        ..      B        0x4e6 ; BSP_DelayMs + 22
;;;263        {
;;;264            for (j = 0; j < 8000; j++)
        0x000004d4:    2200        ."      MOVS     r2,#0
        0x000004d6:    e001        ..      B        0x4dc ; BSP_DelayMs + 12
        0x000004d8:    bf00        ..      NOP      
        0x000004da:    1c52        R.      ADDS     r2,r2,#1
        0x000004dc:    237d        }#      MOVS     r3,#0x7d
        0x000004de:    019b        ..      LSLS     r3,r3,#6
        0x000004e0:    429a        .B      CMP      r2,r3
        0x000004e2:    dbf9        ..      BLT      0x4d8 ; BSP_DelayMs + 8
        0x000004e4:    1c49        I.      ADDS     r1,r1,#1
        0x000004e6:    4281        .B      CMP      r1,r0
        0x000004e8:    d3f4        ..      BCC      0x4d4 ; BSP_DelayMs + 4
;;;265            {
;;;266                __NOP();
;;;267            }
;;;268        }
;;;269    }
        0x000004ea:    4770        pG      BX       lr
    i.BSP_DelayUs
    BSP_DelayUs
;;;270    
;;;271    /**
;;;272     * @brief BSP_DelayUs
;;;273     * @param[in] <time> us
;;;274     * @return none
;;;275     * @note user should modify this function according to the actual situation
;;;276     */
;;;277    void BSP_DelayUs(const uint32_t us)
;;;278    {
;;;279        int i, j;
;;;280    
;;;281        for (i = 0; i < us; i++)
        0x000004ec:    2100        .!      MOVS     r1,#0
;;; ..\..\..\..\pan108\bsp.c (281)
        0x000004ee:    e006        ..      B        0x4fe ; BSP_DelayUs + 18
;;;282        {
;;;283            for (j = 0; j < 10; j++)
        0x000004f0:    2200        ."      MOVS     r2,#0
        0x000004f2:    e001        ..      B        0x4f8 ; BSP_DelayUs + 12
        0x000004f4:    bf00        ..      NOP      
        0x000004f6:    1c52        R.      ADDS     r2,r2,#1
        0x000004f8:    2a0a        .*      CMP      r2,#0xa
        0x000004fa:    dbfb        ..      BLT      0x4f4 ; BSP_DelayUs + 8
        0x000004fc:    1c49        I.      ADDS     r1,r1,#1
        0x000004fe:    4281        .B      CMP      r1,r0
        0x00000500:    d3f6        ..      BCC      0x4f0 ; BSP_DelayUs + 4
;;;284            {
;;;285                __NOP();
;;;286            }
;;;287        }
;;;288    }
        0x00000502:    4770        pG      BX       lr
    i.BSP_GpioInit
    BSP_GpioInit
        0x00000504:    b510        ..      PUSH     {r4,lr}
;;; ..\..\..\..\pan108\bsp.c (24)
        0x00000506:    2100        .!      MOVS     r1,#0
        0x00000508:    2010        .       MOVS     r0,#0x10
        0x0000050a:    f001fb49    ..I.    BL       SYS_ConfigMFP ; 0x1ba0
;;;25         SYS_ConfigMFP(P1_1, SYS_MFP_GPIO); // LED3
        0x0000050e:    2100        .!      MOVS     r1,#0
        0x00000510:    2011        .       MOVS     r0,#0x11
        0x00000512:    f001fb45    ..E.    BL       SYS_ConfigMFP ; 0x1ba0
;;;26     
;;;27         GPIO_SetModeByPin(P1_0, GPIO_MODE_OUTPUT); // LED2
        0x00000516:    2101        .!      MOVS     r1,#1
        0x00000518:    2010        .       MOVS     r0,#0x10
        0x0000051a:    f000fae5    ....    BL       GPIO_SetModeByPin ; 0xae8
;;;28         GPIO_SetModeByPin(P1_1, GPIO_MODE_OUTPUT); // LED3
        0x0000051e:    2101        .!      MOVS     r1,#1
        0x00000520:    2011        .       MOVS     r0,#0x11
        0x00000522:    f000fae1    ....    BL       GPIO_SetModeByPin ; 0xae8
;;;29         
;;;30         P10 = 0;  // 0:off; 1:on
        0x00000526:    2100        .!      MOVS     r1,#0
        0x00000528:    4801        .H      LDR      r0,[pc,#4] ; [0x530] = 0x40020200
        0x0000052a:    6201        .b      STR      r1,[r0,#0x20]
;;;31         P11 = 0;  // 0:off; 1:on
        0x0000052c:    6241        Ab      STR      r1,[r0,#0x24]
;;;32     		 
;;;33     }
        0x0000052e:    bd10        ..      POP      {r4,pc}
    $d
        0x00000530:    40020200    ...@    DCD    1073873408
    $t
    i.BSP_KeyInit
    BSP_KeyInit
;;;34     
;;;35     void BSP_TriggerGpioInit(void)
;;;36     {
;;;37         SYS_ConfigMFP(P3_0, SYS_MFP_GPIO);
;;;38         GPIO_SetModeByPin(P3_0, GPIO_MODE_OUTPUT);
;;;39     }
;;;40     
;;;41     void BSP_UartInit(void)
;;;42     {
;;;43         /* Unlock protected registers */
;;;44         SYS_UnlockReg();
;;;45     
;;;46         GPIO_EnableDigitalPath(P1, BIT5);
;;;47         SYS_SET_MFP(P1, 4, UART1_TX);
;;;48         SYS_SET_MFP(P1, 5, UART1_RX);
;;;49     
;;;50         /* Relock protected registers */
;;;51         SYS_LockReg();
;;;52         
;;;53         UART_InitTypeDef Init_Struct;
;;;54     
;;;55         Init_Struct.UART_BaudRate = 1000000;
;;;56         Init_Struct.UART_LineCtrl = Uart_Line_8n1;
;;;57     
;;;58         /* Init UART0 for printf */
;;;59         UART_Init(UART1, &Init_Struct);
;;;60         UART_EnableFifo(UART1);
;;;61     }
;;;62     
;;;63     void BSP_Timer0Init(void)
;;;64     {
;;;65         // Select Timer clock source
;;;66         CLK_SetTmrClkSrc(TIMER0, CLK_APB1_TMR0SEL_APB1CLK);
;;;67     
;;;68         // Set Timer work mode and expected clock frequency
;;;69         TIMER_Open(TIMER0, TIMER_PERIODIC_MODE, 16000000);
;;;70     
;;;71         // Set compare value (to 16M)
;;;72         // expect_timeout = tmrCmpValue / tmrExpCntFreq = 16M / 16MHz = 1s
;;;73         // real_timeout = tmrCmpValue / tmrRealCntFreq = 16M / tmrRealCntFreq
;;;74         TIMER_SetCmpValue(TIMER0, 16000);
;;;75     
;;;76         // Enable interrupt
;;;77         TIMER_EnableInt(TIMER0);
;;;78         NVIC_EnableIRQ(TMR0_IRQn);
;;;79     
;;;80         // Start Timer counting
;;;81         TIMER_Start(TIMER0);
;;;82     }
;;;83     
;;;84     void TMR0_IRQHandler(void)
;;;85     {
;;;86         if (TIMER_GetIntFlag(TIMER0))
;;;87         {
;;;88             // Clear Timer interrupt flag
;;;89             TIMER_ClearIntFlag(TIMER0);
;;;90             g_SystemTick++;
;;;91             
;;;92     //        if(g_SystemTick >= 1000)
;;;93     //        {
;;;94     //            g_SystemTick = 0;
;;;95     //            SYS_TEST("1 second.\n");
;;;96     //        }
;;;97         }
;;;98     }
;;;99     
;;;100    void BSP_KeyInit(void)
;;;101    {
        0x00000534:    b510        ..      PUSH     {r4,lr}
;;;102    	GPIO_EnablePullupPath(P0, BIT1);
        0x00000536:    2002        .       MOVS     r0,#2
;;; ..\..\..\..\pan108\peripheral\inc\pan_gpio.h
;;;342        gpio->DINOFF |= PinMask;
        0x00000538:    4920         I      LDR      r1,[pc,#128] ; [0x5bc] = 0x40020000
        0x0000053a:    684a        Jh      LDR      r2,[r1,#4]
        0x0000053c:    4302        .C      ORRS     r2,r2,r0
        0x0000053e:    604a        J`      STR      r2,[r1,#4]
;;; ..\..\..\..\pan108\bsp.c
;;;103    	GPIO_EnablePullupPath(P1, BIT6);
        0x00000540:    2140        @!      MOVS     r1,#0x40
;;; ..\..\..\..\pan108\peripheral\inc\pan_gpio.h
;;;342        gpio->DINOFF |= PinMask;
        0x00000542:    481e        .H      LDR      r0,[pc,#120] ; [0x5bc] = 0x40020000
        0x00000544:    3040        @0      ADDS     r0,r0,#0x40
        0x00000546:    6842        Bh      LDR      r2,[r0,#4]
        0x00000548:    430a        .C      ORRS     r2,r2,r1
        0x0000054a:    6042        B`      STR      r2,[r0,#4]
;;; ..\..\..\..\pan108\bsp.c
;;;104    	GPIO_EnablePullupPath(P1, BIT7);
        0x0000054c:    2180        .!      MOVS     r1,#0x80
;;; ..\..\..\..\pan108\peripheral\inc\pan_gpio.h
;;;342        gpio->DINOFF |= PinMask;
        0x0000054e:    6842        Bh      LDR      r2,[r0,#4]
        0x00000550:    430a        .C      ORRS     r2,r2,r1
        0x00000552:    6042        B`      STR      r2,[r0,#4]
;;; ..\..\..\..\pan108\bsp.c
;;;105        GPIO_EnablePullupPath(P3, BIT1);
        0x00000554:    2102        .!      MOVS     r1,#2
;;; ..\..\..\..\pan108\peripheral\inc\pan_gpio.h
;;;342        gpio->DINOFF |= PinMask;
        0x00000556:    4819        .H      LDR      r0,[pc,#100] ; [0x5bc] = 0x40020000
        0x00000558:    30c0        .0      ADDS     r0,r0,#0xc0
        0x0000055a:    6842        Bh      LDR      r2,[r0,#4]
        0x0000055c:    430a        .C      ORRS     r2,r2,r1
        0x0000055e:    6042        B`      STR      r2,[r0,#4]
;;; ..\..\..\..\pan108\bsp.c
;;;106    	GPIO_EnablePullupPath(P3, BIT0);
        0x00000560:    2101        .!      MOVS     r1,#1
;;; ..\..\..\..\pan108\peripheral\inc\pan_gpio.h
;;;342        gpio->DINOFF |= PinMask;
        0x00000562:    6842        Bh      LDR      r2,[r0,#4]
        0x00000564:    430a        .C      ORRS     r2,r2,r1
        0x00000566:    6042        B`      STR      r2,[r0,#4]
;;; ..\..\..\..\pan108\bsp.c
;;;108        SYS_ConfigMFP(P0_1, SYS_MFP_GPIO);
        0x00000568:    2100        .!      MOVS     r1,#0
        0x0000056a:    2001        .       MOVS     r0,#1
        0x0000056c:    f001fb18    ....    BL       SYS_ConfigMFP ; 0x1ba0
;;;109        SYS_ConfigMFP(P1_6, SYS_MFP_GPIO);
        0x00000570:    2100        .!      MOVS     r1,#0
        0x00000572:    2016        .       MOVS     r0,#0x16
        0x00000574:    f001fb14    ....    BL       SYS_ConfigMFP ; 0x1ba0
;;;110        SYS_ConfigMFP(P1_7, SYS_MFP_GPIO);
        0x00000578:    2100        .!      MOVS     r1,#0
        0x0000057a:    2017        .       MOVS     r0,#0x17
        0x0000057c:    f001fb10    ....    BL       SYS_ConfigMFP ; 0x1ba0
;;;111        SYS_ConfigMFP(P3_1, SYS_MFP_GPIO);
        0x00000580:    2100        .!      MOVS     r1,#0
        0x00000582:    2031        1       MOVS     r0,#0x31
        0x00000584:    f001fb0c    ....    BL       SYS_ConfigMFP ; 0x1ba0
;;;112        SYS_ConfigMFP(P3_0, SYS_MFP_GPIO);
        0x00000588:    2100        .!      MOVS     r1,#0
        0x0000058a:    2030        0       MOVS     r0,#0x30
        0x0000058c:    f001fb08    ....    BL       SYS_ConfigMFP ; 0x1ba0
;;;113    
;;;114        GPIO_SetModeByPin(P0_1, GPIO_MODE_QUASI);
        0x00000590:    2103        .!      MOVS     r1,#3
        0x00000592:    2001        .       MOVS     r0,#1
        0x00000594:    f000faa8    ....    BL       GPIO_SetModeByPin ; 0xae8
;;;115        GPIO_SetModeByPin(P1_6, GPIO_MODE_QUASI);
        0x00000598:    2103        .!      MOVS     r1,#3
        0x0000059a:    2016        .       MOVS     r0,#0x16
        0x0000059c:    f000faa4    ....    BL       GPIO_SetModeByPin ; 0xae8
;;;116        GPIO_SetModeByPin(P1_7, GPIO_MODE_QUASI);
        0x000005a0:    2103        .!      MOVS     r1,#3
        0x000005a2:    2017        .       MOVS     r0,#0x17
        0x000005a4:    f000faa0    ....    BL       GPIO_SetModeByPin ; 0xae8
;;;117        GPIO_SetModeByPin(P3_1, GPIO_MODE_QUASI);
        0x000005a8:    2103        .!      MOVS     r1,#3
        0x000005aa:    2031        1       MOVS     r0,#0x31
        0x000005ac:    f000fa9c    ....    BL       GPIO_SetModeByPin ; 0xae8
;;;118        GPIO_SetModeByPin(P3_0, GPIO_MODE_INPUT);
        0x000005b0:    2100        .!      MOVS     r1,#0
        0x000005b2:    2030        0       MOVS     r0,#0x30
        0x000005b4:    f000fa98    ....    BL       GPIO_SetModeByPin ; 0xae8
;;;119    
;;;120    }
        0x000005b8:    bd10        ..      POP      {r4,pc}
    $d
        0x000005ba:    0000        ..      DCW    0
        0x000005bc:    40020000    ...@    DCD    1073872896
    $t
    i.BSP_Led3Toggle
    BSP_Led3Toggle
;;;121    
;;;122    void BSP_OLEDInit(void)
;;;123    {
;;;124        SYS_ConfigMFP(P2_2, SYS_MFP_GPIO); // OLED_DC
;;;125        SYS_ConfigMFP(P2_0, SYS_MFP_GPIO); // OLED_CS
;;;126        SYS_ConfigMFP(P2_6, SYS_MFP_GPIO); // OLED_RST
;;;127        SYS_ConfigMFP(P2_1, SYS_MFP_GPIO); // OLED_SCLK
;;;128        SYS_ConfigMFP(P2_3, SYS_MFP_GPIO); // OLED_SDIN
;;;129    
;;;130        GPIO_SetModeByPin(P2_2, GPIO_MODE_OUTPUT); // OLED_DC
;;;131        GPIO_SetModeByPin(P2_0, GPIO_MODE_OUTPUT); // OLED_CS
;;;132        GPIO_SetModeByPin(P2_6, GPIO_MODE_OUTPUT); // OLED_RST
;;;133        GPIO_SetModeByPin(P2_1, GPIO_MODE_OUTPUT); // OLED_SCLK
;;;134        GPIO_SetModeByPin(P2_3, GPIO_MODE_OUTPUT); // OLED_SDIN
;;;135    
;;;136        P22 = 0; // OLED_DC
;;;137        P20 = 0; // OLED_CS
;;;138        P26 = 0; // OLED_RST
;;;139        P21 = 0; // OLED_SCLK
;;;140        P23 = 0; // OLED_SDIN
;;;141    }
;;;142    
;;;143    void BSP_Led2Toggle(void)
;;;144    {
;;;145        static bool FlagStatus = 0;
;;;146    
;;;147        FlagStatus = !FlagStatus;
;;;148        LED2_PIN = FlagStatus;
;;;149    }
;;;150    
;;;151    void BSP_Led3Toggle(void)
;;;152    {
;;;153        static bool FlagStatus = 0;
;;;154    
;;;155        FlagStatus = !FlagStatus;
        0x000005c0:    4903        .I      LDR      r1,[pc,#12] ; [0x5d0] = 0x20000004
        0x000005c2:    7848        Hx      LDRB     r0,[r1,#1]
        0x000005c4:    2201        ."      MOVS     r2,#1
        0x000005c6:    4050        P@      EORS     r0,r0,r2
        0x000005c8:    7048        Hp      STRB     r0,[r1,#1]
;;;156        LED3_PIN = FlagStatus;
        0x000005ca:    4902        .I      LDR      r1,[pc,#8] ; [0x5d4] = 0x40020200
        0x000005cc:    6248        Hb      STR      r0,[r1,#0x24]
;;;157    }
        0x000005ce:    4770        pG      BX       lr
    $d
        0x000005d0:    20000004    ...     DCD    536870916
        0x000005d4:    40020200    ...@    DCD    1073873408
    $t
    i.BSP_OLEDInit
    BSP_OLEDInit
;;; ..\..\..\..\pan108\bsp.c (123)
        0x000005d8:    b510        ..      PUSH     {r4,lr}
;;;124        SYS_ConfigMFP(P2_2, SYS_MFP_GPIO); // OLED_DC
        0x000005da:    2100        .!      MOVS     r1,#0
        0x000005dc:    2022        "       MOVS     r0,#0x22
        0x000005de:    f001fadf    ....    BL       SYS_ConfigMFP ; 0x1ba0
;;;125        SYS_ConfigMFP(P2_0, SYS_MFP_GPIO); // OLED_CS
        0x000005e2:    2100        .!      MOVS     r1,#0
        0x000005e4:    2020                MOVS     r0,#0x20
        0x000005e6:    f001fadb    ....    BL       SYS_ConfigMFP ; 0x1ba0
;;;126        SYS_ConfigMFP(P2_6, SYS_MFP_GPIO); // OLED_RST
        0x000005ea:    2100        .!      MOVS     r1,#0
        0x000005ec:    2026        &       MOVS     r0,#0x26
        0x000005ee:    f001fad7    ....    BL       SYS_ConfigMFP ; 0x1ba0
;;;127        SYS_ConfigMFP(P2_1, SYS_MFP_GPIO); // OLED_SCLK
        0x000005f2:    2100        .!      MOVS     r1,#0
        0x000005f4:    2021        !       MOVS     r0,#0x21
        0x000005f6:    f001fad3    ....    BL       SYS_ConfigMFP ; 0x1ba0
;;;128        SYS_ConfigMFP(P2_3, SYS_MFP_GPIO); // OLED_SDIN
        0x000005fa:    2100        .!      MOVS     r1,#0
        0x000005fc:    2023        #       MOVS     r0,#0x23
        0x000005fe:    f001facf    ....    BL       SYS_ConfigMFP ; 0x1ba0
;;;129    
;;;130        GPIO_SetModeByPin(P2_2, GPIO_MODE_OUTPUT); // OLED_DC
        0x00000602:    2101        .!      MOVS     r1,#1
        0x00000604:    2022        "       MOVS     r0,#0x22
        0x00000606:    f000fa6f    ..o.    BL       GPIO_SetModeByPin ; 0xae8
;;;131        GPIO_SetModeByPin(P2_0, GPIO_MODE_OUTPUT); // OLED_CS
        0x0000060a:    2101        .!      MOVS     r1,#1
        0x0000060c:    2020                MOVS     r0,#0x20
        0x0000060e:    f000fa6b    ..k.    BL       GPIO_SetModeByPin ; 0xae8
;;;132        GPIO_SetModeByPin(P2_6, GPIO_MODE_OUTPUT); // OLED_RST
        0x00000612:    2101        .!      MOVS     r1,#1
        0x00000614:    2026        &       MOVS     r0,#0x26
        0x00000616:    f000fa67    ..g.    BL       GPIO_SetModeByPin ; 0xae8
;;;133        GPIO_SetModeByPin(P2_1, GPIO_MODE_OUTPUT); // OLED_SCLK
        0x0000061a:    2101        .!      MOVS     r1,#1
        0x0000061c:    2021        !       MOVS     r0,#0x21
        0x0000061e:    f000fa63    ..c.    BL       GPIO_SetModeByPin ; 0xae8
;;;134        GPIO_SetModeByPin(P2_3, GPIO_MODE_OUTPUT); // OLED_SDIN
        0x00000622:    2101        .!      MOVS     r1,#1
        0x00000624:    2023        #       MOVS     r0,#0x23
        0x00000626:    f000fa5f    .._.    BL       GPIO_SetModeByPin ; 0xae8
;;;135    
;;;136        P22 = 0; // OLED_DC
        0x0000062a:    2100        .!      MOVS     r1,#0
        0x0000062c:    4803        .H      LDR      r0,[pc,#12] ; [0x63c] = 0x40020240
        0x0000062e:    6081        .`      STR      r1,[r0,#8]
;;;137        P20 = 0; // OLED_CS
        0x00000630:    6001        .`      STR      r1,[r0,#0]
;;;138        P26 = 0; // OLED_RST
        0x00000632:    6181        .a      STR      r1,[r0,#0x18]
;;;139        P21 = 0; // OLED_SCLK
        0x00000634:    6041        A`      STR      r1,[r0,#4]
;;;140        P23 = 0; // OLED_SDIN
        0x00000636:    60c1        .`      STR      r1,[r0,#0xc]
;;;141    }
        0x00000638:    bd10        ..      POP      {r4,pc}
    $d
        0x0000063a:    0000        ..      DCW    0
        0x0000063c:    40020240    @..@    DCD    1073873472
    $t
    i.BSP_UartInit
    BSP_UartInit
;;; ..\..\..\..\pan108\bsp.c (42)
        0x00000640:    b51c        ..      PUSH     {r2-r4,lr}
;;; ..\..\..\..\pan108\device\Include\pan_sys.h
;;;598            SYS->REGLCTL = 0x59;
        0x00000642:    2359        Y#      MOVS     r3,#0x59
        0x00000644:    4818        .H      LDR      r0,[pc,#96] ; [0x6a8] = 0x40030040
        0x00000646:    2116        .!      MOVS     r1,#0x16
        0x00000648:    2288        ."      MOVS     r2,#0x88
        0x0000064a:    6003        .`      STR      r3,[r0,#0]
;;;599            SYS->REGLCTL = 0x16;
        0x0000064c:    6001        .`      STR      r1,[r0,#0]
;;;600            SYS->REGLCTL = 0x88;
        0x0000064e:    6002        .`      STR      r2,[r0,#0]
;;;601        }
;;;602        while(SYS->REGLCTL == 0);
        0x00000650:    6804        .h      LDR      r4,[r0,#0]
        0x00000652:    2c00        .,      CMP      r4,#0
        0x00000654:    d0f9        ..      BEQ      0x64a ; BSP_UartInit + 10
;;; ..\..\..\..\pan108\peripheral\inc\pan_gpio.h
;;;312        gpio->DINOFF &= ~(PinMask << 16);
        0x00000656:    4915        .I      LDR      r1,[pc,#84] ; [0x6ac] = 0x40020040
        0x00000658:    684a        Jh      LDR      r2,[r1,#4]
        0x0000065a:    03cb        ..      LSLS     r3,r1,#15
        0x0000065c:    439a        .C      BICS     r2,r2,r3
        0x0000065e:    604a        J`      STR      r2,[r1,#4]
;;; ..\..\..\..\pan108\bsp.c
;;;47         SYS_SET_MFP(P1, 4, UART1_TX);
        0x00000660:    4911        .I      LDR      r1,[pc,#68] ; [0x6a8] = 0x40030040
        0x00000662:    3940        @9      SUBS     r1,r1,#0x40
        0x00000664:    684a        Jh      LDR      r2,[r1,#4]
        0x00000666:    4b12        .K      LDR      r3,[pc,#72] ; [0x6b0] = 0xffefefef
        0x00000668:    401a        .@      ANDS     r2,r2,r3
        0x0000066a:    3210        .2      ADDS     r2,r2,#0x10
        0x0000066c:    604a        J`      STR      r2,[r1,#4]
;;;48         SYS_SET_MFP(P1, 5, UART1_RX);
        0x0000066e:    684a        Jh      LDR      r2,[r1,#4]
        0x00000670:    4b10        .K      LDR      r3,[pc,#64] ; [0x6b4] = 0xffdfdfdf
        0x00000672:    401a        .@      ANDS     r2,r2,r3
        0x00000674:    3220         2      ADDS     r2,r2,#0x20
        0x00000676:    604a        J`      STR      r2,[r1,#4]
;;; ..\..\..\..\pan108\device\Include\pan_sys.h
;;;616        __NOP();__NOP();__NOP();__NOP();__NOP();
        0x00000678:    bf00        ..      NOP      
        0x0000067a:    bf00        ..      NOP      
        0x0000067c:    bf00        ..      NOP      
        0x0000067e:    bf00        ..      NOP      
        0x00000680:    bf00        ..      NOP      
;;;617    #else
;;;618        __ISB();
;;;619    #endif
;;;620        SYS->REGLCTL = 0;
        0x00000682:    2100        .!      MOVS     r1,#0
        0x00000684:    6001        .`      STR      r1,[r0,#0]
;;; ..\..\..\..\pan108\bsp.c
;;;55         Init_Struct.UART_BaudRate = 1000000;
        0x00000686:    480c        .H      LDR      r0,[pc,#48] ; [0x6b8] = 0xf4240
;;;56         Init_Struct.UART_LineCtrl = Uart_Line_8n1;
        0x00000688:    9000        ..      STR      r0,[sp,#0]
        0x0000068a:    2003        .       MOVS     r0,#3
        0x0000068c:    4669        iF      MOV      r1,sp
        0x0000068e:    7108        .q      STRB     r0,[r1,#4]
;;;57     
;;;58         /* Init UART0 for printf */
;;;59         UART_Init(UART1, &Init_Struct);
        0x00000690:    4c0a        .L      LDR      r4,[pc,#40] ; [0x6bc] = 0x40013000
        0x00000692:    4620         F      MOV      r0,r4
        0x00000694:    f001fb22    ..".    BL       UART_Init ; 0x1cdc
;;; ..\..\..\..\pan108\peripheral\inc\pan_uart.h
;;;245        UARTx->SCR |= UART_FCR_FIFOE_Msk;
        0x00000698:    69e0        .i      LDR      r0,[r4,#0x1c]
        0x0000069a:    2101        .!      MOVS     r1,#1
        0x0000069c:    4308        .C      ORRS     r0,r0,r1
        0x0000069e:    61e0        .a      STR      r0,[r4,#0x1c]
;;;246    
;;;247        UARTx->IIR_FCR = UARTx->SCR;
        0x000006a0:    69e0        .i      LDR      r0,[r4,#0x1c]
        0x000006a2:    60a0        .`      STR      r0,[r4,#8]
;;; ..\..\..\..\pan108\bsp.c
;;;61     }
        0x000006a4:    bd1c        ..      POP      {r2-r4,pc}
    $d
        0x000006a6:    0000        ..      DCW    0
        0x000006a8:    40030040    @..@    DCD    1073938496
        0x000006ac:    40020040    @..@    DCD    1073872960
        0x000006b0:    ffefefef    ....    DCD    4293914607
        0x000006b4:    ffdfdfdf    ....    DCD    4292861919
        0x000006b8:    000f4240    @B..    DCD    1000000
        0x000006bc:    40013000    .0.@    DCD    1073819648
    $t
    i.CLK_AHBPeriphClockCmd
    CLK_AHBPeriphClockCmd
;;; .\..\..\..\..\pan108\device\Source\pan_clk.c
;;;208        (NewState != DISABLE)?(CLK->AHB_CLK_CTRL |= CLK_AHBPeriph):(CLK->AHB_CLK_CTRL &= ~CLK_AHBPeriph);
        0x000006c0:    4a04        .J      LDR      r2,[pc,#16] ; [0x6d4] = 0x40040000
        0x000006c2:    2900        .)      CMP      r1,#0
        0x000006c4:    6b91        .k      LDR      r1,[r2,#0x38]
;;; .\..\..\..\..\pan108\device\Source\pan_clk.c (207)
        0x000006c6:    d001        ..      BEQ      0x6cc ; CLK_AHBPeriphClockCmd + 12
;;;208        (NewState != DISABLE)?(CLK->AHB_CLK_CTRL |= CLK_AHBPeriph):(CLK->AHB_CLK_CTRL &= ~CLK_AHBPeriph);
        0x000006c8:    4301        .C      ORRS     r1,r1,r0
        0x000006ca:    e000        ..      B        0x6ce ; CLK_AHBPeriphClockCmd + 14
        0x000006cc:    4381        .C      BICS     r1,r1,r0
        0x000006ce:    6391        .c      STR      r1,[r2,#0x38]
;;;209    }
        0x000006d0:    4770        pG      BX       lr
    $d
        0x000006d2:    0000        ..      DCW    0
        0x000006d4:    40040000    ...@    DCD    1074003968
    $t
    i.CLK_APB1PeriphClockCmd
    CLK_APB1PeriphClockCmd
;;;210    
;;;211    /**
;;;212      * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
;;;213      * @note   After reset, the peripheral clock (used for registers read/write access)
;;;214      *         is disabled and the application software has to enable this clock before 
;;;215      *         using it. 
;;;216      * @param  CLK_APB1Periph: specifies the APB1 peripheral to gates its clock.
;;;217      *          This parameter can be any combination of the following values:
;;;218      *            @arg CLK_APB1Periph_I2C0              
;;;219      *            @arg CLK_APB1Periph_SPI0       
;;;220      *            @arg CLK_APB1Periph_UART0     
;;;221      *            @arg CLK_APB1Periph_PWM01    
;;;222      *            @arg CLK_APB1Periph_PWM23      
;;;223      *            @arg CLK_APB1Periph_PWM45  
;;;224      *            @arg CLK_APB1Periph_PWM67   
;;;225      *            @arg CLK_APB1Periph_PWMEN    
;;;226      *            @arg CLK_APB1Periph_ADC    
;;;227      *            @arg CLK_APB1Periph_WDT   
;;;228      *            @arg CLK_APB1Periph_WWDT    
;;;229      *            @arg CLK_APB1Periph_TMR0    
;;;230      *            @arg CLK_APB1Periph_All
;;;231      * @param  NewState  : new state of the specified peripheral clock.
;;;232      *          This parameter can be: ENABLE or DISABLE.
;;;233      * @retval None
;;;234      */
;;;235    void CLK_APB1PeriphClockCmd(uint32_t CLK_APB1Periph, FunctionalState NewState)
;;;236    {
;;;237      (NewState != DISABLE)?(CLK->APB1_CLK_CTRL |= CLK_APB1Periph):(CLK->APB1_CLK_CTRL &= ~CLK_APB1Periph);
        0x000006d8:    4a04        .J      LDR      r2,[pc,#16] ; [0x6ec] = 0x40040000
        0x000006da:    2900        .)      CMP      r1,#0
        0x000006dc:    6bd1        .k      LDR      r1,[r2,#0x3c]
;;; .\..\..\..\..\pan108\device\Source\pan_clk.c (236)
        0x000006de:    d001        ..      BEQ      0x6e4 ; CLK_APB1PeriphClockCmd + 12
;;;237      (NewState != DISABLE)?(CLK->APB1_CLK_CTRL |= CLK_APB1Periph):(CLK->APB1_CLK_CTRL &= ~CLK_APB1Periph);
        0x000006e0:    4301        .C      ORRS     r1,r1,r0
        0x000006e2:    e000        ..      B        0x6e6 ; CLK_APB1PeriphClockCmd + 14
        0x000006e4:    4381        .C      BICS     r1,r1,r0
        0x000006e6:    63d1        .c      STR      r1,[r2,#0x3c]
;;;238    }
        0x000006e8:    4770        pG      BX       lr
    $d
        0x000006ea:    0000        ..      DCW    0
        0x000006ec:    40040000    ...@    DCD    1074003968
    $t
    i.CLK_APB2PeriphClockCmd
    CLK_APB2PeriphClockCmd
;;;239    
;;;240    /**
;;;241      * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
;;;242      * @note   After reset, the peripheral clock (used for registers read/write access)
;;;243      *         is disabled and the application software has to enable this clock before 
;;;244      *         using it.
;;;245      * @param  CLK_APB2Periph: specifies the APB2 peripheral to gates its clock.
;;;246      *          This parameter can be any combination of the following values:
;;;247      *            @arg CLK_APB2Periph_SPI1 
;;;248      *            @arg CLK_APB2Periph_UART1
;;;249      *            @arg CLK_APB2Periph_TMR1 
;;;250      *            @arg CLK_APB2Periph_TMR2 
;;;251      *            @arg CLK_APB2Periph_All  
;;;252      * @param  NewState: new state of the specified peripheral clock.
;;;253      *          This parameter can be: ENABLE or DISABLE.
;;;254      * @retval None
;;;255      */
;;;256    void CLK_APB2PeriphClockCmd(uint32_t CLK_APB2Periph, FunctionalState NewState)
;;;257    {
;;;258        (NewState != DISABLE)?(CLK->APB2_CLK_CTRL |= CLK_APB2Periph):(CLK->APB2_CLK_CTRL &= ~CLK_APB2Periph); 
        0x000006f0:    4a04        .J      LDR      r2,[pc,#16] ; [0x704] = 0x40040040
        0x000006f2:    2900        .)      CMP      r1,#0
        0x000006f4:    6851        Qh      LDR      r1,[r2,#4]
;;; .\..\..\..\..\pan108\device\Source\pan_clk.c (257)
        0x000006f6:    d001        ..      BEQ      0x6fc ; CLK_APB2PeriphClockCmd + 12
;;;258        (NewState != DISABLE)?(CLK->APB2_CLK_CTRL |= CLK_APB2Periph):(CLK->APB2_CLK_CTRL &= ~CLK_APB2Periph); 
        0x000006f8:    4301        .C      ORRS     r1,r1,r0
        0x000006fa:    e000        ..      B        0x6fe ; CLK_APB2PeriphClockCmd + 14
        0x000006fc:    4381        .C      BICS     r1,r1,r0
        0x000006fe:    6051        Q`      STR      r1,[r2,#4]
;;;259    }
        0x00000700:    4770        pG      BX       lr
    $d
        0x00000702:    0000        ..      DCW    0
        0x00000704:    40040040    @..@    DCD    1074004032
    $t
    i.CLK_GetHCLKFreq
    CLK_GetHCLKFreq
;;; .\..\..\..\..\pan108\device\Source\pan_clk.c (32)
        0x00000708:    b510        ..      PUSH     {r4,lr}
;;;33         SystemCoreClockUpdate();
        0x0000070a:    f001fa69    ..i.    BL       SystemCoreClockUpdate ; 0x1be0
;;;34         return SystemCoreClock;
        0x0000070e:    4801        .H      LDR      r0,[pc,#4] ; [0x714] = 0x20000000
        0x00000710:    6800        .h      LDR      r0,[r0,#0]
;;;35     }
        0x00000712:    bd10        ..      POP      {r4,pc}
    $d
        0x00000714:    20000000    ...     DCD    536870912
    $t
    i.CLK_GetPeripheralFreq
    CLK_GetPeripheralFreq
;;;36     
;;;37     
;;;38      /**
;;;39        * @brief  This function get CPU frequency. The frequency unit is Hz.
;;;40        * @return CPU frequency
;;;41        */
;;;42      uint32_t CLK_GetCPUFreq(void)
;;;43      {
;;;44          SystemCoreClockUpdate();
;;;45          return SystemCoreClock;
;;;46      }
;;;47     
;;;48     /**
;;;49       * @brief  This function get APB1 frequency. The frequency unit is Hz.
;;;50       * @return HCLK frequency
;;;51       */
;;;52     uint32_t CLK_GetPCLK1Freq(void)
;;;53     {
;;;54         uint32_t ahbclock,apb1_clock;
;;;55         uint32_t apb1_div;
;;;56         
;;;57         // update ahb clock
;;;58         SystemCoreClockUpdate();
;;;59         ahbclock =  SystemCoreClock;
;;;60         
;;;61         apb1_div = (CLK->CLK_TOP_CTRL & CLK_TOPCTL_APB1_DIV_Msk) >> CLK_TOPCTL_APB1_DIV_Pos;
;;;62         if(apb1_div)
;;;63     			apb1_clock = ahbclock / (2 * apb1_div);
;;;64     		else
;;;65     			apb1_clock = ahbclock;
;;;66         
;;;67         return apb1_clock;
;;;68     }
;;;69     /**
;;;70       * @brief  This function get APB2 frequency. The frequency unit is Hz.
;;;71       * @return HCLK frequency
;;;72       */
;;;73     uint32_t CLK_GetPCLK2Freq(void)
;;;74     {
;;;75         uint32_t ahbclock,apb2_clock;
;;;76         uint32_t apb2_div;
;;;77         
;;;78         // update ahb clock
;;;79         SystemCoreClockUpdate();
;;;80         ahbclock =  SystemCoreClock;
;;;81         
;;;82         apb2_div = (CLK->CLK_TOP_CTRL & CLK_TOPCTL_APB2_DIV_Msk) >> CLK_TOPCTL_APB2_DIV_Pos;
;;;83         if(apb2_div)
;;;84     			apb2_clock = ahbclock / (2 * apb2_div);
;;;85     		else
;;;86     			apb2_clock = ahbclock;
;;;87         
;;;88         return apb2_clock;
;;;89     }
;;;90      /**
;;;91         * @brief  This function set 16M ref clock source
;;;92         * @param[in]  u32ClkSrc is HCLK clock source. Including :
;;;93         *                  - \ref CLK_SYS_SRCSEL_RCH 
;;;94         *                  - \ref CLK_SYS_SRCSEL_XTH 
;;;95         *                  - \ref CLK_SYS_SRCSEL_RCL 
;;;96         *                  - \ref CLK_SYS_SRCSEL_XTL 
;;;97         *                  - \ref CLK_SYS_SRCSEL_DPLL
;;;98         * @return None
;;;99         */
;;;100    void CLK_RefClkSrcConfig(uint32_t u32ClkSrc)
;;;101    {
;;;102    //    uint32_t tmpreg;
;;;103        CLK->CLK_TOP_CTRL &= ~CLK_TOPCTL_SYS_CLK_SEL_Msk;
;;;104        switch(u32ClkSrc)
;;;105        {
;;;106            case CLK_SYS_SRCSEL_RCH: 
;;;107                CLK->CLK_TOP_CTRL |= CLK_TOPCTL_RCH_EN_Msk;
;;;108    #ifdef SYNC_3V_REG_MANUALLY
;;;109                CLK_Wait3vSyncReady();
;;;110    #endif
;;;111    			CLK_WaitClockReady(u32ClkSrc);
;;;112                CLK->CLK_TOP_CTRL |= CLK_SYS_SRCSEL_RCH;
;;;113                break;
;;;114            case CLK_SYS_SRCSEL_XTH: 
;;;115    			CLK_XthStartupConfig();
;;;116                CLK->CLK_TOP_CTRL |= CLK_TOPCTL_XTH_EN_Msk;
;;;117    #ifdef SYNC_3V_REG_MANUALLY
;;;118                CLK_Wait3vSyncReady();
;;;119    #endif
;;;120    			CLK_WaitClockReady(u32ClkSrc);
;;;121                CLK->CLK_TOP_CTRL |= CLK_SYS_SRCSEL_XTH;
;;;122                break;
;;;123    //        case CLK_SYS_SRCSEL_RCL: 
;;;124    //            CLK->CLK_TOP_CTRL |= (CLK_SYS_SRCSEL_RCL | CLK_TOPCTL_RCL_EN_Msk);
;;;125    //            break;
;;;126    //        case CLK_SYS_SRCSEL_XTL: 
;;;127    //            CLK->CLK_TOP_CTRL |= (CLK_SYS_SRCSEL_XTL | CLK_TOPCTL_XTL_EN_Msk); 
;;;128    //            break;
;;;129            case CLK_SYS_SRCSEL_DPLL: 
;;;130                CLK->CLK_TOP_CTRL |= CLK_TOPCTL_DPLL_EN_Msk;
;;;131    #ifdef SYNC_3V_REG_MANUALLY
;;;132                CLK_Wait3vSyncReady();
;;;133    #endif
;;;134    			CLK_WaitClockReady(u32ClkSrc);
;;;135                CLK->CLK_TOP_CTRL |= CLK_SYS_SRCSEL_DPLL;
;;;136                break;
;;;137            default: break;
;;;138        }
;;;139    
;;;140        //wait xtal clock stable
;;;141    //    CLK_WaitClockReady(u32ClkSrc);
;;;142    	SystemCoreClockUpdate();
;;;143    }
;;;144    /**
;;;145    * @brief  This function set HCLK clock source
;;;146    * @param[in]  u32ClkSrc is HCLK clock source. Including :
;;;147    *                  - \ref CLK_DPLL_REF_CLKSEL_RCH
;;;148    *                  - \ref CLK_DPLL_REF_CLKSEL_XTH
;;;149    * @return None
;;;150    */
;;;151    void CLK_SYSCLKConfig(uint32_t u32ClkSrc,uint32_t freq_out)
;;;152    {
;;;153        if(u32ClkSrc == CLK_DPLL_REF_CLKSEL_RCH){
;;;154            CLK->DPLL_CTRL &= ~CLK_DPLLCTL_RCLK_SEL_Msk;
;;;155        }
;;;156        else if(u32ClkSrc == CLK_DPLL_REF_CLKSEL_XTH){
;;;157            CLK->DPLL_CTRL |= CLK_DPLLCTL_RCLK_SEL_Msk;
;;;158        }
;;;159        
;;;160        /* Config MCU DPLL*/         
;;;161    	CLK_SetDpllOutputFreq(freq_out);
;;;162        //enable dpll clock
;;;163        CLK->CLK_TOP_CTRL |=  CLK_TOPCTL_DPLL_EN_Msk;
;;;164    #ifdef SYNC_3V_REG_MANUALLY
;;;165        CLK_Wait3vSyncReady();
;;;166    #endif
;;;167        CLK_WaitClockReady(CLK_SYS_SRCSEL_DPLL);
;;;168    
;;;169        /* Update System Core Clock */
;;;170    //    SystemCoreClockUpdate();
;;;171    }
;;;172    
;;;173    
;;;174    
;;;175    //void CLK_SetClkDivide(uint32_t u32ClkSel,uint32_t u32ClkDiv)
;;;176    //{
;;;177    //    switch(u32ClkSel){
;;;178    //        case CLK_DivideSource_Apb1:
;;;179    //            CLK->CLK_TOP_CTRL = (CLK->CLK_TOP_CTRL & (~CLK_TOPCTL_APB1_DIV_Msk))| u32ClkDiv;
;;;180    //            break;
;;;181    //        case CLK_DivideSource_Apb2:
;;;182    //            CLK->CLK_TOP_CTRL = (CLK->CLK_TOP_CTRL & (~CLK_TOPCTL_APB2_DIV_Msk))| u32ClkDiv;
;;;183    //            break;
;;;184    //        default: break;
;;;185    //    }
;;;186    //}
;;;187    /**
;;;188      * @brief  Enables or disables the AHB peripheral clock.
;;;189      * @note   After reset, the peripheral clock (used for registers read/write access)
;;;190      *         is disabled and the application software has to enable this clock before 
;;;191      *         using it. 
;;;192      * @param  CLK_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
;;;193      *          This parameter can be any combination of the following values:
;;;194      *            @arg CLK_AHBPeriph_DMAC   
;;;195      *            @arg CLK_AHBPeriph_GPIO   
;;;196      *            @arg CLK_AHBPeriph_SYSTICK
;;;197      *            @arg CLK_AHBPeriph_APB1   
;;;198      *            @arg CLK_AHBPeriph_APB2   
;;;199      *            @arg CLK_AHBPeriph_AHB    
;;;200      *            @arg CLK_AHBPeriph_RF 
;;;201      *            @arg CLK_AHBPeriph_All
;;;202      * @param  NewState    : new state of the specified peripheral clock.
;;;203      *          This parameter can be: ENABLE or DISABLE.
;;;204      * @retval None
;;;205      */
;;;206    void CLK_AHBPeriphClockCmd(uint32_t CLK_AHBPeriph, FunctionalState NewState)
;;;207    {
;;;208        (NewState != DISABLE)?(CLK->AHB_CLK_CTRL |= CLK_AHBPeriph):(CLK->AHB_CLK_CTRL &= ~CLK_AHBPeriph);
;;;209    }
;;;210    
;;;211    /**
;;;212      * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
;;;213      * @note   After reset, the peripheral clock (used for registers read/write access)
;;;214      *         is disabled and the application software has to enable this clock before 
;;;215      *         using it. 
;;;216      * @param  CLK_APB1Periph: specifies the APB1 peripheral to gates its clock.
;;;217      *          This parameter can be any combination of the following values:
;;;218      *            @arg CLK_APB1Periph_I2C0              
;;;219      *            @arg CLK_APB1Periph_SPI0       
;;;220      *            @arg CLK_APB1Periph_UART0     
;;;221      *            @arg CLK_APB1Periph_PWM01    
;;;222      *            @arg CLK_APB1Periph_PWM23      
;;;223      *            @arg CLK_APB1Periph_PWM45  
;;;224      *            @arg CLK_APB1Periph_PWM67   
;;;225      *            @arg CLK_APB1Periph_PWMEN    
;;;226      *            @arg CLK_APB1Periph_ADC    
;;;227      *            @arg CLK_APB1Periph_WDT   
;;;228      *            @arg CLK_APB1Periph_WWDT    
;;;229      *            @arg CLK_APB1Periph_TMR0    
;;;230      *            @arg CLK_APB1Periph_All
;;;231      * @param  NewState  : new state of the specified peripheral clock.
;;;232      *          This parameter can be: ENABLE or DISABLE.
;;;233      * @retval None
;;;234      */
;;;235    void CLK_APB1PeriphClockCmd(uint32_t CLK_APB1Periph, FunctionalState NewState)
;;;236    {
;;;237      (NewState != DISABLE)?(CLK->APB1_CLK_CTRL |= CLK_APB1Periph):(CLK->APB1_CLK_CTRL &= ~CLK_APB1Periph);
;;;238    }
;;;239    
;;;240    /**
;;;241      * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
;;;242      * @note   After reset, the peripheral clock (used for registers read/write access)
;;;243      *         is disabled and the application software has to enable this clock before 
;;;244      *         using it.
;;;245      * @param  CLK_APB2Periph: specifies the APB2 peripheral to gates its clock.
;;;246      *          This parameter can be any combination of the following values:
;;;247      *            @arg CLK_APB2Periph_SPI1 
;;;248      *            @arg CLK_APB2Periph_UART1
;;;249      *            @arg CLK_APB2Periph_TMR1 
;;;250      *            @arg CLK_APB2Periph_TMR2 
;;;251      *            @arg CLK_APB2Periph_All  
;;;252      * @param  NewState: new state of the specified peripheral clock.
;;;253      *          This parameter can be: ENABLE or DISABLE.
;;;254      * @retval None
;;;255      */
;;;256    void CLK_APB2PeriphClockCmd(uint32_t CLK_APB2Periph, FunctionalState NewState)
;;;257    {
;;;258        (NewState != DISABLE)?(CLK->APB2_CLK_CTRL |= CLK_APB2Periph):(CLK->APB2_CLK_CTRL &= ~CLK_APB2Periph); 
;;;259    }
;;;260    
;;;261     /**
;;;262       * @brief  This function check selected clock source status
;;;263       * @param[in]  u32ClkMask is selected clock source. Including
;;;264       *                  - \ref CLK_RCL_SELECT
;;;265       *                  - \ref CLK_RCH_SELECT
;;;266       *                  - \ref CLK_XTL_SELECT
;;;267       *                  - \ref CLK_XTH_SELECT
;;;268       *                  - \ref CLK_DPLL_SELECT
;;;269       * @return   0  clock is not stable
;;;270       *           1  clock is stable
;;;271       *
;;;272       * @details  To wait for clock ready by specified CLKSTATUS bit or timeout (~5ms)
;;;273       */
;;;274    uint32_t CLK_WaitClockReady(uint32_t u32ClkMask)
;;;275    {
;;;276        int32_t i32TimeOutCnt = 2160000;
;;;277        uint32_t u32ClkTmp = 0;
;;;278        while(1) 
;;;279        {
;;;280    		switch(u32ClkMask){
;;;281    				case CLK_SYS_SRCSEL_RCH :    u32ClkTmp = CLK->RCH_CTRL; break;
;;;282    				case CLK_SYS_SRCSEL_XTH :    u32ClkTmp = CLK->XTH_CTRL; break;
;;;283    //				case CLK_SYS_SRCSEL_RCL :    u32ClkTmp = CLK->RCL_CTRL; break;
;;;284    //				case CLK_SYS_SRCSEL_XTL :    u32ClkTmp = CLK->XTL_CTRL; break;
;;;285    				case CLK_SYS_SRCSEL_DPLL:    u32ClkTmp = CLK->DPLL_CTRL; break;
;;;286    				default: break;
;;;287    		}		
;;;288            if((u32ClkTmp & CLK_STABLE_STATUS_Msk) != CLK_STABLE_STATUS_Msk){
;;;289                if(i32TimeOutCnt-- <= 0)
;;;290                 return 0;
;;;291            }else{
;;;292                break;
;;;293            }  
;;;294        }
;;;295        return 1;
;;;296    }
;;;297     /**
;;;298       * @brief  This function wait sync 3v clock locale stable
;;;299       * @param[in]  none
;;;300       * @return   0  clock sync is not stable
;;;301       *           1  clock sync is stable
;;;302       *
;;;303       * @details  To wait for clock ready by specified CLKSTATUS bit or timeout (~5ms)
;;;304       */
;;;305     uint32_t CLK_Wait3vSyncReady(void)
;;;306     {
;;;307         int32_t i32TimeOutCnt = 2160000;
;;;308    
;;;309        ANA->LP_REG_SYNC |= ANAC_LP_REG_SYNC_3V_Msk;
;;;310        while(ANA->LP_REG_SYNC & (ANAC_LP_REG_SYNC_3V_Msk | ANAC_LP_REG_SYNC_STS_Msk))
;;;311        {
;;;312             if(i32TimeOutCnt-- <= 0)
;;;313                 return 0;
;;;314        }
;;;315    
;;;316         return 1;
;;;317     }
;;;318    /**
;;;319    * @brief  This function wait sync 3v clock locale stable by hardware
;;;320    * @param[in]  none
;;;321    * @return   none
;;;322    */
;;;323    void CLK_Set3vSyncAuto(void)
;;;324    {
;;;325        ANA->LP_REG_SYNC |= ANAC_LP_REG_AUTOSYNC_Msk;
;;;326    }
;;;327    
;;;328    
;;;329    /**
;;;330      * @brief This API is used to select wdt clock source
;;;331      * @param[in] u32clksel wdt clock selection. Could be 
;;;332      *             - \ref CLK_APB1_WDTSEL_MILLI_PULSE, \ref CLK_APB1_WDTSEL_RCL32K
;;;333      * @return none
;;;334      * @note This API is only used to select wdt clock source
;;;335      */
;;;336    void CLK_SetWdtClkSrc(uint32_t u32clksel)
;;;337    {
;;;338        CLK->APB1_CLK_CTRL = (CLK->APB1_CLK_CTRL & ~CLK_APB1CLK_WDTSRC_SEL_Msk) | u32clksel;
;;;339    }
;;;340    
;;;341    /**
;;;342      * @brief This API is used to select wwdt clock source
;;;343      * @param[in] wwdt The base address of wwdt module
;;;344      * @param[in] u32clksel wwdt clock selection. Could be 
;;;345      *             - \ref CLK_APB1_WDTSEL_MILLI_PULSE, \ref CLK_APB1_WDTSEL_RCL32K
;;;346      * @return none
;;;347      * @note This API is only used to select wwdt clock source
;;;348      */
;;;349    
;;;350    void CLK_SetWwdtClkSrc(uint32_t u32clksel)
;;;351    {
;;;352        CLK->APB1_CLK_CTRL = (CLK->APB1_CLK_CTRL & ~CLK_APB1CLK_WWDTSRC_SEL_Msk) | u32clksel;
;;;353    }
;;;354    
;;;355    
;;;356    /**
;;;357      * @brief This API is used to SELECT timer clock source
;;;358      * @param[in] timer The base address of Timer module
;;;359      * @param[in] u32clksel timer clock selection. Could be 
;;;360      *             - \ref CLK_APB_TMR0SEL_APB1CLK, \ref CLK_APB_TMR0SEL_LIRC,\ref CLK_APB_TMR0SEL_TM0
;;;361      *             - \ref CLK_APB_TMR1SEL_APB2CLK, \ref CLK_APB_TMR1SEL_LIRC,\ref CLK_APB_TMR0SEL_TM1
;;;362      *             - \ref CLK_APB_TMR2SEL_APB2CLK, \ref CLK_APB_TMR2SEL_LIRC,\ref CLK_APB_TMR0SEL_TM2
;;;363      * @return none
;;;364      * @note This API is only used to select timer clock source
;;;365      */
;;;366    
;;;367    void CLK_SetTmrClkSrc(TIMER_T *timer, uint32_t u32clksel)
;;;368    {
;;;369        if(timer == TIMER0) {        
;;;370            CLK->APB1_CLK_CTRL = (CLK->APB1_CLK_CTRL & ~CLK_APB1CLK_TMR0SRC_SEL_Msk) | u32clksel;
;;;371        }
;;;372        else if(timer == TIMER1){
;;;373            CLK->APB2_CLK_CTRL = (CLK->APB2_CLK_CTRL & ~CLK_APB2CLK_TMR1SRC_SEL_Msk) | u32clksel;
;;;374        }
;;;375        else if(timer == TIMER2){
;;;376            CLK->APB2_CLK_CTRL = (CLK->APB2_CLK_CTRL & ~CLK_APB2CLK_TMR2SRC_SEL_Msk) | u32clksel;
;;;377        }
;;;378    }
;;;379    
;;;380    uint32_t CLK_GetPeripheralFreq(void * Peripheral)
;;;381    {
        0x00000718:    b510        ..      PUSH     {r4,lr}
        0x0000071a:    4604        .F      MOV      r4,r0
;;;382        uint8_t u8ApbDiv = 0;
;;;383    	  uint32_t u32AhbClk,u32Pclk;
;;;384    
;;;385    	/*get system clock frequency*/
;;;386        u32AhbClk = CLK_GetHCLKFreq(); 
        0x0000071c:    f7fffff4    ....    BL       CLK_GetHCLKFreq ; 0x708
        0x00000720:    4602        .F      MOV      r2,r0
;;;387        
;;;388        if((I2C0    == (I2C_T *)   Peripheral) 
        0x00000722:    2101        .!      MOVS     r1,#1
        0x00000724:    0789        ..      LSLS     r1,r1,#30
        0x00000726:    4819        .H      LDR      r0,[pc,#100] ; [0x78c] = 0x40040000
        0x00000728:    428c        .B      CMP      r4,r1
        0x0000072a:    d00e        ..      BEQ      0x74a ; CLK_GetPeripheralFreq + 50
;;;389         ||(UART0   == (UART_T *)  Peripheral)
        0x0000072c:    4918        .I      LDR      r1,[pc,#96] ; [0x790] = 0x40003000
        0x0000072e:    428c        .B      CMP      r4,r1
        0x00000730:    d00b        ..      BEQ      0x74a ; CLK_GetPeripheralFreq + 50
;;;390         ||(SPI0    == (SPI_T *)   Peripheral)
        0x00000732:    4918        .I      LDR      r1,[pc,#96] ; [0x794] = 0x40001000
        0x00000734:    428c        .B      CMP      r4,r1
        0x00000736:    d008        ..      BEQ      0x74a ; CLK_GetPeripheralFreq + 50
;;;391         ||(TIMER0  == (TIMER_T *) Peripheral)
        0x00000738:    4917        .I      LDR      r1,[pc,#92] ; [0x798] = 0x40008000
        0x0000073a:    428c        .B      CMP      r4,r1
        0x0000073c:    d005        ..      BEQ      0x74a ; CLK_GetPeripheralFreq + 50
;;;392    		 ||(I2S_M   == (I2S_T *)   Peripheral)
        0x0000073e:    4917        .I      LDR      r1,[pc,#92] ; [0x79c] = 0x40009000
        0x00000740:    428c        .B      CMP      r4,r1
        0x00000742:    d002        ..      BEQ      0x74a ; CLK_GetPeripheralFreq + 50
;;;393    		 ||(I2S_S   == (I2S_T *)   Peripheral))
        0x00000744:    4916        .I      LDR      r1,[pc,#88] ; [0x7a0] = 0x4000a000
        0x00000746:    428c        .B      CMP      r4,r1
        0x00000748:    d102        ..      BNE      0x750 ; CLK_GetPeripheralFreq + 56
;;;394        {
;;;395            u8ApbDiv = (CLK->CLK_TOP_CTRL & CLK_TOPCTL_APB1_DIV_Msk) >> CLK_TOPCTL_APB1_DIV_Pos;
        0x0000074a:    6a00        .j      LDR      r0,[r0,#0x20]
        0x0000074c:    0c00        ..      LSRS     r0,r0,#16
        0x0000074e:    e013        ..      B        0x778 ; CLK_GetPeripheralFreq + 96
;;;396        }
;;;397        else if((SPI1    == (SPI_T *)    Peripheral) 
        0x00000750:    4914        .I      LDR      r1,[pc,#80] ; [0x7a4] = 0x40011000
        0x00000752:    428c        .B      CMP      r4,r1
        0x00000754:    d00e        ..      BEQ      0x774 ; CLK_GetPeripheralFreq + 92
;;;398              ||(UART1   == (UART_T *)   Peripheral)
        0x00000756:    4914        .I      LDR      r1,[pc,#80] ; [0x7a8] = 0x40013000
        0x00000758:    428c        .B      CMP      r4,r1
        0x0000075a:    d00b        ..      BEQ      0x774 ; CLK_GetPeripheralFreq + 92
;;;399              ||(TIMER1  == (TIMER_T *)  Peripheral)
        0x0000075c:    4913        .I      LDR      r1,[pc,#76] ; [0x7ac] = 0x40014000
        0x0000075e:    428c        .B      CMP      r4,r1
        0x00000760:    d008        ..      BEQ      0x774 ; CLK_GetPeripheralFreq + 92
;;;400              ||(TIMER2  == (TIMER_T *)  Peripheral)
        0x00000762:    4913        .I      LDR      r1,[pc,#76] ; [0x7b0] = 0x40015000
        0x00000764:    428c        .B      CMP      r4,r1
        0x00000766:    d005        ..      BEQ      0x774 ; CLK_GetPeripheralFreq + 92
;;;401              ||(KSCAN == (KSCAN_T*) Peripheral)
        0x00000768:    4912        .I      LDR      r1,[pc,#72] ; [0x7b4] = 0x40019000
        0x0000076a:    428c        .B      CMP      r4,r1
        0x0000076c:    d002        ..      BEQ      0x774 ; CLK_GetPeripheralFreq + 92
;;;402              ||(QDEC    == (QDEC_T *)   Peripheral))
        0x0000076e:    4912        .I      LDR      r1,[pc,#72] ; [0x7b8] = 0x4001a000
        0x00000770:    428c        .B      CMP      r4,r1
        0x00000772:    d109        ..      BNE      0x788 ; CLK_GetPeripheralFreq + 112
;;;403            u8ApbDiv = (CLK->CLK_TOP_CTRL & CLK_TOPCTL_APB2_DIV_Msk) >> CLK_TOPCTL_APB2_DIV_Pos;
        0x00000774:    6a00        .j      LDR      r0,[r0,#0x20]
        0x00000776:    0d00        ..      LSRS     r0,r0,#20
        0x00000778:    0700        ..      LSLS     r0,r0,#28
        0x0000077a:    0f00        ..      LSRS     r0,r0,#28
        0x0000077c:    d004        ..      BEQ      0x788 ; CLK_GetPeripheralFreq + 112
;;;404        
;;;405        if(u8ApbDiv)
;;;406            u32Pclk = u32AhbClk / (2 * u8ApbDiv);
        0x0000077e:    0041        A.      LSLS     r1,r0,#1
        0x00000780:    4610        .F      MOV      r0,r2
        0x00000782:    f7fffcc5    ....    BL       __aeabi_uidiv ; 0x110
        0x00000786:    bd10        ..      POP      {r4,pc}
;;;407        else
;;;408            u32Pclk = u32AhbClk;
        0x00000788:    4610        .F      MOV      r0,r2
;;;409        return u32Pclk;
;;;410    }
        0x0000078a:    bd10        ..      POP      {r4,pc}
    $d
        0x0000078c:    40040000    ...@    DCD    1074003968
        0x00000790:    40003000    .0.@    DCD    1073754112
        0x00000794:    40001000    ...@    DCD    1073745920
        0x00000798:    40008000    ...@    DCD    1073774592
        0x0000079c:    40009000    ...@    DCD    1073778688
        0x000007a0:    4000a000    ...@    DCD    1073782784
        0x000007a4:    40011000    ...@    DCD    1073811456
        0x000007a8:    40013000    .0.@    DCD    1073819648
        0x000007ac:    40014000    .@.@    DCD    1073823744
        0x000007b0:    40015000    .P.@    DCD    1073827840
        0x000007b4:    40019000    ...@    DCD    1073844224
        0x000007b8:    4001a000    ...@    DCD    1073848320
    $t
    i.CLK_RefClkSrcConfig
    CLK_RefClkSrcConfig
;;; .\..\..\..\..\pan108\device\Source\pan_clk.c (101)
        0x000007bc:    b510        ..      PUSH     {r4,lr}
        0x000007be:    4c1a        .L      LDR      r4,[pc,#104] ; [0x828] = 0x40040000
        0x000007c0:    6a21        !j      LDR      r1,[r4,#0x20]
        0x000007c2:    2203        ."      MOVS     r2,#3
        0x000007c4:    0212        ..      LSLS     r2,r2,#8
        0x000007c6:    4391        .C      BICS     r1,r1,r2
        0x000007c8:    6221        !b      STR      r1,[r4,#0x20]
        0x000007ca:    2800        .(      CMP      r0,#0
;;; .\..\..\..\..\pan108\device\Source\pan_clk.c (101)
        0x000007cc:    d006        ..      BEQ      0x7dc ; CLK_RefClkSrcConfig + 32
;;;102    //    uint32_t tmpreg;
;;;103        CLK->CLK_TOP_CTRL &= ~CLK_TOPCTL_SYS_CLK_SEL_Msk;
;;;104        switch(u32ClkSrc)
        0x000007ce:    1fc1        ..      SUBS     r1,r0,#7
        0x000007d0:    39f9        .9      SUBS     r1,r1,#0xf9
        0x000007d2:    d00b        ..      BEQ      0x7ec ; CLK_RefClkSrcConfig + 48
        0x000007d4:    39ff        .9      SUBS     r1,r1,#0xff
        0x000007d6:    2901        .)      CMP      r1,#1
        0x000007d8:    d117        ..      BNE      0x80a ; CLK_RefClkSrcConfig + 78
        0x000007da:    e019        ..      B        0x810 ; CLK_RefClkSrcConfig + 84
;;;105        {
;;;106            case CLK_SYS_SRCSEL_RCH: 
;;;107                CLK->CLK_TOP_CTRL |= CLK_TOPCTL_RCH_EN_Msk;
        0x000007dc:    6a21        !j      LDR      r1,[r4,#0x20]
        0x000007de:    2202        ."      MOVS     r2,#2
        0x000007e0:    4311        .C      ORRS     r1,r1,r2
        0x000007e2:    6221        !b      STR      r1,[r4,#0x20]
;;;108    #ifdef SYNC_3V_REG_MANUALLY
;;;109                CLK_Wait3vSyncReady();
;;;110    #endif
;;;111    			CLK_WaitClockReady(u32ClkSrc);
        0x000007e4:    f000f860    ..`.    BL       CLK_WaitClockReady ; 0x8a8
;;;112                CLK->CLK_TOP_CTRL |= CLK_SYS_SRCSEL_RCH;
        0x000007e8:    6a20         j      LDR      r0,[r4,#0x20]
;;;113                break;
        0x000007ea:    e00d        ..      B        0x808 ; CLK_RefClkSrcConfig + 76
;;; ..\..\..\..\pan108\device\Include\pan_clk.h
;;;195        CLK->XTH_CTRL |= (CLK_XTHCTL_FSYN_EN_Msk | CLK_XTHCTL_START_FAST_Msk);
        0x000007ec:    6b21        !k      LDR      r1,[r4,#0x30]
        0x000007ee:    2205        ."      MOVS     r2,#5
        0x000007f0:    4311        .C      ORRS     r1,r1,r2
        0x000007f2:    6321        !c      STR      r1,[r4,#0x30]
;;; .\..\..\..\..\pan108\device\Source\pan_clk.c
;;;116                CLK->CLK_TOP_CTRL |= CLK_TOPCTL_XTH_EN_Msk;
        0x000007f4:    6a21        !j      LDR      r1,[r4,#0x20]
        0x000007f6:    2208        ."      MOVS     r2,#8
        0x000007f8:    4311        .C      ORRS     r1,r1,r2
        0x000007fa:    6221        !b      STR      r1,[r4,#0x20]
;;;117    #ifdef SYNC_3V_REG_MANUALLY
;;;118                CLK_Wait3vSyncReady();
;;;119    #endif
;;;120    			CLK_WaitClockReady(u32ClkSrc);
        0x000007fc:    f000f854    ..T.    BL       CLK_WaitClockReady ; 0x8a8
;;;121                CLK->CLK_TOP_CTRL |= CLK_SYS_SRCSEL_XTH;
        0x00000800:    6a20         j      LDR      r0,[r4,#0x20]
        0x00000802:    21ff        .!      MOVS     r1,#0xff
        0x00000804:    3101        .1      ADDS     r1,#1
;;;122                break;
        0x00000806:    e00c        ..      B        0x822 ; CLK_RefClkSrcConfig + 102
        0x00000808:    6220         b      STR      r0,[r4,#0x20]
        0x0000080a:    f001f9e9    ....    BL       SystemCoreClockUpdate ; 0x1be0
        0x0000080e:    bd10        ..      POP      {r4,pc}
;;;123    //        case CLK_SYS_SRCSEL_RCL: 
;;;124    //            CLK->CLK_TOP_CTRL |= (CLK_SYS_SRCSEL_RCL | CLK_TOPCTL_RCL_EN_Msk);
;;;125    //            break;
;;;126    //        case CLK_SYS_SRCSEL_XTL: 
;;;127    //            CLK->CLK_TOP_CTRL |= (CLK_SYS_SRCSEL_XTL | CLK_TOPCTL_XTL_EN_Msk); 
;;;128    //            break;
;;;129            case CLK_SYS_SRCSEL_DPLL: 
;;;130                CLK->CLK_TOP_CTRL |= CLK_TOPCTL_DPLL_EN_Msk;
        0x00000810:    6a21        !j      LDR      r1,[r4,#0x20]
        0x00000812:    2210        ."      MOVS     r2,#0x10
        0x00000814:    4311        .C      ORRS     r1,r1,r2
        0x00000816:    6221        !b      STR      r1,[r4,#0x20]
;;;131    #ifdef SYNC_3V_REG_MANUALLY
;;;132                CLK_Wait3vSyncReady();
;;;133    #endif
;;;134    			CLK_WaitClockReady(u32ClkSrc);
        0x00000818:    f000f846    ..F.    BL       CLK_WaitClockReady ; 0x8a8
;;;135                CLK->CLK_TOP_CTRL |= CLK_SYS_SRCSEL_DPLL;
        0x0000081c:    6a20         j      LDR      r0,[r4,#0x20]
        0x0000081e:    2101        .!      MOVS     r1,#1
        0x00000820:    0249        I.      LSLS     r1,r1,#9
        0x00000822:    4308        .C      ORRS     r0,r0,r1
        0x00000824:    e7f0        ..      B        0x808 ; CLK_RefClkSrcConfig + 76
    $d
        0x00000826:    0000        ..      DCW    0
        0x00000828:    40040000    ...@    DCD    1074003968
    $t
    i.CLK_SYSCLKConfig
    CLK_SYSCLKConfig
;;;136                break;
;;;137            default: break;
;;;138        }
;;;139    
;;;140        //wait xtal clock stable
;;;141    //    CLK_WaitClockReady(u32ClkSrc);
;;;142    	SystemCoreClockUpdate();
;;;143    }
;;;144    /**
;;;145    * @brief  This function set HCLK clock source
;;;146    * @param[in]  u32ClkSrc is HCLK clock source. Including :
;;;147    *                  - \ref CLK_DPLL_REF_CLKSEL_RCH
;;;148    *                  - \ref CLK_DPLL_REF_CLKSEL_XTH
;;;149    * @return None
;;;150    */
;;;151    void CLK_SYSCLKConfig(uint32_t u32ClkSrc,uint32_t freq_out)
;;;152    {
        0x0000082c:    b500        ..      PUSH     {lr}
        0x0000082e:    2302        .#      MOVS     r3,#2
        0x00000830:    4a0d        .J      LDR      r2,[pc,#52] ; [0x868] = 0x40040000
        0x00000832:    2800        .(      CMP      r0,#0
;;; .\..\..\..\..\pan108\device\Source\pan_clk.c (152)
        0x00000834:    d002        ..      BEQ      0x83c ; CLK_SYSCLKConfig + 16
        0x00000836:    2802        .(      CMP      r0,#2
        0x00000838:    d003        ..      BEQ      0x842 ; CLK_SYSCLKConfig + 22
        0x0000083a:    e005        ..      B        0x848 ; CLK_SYSCLKConfig + 28
;;;153        if(u32ClkSrc == CLK_DPLL_REF_CLKSEL_RCH){
;;;154            CLK->DPLL_CTRL &= ~CLK_DPLLCTL_RCLK_SEL_Msk;
        0x0000083c:    6b50        Pk      LDR      r0,[r2,#0x34]
        0x0000083e:    4398        .C      BICS     r0,r0,r3
        0x00000840:    e001        ..      B        0x846 ; CLK_SYSCLKConfig + 26
;;;155        }
;;;156        else if(u32ClkSrc == CLK_DPLL_REF_CLKSEL_XTH){
;;;157            CLK->DPLL_CTRL |= CLK_DPLLCTL_RCLK_SEL_Msk;
        0x00000842:    6b50        Pk      LDR      r0,[r2,#0x34]
        0x00000844:    4318        .C      ORRS     r0,r0,r3
        0x00000846:    6350        Pc      STR      r0,[r2,#0x34]
;;; ..\..\..\..\pan108\device\Include\pan_clk.h
;;;301        CLK->DPLL_CTRL &= ~CLK_DPLLCTL_FREQ_OUT_Msk;
        0x00000848:    6b50        Pk      LDR      r0,[r2,#0x34]
        0x0000084a:    0840        @.      LSRS     r0,r0,#1
        0x0000084c:    0040        @.      LSLS     r0,r0,#1
        0x0000084e:    6350        Pc      STR      r0,[r2,#0x34]
;;;302        CLK->DPLL_CTRL |= freq;
        0x00000850:    6b50        Pk      LDR      r0,[r2,#0x34]
        0x00000852:    4308        .C      ORRS     r0,r0,r1
        0x00000854:    6350        Pc      STR      r0,[r2,#0x34]
;;; .\..\..\..\..\pan108\device\Source\pan_clk.c
;;;163        CLK->CLK_TOP_CTRL |=  CLK_TOPCTL_DPLL_EN_Msk;
        0x00000856:    6a10        .j      LDR      r0,[r2,#0x20]
        0x00000858:    2110        .!      MOVS     r1,#0x10
        0x0000085a:    4308        .C      ORRS     r0,r0,r1
        0x0000085c:    6210        .b      STR      r0,[r2,#0x20]
;;;164    #ifdef SYNC_3V_REG_MANUALLY
;;;165        CLK_Wait3vSyncReady();
;;;166    #endif
;;;167        CLK_WaitClockReady(CLK_SYS_SRCSEL_DPLL);
        0x0000085e:    0148        H.      LSLS     r0,r1,#5
        0x00000860:    f000f822    ..".    BL       CLK_WaitClockReady ; 0x8a8
;;;168    
;;;169        /* Update System Core Clock */
;;;170    //    SystemCoreClockUpdate();
;;;171    }
        0x00000864:    bd00        ..      POP      {pc}
    $d
        0x00000866:    0000        ..      DCW    0
        0x00000868:    40040000    ...@    DCD    1074003968
    $t
    i.CLK_Set3vSyncAuto
    CLK_Set3vSyncAuto
;;;172    
;;;173    
;;;174    
;;;175    //void CLK_SetClkDivide(uint32_t u32ClkSel,uint32_t u32ClkDiv)
;;;176    //{
;;;177    //    switch(u32ClkSel){
;;;178    //        case CLK_DivideSource_Apb1:
;;;179    //            CLK->CLK_TOP_CTRL = (CLK->CLK_TOP_CTRL & (~CLK_TOPCTL_APB1_DIV_Msk))| u32ClkDiv;
;;;180    //            break;
;;;181    //        case CLK_DivideSource_Apb2:
;;;182    //            CLK->CLK_TOP_CTRL = (CLK->CLK_TOP_CTRL & (~CLK_TOPCTL_APB2_DIV_Msk))| u32ClkDiv;
;;;183    //            break;
;;;184    //        default: break;
;;;185    //    }
;;;186    //}
;;;187    /**
;;;188      * @brief  Enables or disables the AHB peripheral clock.
;;;189      * @note   After reset, the peripheral clock (used for registers read/write access)
;;;190      *         is disabled and the application software has to enable this clock before 
;;;191      *         using it. 
;;;192      * @param  CLK_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
;;;193      *          This parameter can be any combination of the following values:
;;;194      *            @arg CLK_AHBPeriph_DMAC   
;;;195      *            @arg CLK_AHBPeriph_GPIO   
;;;196      *            @arg CLK_AHBPeriph_SYSTICK
;;;197      *            @arg CLK_AHBPeriph_APB1   
;;;198      *            @arg CLK_AHBPeriph_APB2   
;;;199      *            @arg CLK_AHBPeriph_AHB    
;;;200      *            @arg CLK_AHBPeriph_RF 
;;;201      *            @arg CLK_AHBPeriph_All
;;;202      * @param  NewState    : new state of the specified peripheral clock.
;;;203      *          This parameter can be: ENABLE or DISABLE.
;;;204      * @retval None
;;;205      */
;;;206    void CLK_AHBPeriphClockCmd(uint32_t CLK_AHBPeriph, FunctionalState NewState)
;;;207    {
;;;208        (NewState != DISABLE)?(CLK->AHB_CLK_CTRL |= CLK_AHBPeriph):(CLK->AHB_CLK_CTRL &= ~CLK_AHBPeriph);
;;;209    }
;;;210    
;;;211    /**
;;;212      * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
;;;213      * @note   After reset, the peripheral clock (used for registers read/write access)
;;;214      *         is disabled and the application software has to enable this clock before 
;;;215      *         using it. 
;;;216      * @param  CLK_APB1Periph: specifies the APB1 peripheral to gates its clock.
;;;217      *          This parameter can be any combination of the following values:
;;;218      *            @arg CLK_APB1Periph_I2C0              
;;;219      *            @arg CLK_APB1Periph_SPI0       
;;;220      *            @arg CLK_APB1Periph_UART0     
;;;221      *            @arg CLK_APB1Periph_PWM01    
;;;222      *            @arg CLK_APB1Periph_PWM23      
;;;223      *            @arg CLK_APB1Periph_PWM45  
;;;224      *            @arg CLK_APB1Periph_PWM67   
;;;225      *            @arg CLK_APB1Periph_PWMEN    
;;;226      *            @arg CLK_APB1Periph_ADC    
;;;227      *            @arg CLK_APB1Periph_WDT   
;;;228      *            @arg CLK_APB1Periph_WWDT    
;;;229      *            @arg CLK_APB1Periph_TMR0    
;;;230      *            @arg CLK_APB1Periph_All
;;;231      * @param  NewState  : new state of the specified peripheral clock.
;;;232      *          This parameter can be: ENABLE or DISABLE.
;;;233      * @retval None
;;;234      */
;;;235    void CLK_APB1PeriphClockCmd(uint32_t CLK_APB1Periph, FunctionalState NewState)
;;;236    {
;;;237      (NewState != DISABLE)?(CLK->APB1_CLK_CTRL |= CLK_APB1Periph):(CLK->APB1_CLK_CTRL &= ~CLK_APB1Periph);
;;;238    }
;;;239    
;;;240    /**
;;;241      * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
;;;242      * @note   After reset, the peripheral clock (used for registers read/write access)
;;;243      *         is disabled and the application software has to enable this clock before 
;;;244      *         using it.
;;;245      * @param  CLK_APB2Periph: specifies the APB2 peripheral to gates its clock.
;;;246      *          This parameter can be any combination of the following values:
;;;247      *            @arg CLK_APB2Periph_SPI1 
;;;248      *            @arg CLK_APB2Periph_UART1
;;;249      *            @arg CLK_APB2Periph_TMR1 
;;;250      *            @arg CLK_APB2Periph_TMR2 
;;;251      *            @arg CLK_APB2Periph_All  
;;;252      * @param  NewState: new state of the specified peripheral clock.
;;;253      *          This parameter can be: ENABLE or DISABLE.
;;;254      * @retval None
;;;255      */
;;;256    void CLK_APB2PeriphClockCmd(uint32_t CLK_APB2Periph, FunctionalState NewState)
;;;257    {
;;;258        (NewState != DISABLE)?(CLK->APB2_CLK_CTRL |= CLK_APB2Periph):(CLK->APB2_CLK_CTRL &= ~CLK_APB2Periph); 
;;;259    }
;;;260    
;;;261     /**
;;;262       * @brief  This function check selected clock source status
;;;263       * @param[in]  u32ClkMask is selected clock source. Including
;;;264       *                  - \ref CLK_RCL_SELECT
;;;265       *                  - \ref CLK_RCH_SELECT
;;;266       *                  - \ref CLK_XTL_SELECT
;;;267       *                  - \ref CLK_XTH_SELECT
;;;268       *                  - \ref CLK_DPLL_SELECT
;;;269       * @return   0  clock is not stable
;;;270       *           1  clock is stable
;;;271       *
;;;272       * @details  To wait for clock ready by specified CLKSTATUS bit or timeout (~5ms)
;;;273       */
;;;274    uint32_t CLK_WaitClockReady(uint32_t u32ClkMask)
;;;275    {
;;;276        int32_t i32TimeOutCnt = 2160000;
;;;277        uint32_t u32ClkTmp = 0;
;;;278        while(1) 
;;;279        {
;;;280    		switch(u32ClkMask){
;;;281    				case CLK_SYS_SRCSEL_RCH :    u32ClkTmp = CLK->RCH_CTRL; break;
;;;282    				case CLK_SYS_SRCSEL_XTH :    u32ClkTmp = CLK->XTH_CTRL; break;
;;;283    //				case CLK_SYS_SRCSEL_RCL :    u32ClkTmp = CLK->RCL_CTRL; break;
;;;284    //				case CLK_SYS_SRCSEL_XTL :    u32ClkTmp = CLK->XTL_CTRL; break;
;;;285    				case CLK_SYS_SRCSEL_DPLL:    u32ClkTmp = CLK->DPLL_CTRL; break;
;;;286    				default: break;
;;;287    		}		
;;;288            if((u32ClkTmp & CLK_STABLE_STATUS_Msk) != CLK_STABLE_STATUS_Msk){
;;;289                if(i32TimeOutCnt-- <= 0)
;;;290                 return 0;
;;;291            }else{
;;;292                break;
;;;293            }  
;;;294        }
;;;295        return 1;
;;;296    }
;;;297     /**
;;;298       * @brief  This function wait sync 3v clock locale stable
;;;299       * @param[in]  none
;;;300       * @return   0  clock sync is not stable
;;;301       *           1  clock sync is stable
;;;302       *
;;;303       * @details  To wait for clock ready by specified CLKSTATUS bit or timeout (~5ms)
;;;304       */
;;;305     uint32_t CLK_Wait3vSyncReady(void)
;;;306     {
;;;307         int32_t i32TimeOutCnt = 2160000;
;;;308    
;;;309        ANA->LP_REG_SYNC |= ANAC_LP_REG_SYNC_3V_Msk;
;;;310        while(ANA->LP_REG_SYNC & (ANAC_LP_REG_SYNC_3V_Msk | ANAC_LP_REG_SYNC_STS_Msk))
;;;311        {
;;;312             if(i32TimeOutCnt-- <= 0)
;;;313                 return 0;
;;;314        }
;;;315    
;;;316         return 1;
;;;317     }
;;;318    /**
;;;319    * @brief  This function wait sync 3v clock locale stable by hardware
;;;320    * @param[in]  none
;;;321    * @return   none
;;;322    */
;;;323    void CLK_Set3vSyncAuto(void)
;;;324    {
;;;325        ANA->LP_REG_SYNC |= ANAC_LP_REG_AUTOSYNC_Msk;
        0x0000086c:    4802        .H      LDR      r0,[pc,#8] ; [0x878] = 0x40070000
        0x0000086e:    6801        .h      LDR      r1,[r0,#0]
        0x00000870:    2204        ."      MOVS     r2,#4
        0x00000872:    4311        .C      ORRS     r1,r1,r2
        0x00000874:    6001        .`      STR      r1,[r0,#0]
;;;326    }
        0x00000876:    4770        pG      BX       lr
    $d
        0x00000878:    40070000    ...@    DCD    1074200576
    $t
    i.CLK_Wait3vSyncReady
    CLK_Wait3vSyncReady
;;; .\..\..\..\..\pan108\device\Source\pan_clk.c (309)
        0x0000087c:    4809        .H      LDR      r0,[pc,#36] ; [0x8a4] = 0x40070000
        0x0000087e:    4908        .I      LDR      r1,[pc,#32] ; [0x8a0] = 0x20f580
        0x00000880:    6802        .h      LDR      r2,[r0,#0]
        0x00000882:    2301        .#      MOVS     r3,#1
        0x00000884:    431a        .C      ORRS     r2,r2,r3
        0x00000886:    6002        .`      STR      r2,[r0,#0]
;;; .\..\..\..\..\pan108\device\Source\pan_clk.c (306)
        0x00000888:    e005        ..      B        0x896 ; CLK_Wait3vSyncReady + 26
        0x0000088a:    460a        .F      MOV      r2,r1
        0x0000088c:    1e49        I.      SUBS     r1,r1,#1
        0x0000088e:    2a00        .*      CMP      r2,#0
        0x00000890:    dc01        ..      BGT      0x896 ; CLK_Wait3vSyncReady + 26
        0x00000892:    2000        .       MOVS     r0,#0
        0x00000894:    4770        pG      BX       lr
;;;307         int32_t i32TimeOutCnt = 2160000;
;;;308    
;;;309        ANA->LP_REG_SYNC |= ANAC_LP_REG_SYNC_3V_Msk;
;;;310        while(ANA->LP_REG_SYNC & (ANAC_LP_REG_SYNC_3V_Msk | ANAC_LP_REG_SYNC_STS_Msk))
        0x00000896:    6802        .h      LDR      r2,[r0,#0]
        0x00000898:    0792        ..      LSLS     r2,r2,#30
        0x0000089a:    d1f6        ..      BNE      0x88a ; CLK_Wait3vSyncReady + 14
;;;311        {
;;;312             if(i32TimeOutCnt-- <= 0)
;;;313                 return 0;
;;;314        }
;;;315    
;;;316         return 1;
        0x0000089c:    2001        .       MOVS     r0,#1
;;;317     }
        0x0000089e:    4770        pG      BX       lr
    $d
        0x000008a0:    0020f580    .. .    DCD    2160000
        0x000008a4:    40070000    ...@    DCD    1074200576
    $t
    i.CLK_WaitClockReady
    CLK_WaitClockReady
;;; .\..\..\..\..\pan108\device\Source\pan_clk.c (275)
        0x000008a8:    b510        ..      PUSH     {r4,lr}
;;;276        int32_t i32TimeOutCnt = 2160000;
        0x000008aa:    4c0d        .L      LDR      r4,[pc,#52] ; [0x8e0] = 0x20f580
        0x000008ac:    4b0d        .K      LDR      r3,[pc,#52] ; [0x8e4] = 0x40040000
;;;277        uint32_t u32ClkTmp = 0;
        0x000008ae:    2100        .!      MOVS     r1,#0
;;;278        while(1) 
;;;279        {
;;;280    		switch(u32ClkMask){
        0x000008b0:    2800        .(      CMP      r0,#0
        0x000008b2:    d006        ..      BEQ      0x8c2 ; CLK_WaitClockReady + 26
        0x000008b4:    1fc2        ..      SUBS     r2,r0,#7
        0x000008b6:    3af9        .:      SUBS     r2,r2,#0xf9
        0x000008b8:    d005        ..      BEQ      0x8c6 ; CLK_WaitClockReady + 30
        0x000008ba:    3aff        .:      SUBS     r2,r2,#0xff
        0x000008bc:    2a01        .*      CMP      r2,#1
        0x000008be:    d105        ..      BNE      0x8cc ; CLK_WaitClockReady + 36
        0x000008c0:    e003        ..      B        0x8ca ; CLK_WaitClockReady + 34
;;;281    				case CLK_SYS_SRCSEL_RCH :    u32ClkTmp = CLK->RCH_CTRL; break;
        0x000008c2:    6a99        .j      LDR      r1,[r3,#0x28]
        0x000008c4:    e002        ..      B        0x8cc ; CLK_WaitClockReady + 36
;;;282    				case CLK_SYS_SRCSEL_XTH :    u32ClkTmp = CLK->XTH_CTRL; break;
        0x000008c6:    6b19        .k      LDR      r1,[r3,#0x30]
        0x000008c8:    e000        ..      B        0x8cc ; CLK_WaitClockReady + 36
;;;283    //				case CLK_SYS_SRCSEL_RCL :    u32ClkTmp = CLK->RCL_CTRL; break;
;;;284    //				case CLK_SYS_SRCSEL_XTL :    u32ClkTmp = CLK->XTL_CTRL; break;
;;;285    				case CLK_SYS_SRCSEL_DPLL:    u32ClkTmp = CLK->DPLL_CTRL; break;
        0x000008ca:    6b59        Yk      LDR      r1,[r3,#0x34]
;;;286    				default: break;
;;;287    		}		
;;;288            if((u32ClkTmp & CLK_STABLE_STATUS_Msk) != CLK_STABLE_STATUS_Msk){
        0x000008cc:    01ca        ..      LSLS     r2,r1,#7
        0x000008ce:    d405        ..      BMI      0x8dc ; CLK_WaitClockReady + 52
;;;289                if(i32TimeOutCnt-- <= 0)
        0x000008d0:    4622        "F      MOV      r2,r4
        0x000008d2:    1e64        d.      SUBS     r4,r4,#1
        0x000008d4:    2a00        .*      CMP      r2,#0
        0x000008d6:    dceb        ..      BGT      0x8b0 ; CLK_WaitClockReady + 8
;;;290                 return 0;
        0x000008d8:    2000        .       MOVS     r0,#0
        0x000008da:    bd10        ..      POP      {r4,pc}
;;;291            }else{
;;;292                break;
;;;293            }  
;;;294        }
;;;295        return 1;
        0x000008dc:    2001        .       MOVS     r0,#1
;;;296    }
        0x000008de:    bd10        ..      POP      {r4,pc}
    $d
        0x000008e0:    0020f580    .. .    DCD    2160000
        0x000008e4:    40040000    ...@    DCD    1074003968
    $t
    i.FMC_EnterEnhanceMode
    FMC_EnterEnhanceMode
;;; .\..\..\..\..\pan108\peripheral\src\pan_fmc.c
;;;971        if (mode == FLASH_X2_MODE)
        0x000008e8:    2901        .)      CMP      r1,#1
;;; .\..\..\..\..\pan108\peripheral\src\pan_fmc.c (970)
        0x000008ea:    d002        ..      BEQ      0x8f2 ; FMC_EnterEnhanceMode + 10
        0x000008ec:    2902        .)      CMP      r1,#2
        0x000008ee:    d005        ..      BEQ      0x8fc ; FMC_EnterEnhanceMode + 20
        0x000008f0:    e009        ..      B        0x906 ; FMC_EnterEnhanceMode + 30
;;;971        if (mode == FLASH_X2_MODE)
;;;972        {
;;;973            fmc->X_FL_WD[0]   = 0xBB;
        0x000008f2:    21bb        .!      MOVS     r1,#0xbb
        0x000008f4:    7181        .q      STRB     r1,[r0,#6]
;;;974            fmc->X_FL_CTL = (1<<8) | (5<<0);
        0x000008f6:    21ff        .!      MOVS     r1,#0xff
        0x000008f8:    3106        .1      ADDS     r1,#6
        0x000008fa:    e003        ..      B        0x904 ; FMC_EnterEnhanceMode + 28
;;;975        }
;;;976        else if (mode == FLASH_X4_MODE)
;;;977        {
;;;978            fmc->X_FL_WD[0]   = 0xEB;
        0x000008fc:    21eb        .!      MOVS     r1,#0xeb
        0x000008fe:    7181        .q      STRB     r1,[r0,#6]
;;;979            fmc->X_FL_CTL = (1<<8) | (7<<0);
        0x00000900:    21ff        .!      MOVS     r1,#0xff
        0x00000902:    3108        .1      ADDS     r1,r1,#8
        0x00000904:    6001        .`      STR      r1,[r0,#0]
;;;980        }
;;;981    
;;;982        fmc->X_FL_WD[4]   = 0xAF;  //8'b10_10_1111 for both GD & PUYA flash
        0x00000906:    21af        .!      MOVS     r1,#0xaf
        0x00000908:    7281        .r      STRB     r1,[r0,#0xa]
;;;983    	fmc->X_FL_X_MODE |= (0x1 << 18);
        0x0000090a:    68c1        .h      LDR      r1,[r0,#0xc]
        0x0000090c:    2201        ."      MOVS     r2,#1
        0x0000090e:    0492        ..      LSLS     r2,r2,#18
        0x00000910:    4311        .C      ORRS     r1,r1,r2
        0x00000912:    60c1        .`      STR      r1,[r0,#0xc]
;;;984    	fmc->X_FL_TRIG = CMD_TRIG;
        0x00000914:    2101        .!      MOVS     r1,#1
        0x00000916:    7101        .q      STRB     r1,[r0,#4]
;;;985    	while(fmc->X_FL_TRIG){};
        0x00000918:    7901        .y      LDRB     r1,[r0,#4]
        0x0000091a:    2900        .)      CMP      r1,#0
        0x0000091c:    d1fc        ..      BNE      0x918 ; FMC_EnterEnhanceMode + 48
;;;986    }
        0x0000091e:    4770        pG      BX       lr
    i.FMC_ExitEnhanceMode
    FMC_ExitEnhanceMode
        0x00000920:    21ff        .!      MOVS     r1,#0xff
        0x00000922:    7181        .q      STRB     r1,[r0,#6]
;;; .\..\..\..\..\pan108\peripheral\src\pan_fmc.c (958)
        0x00000924:    71c1        .q      STRB     r1,[r0,#7]
;;;959    	fmc->X_FL_WD[2] = 0xff;
        0x00000926:    7201        .r      STRB     r1,[r0,#8]
;;;960    	fmc->X_FL_WD[3] = 0xff;
        0x00000928:    7241        Ar      STRB     r1,[r0,#9]
;;;961        fmc->X_FL_CTL = (0<<8) | (4<<0);
        0x0000092a:    2104        .!      MOVS     r1,#4
        0x0000092c:    6001        .`      STR      r1,[r0,#0]
;;;962        fmc->X_FL_X_MODE &= ~(1 << 18);
        0x0000092e:    68c1        .h      LDR      r1,[r0,#0xc]
        0x00000930:    2201        ."      MOVS     r2,#1
        0x00000932:    0492        ..      LSLS     r2,r2,#18
        0x00000934:    4391        .C      BICS     r1,r1,r2
        0x00000936:    60c1        .`      STR      r1,[r0,#0xc]
;;;963    	fmc->X_FL_TRIG = 0X01;
        0x00000938:    2101        .!      MOVS     r1,#1
        0x0000093a:    7101        .q      STRB     r1,[r0,#4]
;;;964    	while(fmc->X_FL_TRIG){};
        0x0000093c:    7901        .y      LDRB     r1,[r0,#4]
        0x0000093e:    2900        .)      CMP      r1,#0
        0x00000940:    d1fc        ..      BNE      0x93c ; FMC_ExitEnhanceMode + 28
;;;965    }
        0x00000942:    4770        pG      BX       lr
    i.FMC_ReadStatusReg
    FMC_ReadStatusReg
        0x00000944:    22ff        ."      MOVS     r2,#0xff
        0x00000946:    3202        .2      ADDS     r2,#2
        0x00000948:    6002        .`      STR      r2,[r0,#0]
;;; .\..\..\..\..\pan108\peripheral\src\pan_fmc.c (74)
        0x0000094a:    7181        .q      STRB     r1,[r0,#6]
;;;75     	fmc->X_FL_TRIG = CMD_TRIG;
        0x0000094c:    2101        .!      MOVS     r1,#1
        0x0000094e:    7101        .q      STRB     r1,[r0,#4]
;;;76     	while(fmc->X_FL_TRIG){};
        0x00000950:    7901        .y      LDRB     r1,[r0,#4]
        0x00000952:    2900        .)      CMP      r1,#0
        0x00000954:    d1fc        ..      BNE      0x950 ; FMC_ReadStatusReg + 12
;;;77     
;;;78     	return FLCTL_BUFF->X_FL_BUFFER[0];
        0x00000956:    4801        .H      LDR      r0,[pc,#4] ; [0x95c] = 0x40050400
        0x00000958:    7800        .x      LDRB     r0,[r0,#0]
;;;79     }
        0x0000095a:    4770        pG      BX       lr
    $d
        0x0000095c:    40050400    ...@    DCD    1074070528
    $t
    i.FMC_SetFlashMode
    FMC_SetFlashMode
;;;80     
;;;81     /**
;;;82       * @brief  This function is used to enable write function,
;;;83       * @param  fmc: where fmc is a flash peripheral.
;;;84       * @retval enable or not
;;;85       */
;;;86     unsigned char FMC_WriteEnable(FLCTL_T *fmc)
;;;87     {
;;;88     	fmc->X_FL_CTL = (0<<8) | (1<<0);
;;;89     	fmc->X_FL_WD[0] = CMD_WRITE_ENABLE;
;;;90     	fmc->X_FL_TRIG = CMD_TRIG;
;;;91     	while(fmc->X_FL_TRIG){};
;;;92     
;;;93         return 1;
;;;94     }
;;;95     /**
;;;96       * @brief  This is a internal function used to erase flash,
;;;97       * @param  fmc: where fmc is a flash peripheral.
;;;98       * @param  Addr: where addr is a erase start address.  
;;;99       * @param  cmd: where cmd can be CMD_ERASE_PAGE
;;;100    	*							  CMD_ERASE_SECTOR
;;;101    	*							  CMD_ERASE_32K
;;;102    	*							  CMD_ERASE_64K
;;;103    	*							  CMD_ERASE_CHIP
;;;104      * @retval 0: Success
;;;105      * @retval -1: Fail
;;;106      */
;;;107    static int FMC_Erase(FLCTL_T *fmc,unsigned int Addr,unsigned char cmd)
;;;108    {
;;;109    	unsigned char offset = 0;
;;;110    	unsigned char bytes_num_w;
;;;111    
;;;112    	FMC_WriteEnable(fmc);
;;;113    
;;;114    	if(cmd != CMD_ERASE_CHIP)
;;;115    	// - it's page/sector/block erase
;;;116    		bytes_num_w = 0x04;
;;;117    	else
;;;118    	// - it's chip erase
;;;119    		bytes_num_w = 0x01;
;;;120    			
;;;121    	fmc->X_FL_CTL = (0<<8) | (bytes_num_w<<0);
;;;122    	fmc->X_FL_WD[offset++] = cmd;
;;;123    
;;;124    	fmc->X_FL_WD[offset++] = (Addr & 0x00ff0000)>>16;
;;;125    	fmc->X_FL_WD[offset++] = (Addr & 0x0000ff00)>>8;
;;;126    	fmc->X_FL_WD[offset++] = Addr & 0xff;
;;;127    	fmc->X_FL_X_MODE |= (0x01<<Long_Time_Op_Pos);
;;;128    	fmc->X_FL_TRIG = CMD_TRIG;
;;;129    	while(fmc->X_FL_TRIG){}
;;;130    
;;;131    	while(FMC_ReadStatusReg(fmc,CMD_READ_STATUS_L) & Write_In_Process_Msk) {}
;;;132    	return 0;
;;;133    }
;;;134    
;;;135    /**
;;;136      * @brief Erase a 4KB Sector in Flash Memory.
;;;137      *
;;;138      * This function is used to erase a 4KB flash sector
;;;139      * in flash code area.
;;;140      *
;;;141      * @param fmc: where fmc is a flash peripheral.
;;;142      * @param adr: where addr is a erase start address.
;;;143      * @retval 0: Success.
;;;144      * @retval -1: Fail.
;;;145      */
;;;146    int FMC_EraseSector(FLCTL_T *fmc,unsigned long addr)
;;;147    {
;;;148        if (addr >= FMC_GetFlashCodeAreaSize(fmc)) {
;;;149            return -1;
;;;150        }
;;;151        return FMC_Erase(fmc,addr,CMD_ERASE_SECTOR);
;;;152    }
;;;153    
;;;154    /**
;;;155      * @brief Erase a 32KB Block in Flash Memory.
;;;156      *
;;;157      * This function is used to erase a 32KB flash block
;;;158      * in flash code area.
;;;159      *
;;;160      * @note The 1st 28KB flash block is not allowed to be erased
;;;161      * as the Info Area resides in this physical 32KB flash block.
;;;162      * @note The 32KB flash block start address is 0x7000, 0xF000,
;;;163      * 0x17000, 0x1F000, 0x27000, 0x2F000, ...
;;;164      *
;;;165      * @param fmc: where fmc is a flash peripheral.
;;;166      * @param adr: where addr is a erase start address.
;;;167      * @retval 0: Success.
;;;168      * @retval -1: Fail.
;;;169      */
;;;170    int FMC_EraseBlock32k(FLCTL_T *fmc,unsigned long addr)
;;;171    {
;;;172        if ((addr >= FMC_GetFlashCodeAreaSize(fmc))
;;;173            || (addr < 0x7000)) {
;;;174            return -1;
;;;175        }
;;;176        return FMC_Erase(fmc,addr,CMD_ERASE_32K);
;;;177    }
;;;178    
;;;179    /**
;;;180      * @brief Erase a 64KB Block in Flash Memory.
;;;181      *
;;;182      * This function is used to erase a 64KB flash block
;;;183      * in flash code area.
;;;184      *
;;;185      * @note The 1st 60KB flash block is not allowed to be erased
;;;186      * as the Info Area resides in this physical 64KB flash block.
;;;187      * @note The 64KB flash block start address is 0xF000, 0x1F000,
;;;188      * 0x2F000, 0x3F000, 0x4F000, 0x5F000, ...
;;;189      *
;;;190      * @param fmc: where fmc is a flash peripheral.
;;;191      * @param adr: where addr is a erase start address.
;;;192      * @retval 0: Success.
;;;193      * @retval -1: Fail.
;;;194      */
;;;195    int FMC_EraseBlock64k(FLCTL_T *fmc,unsigned long addr)
;;;196    {
;;;197        if ((addr >= FMC_GetFlashCodeAreaSize(fmc))
;;;198            || (addr < 0xF000)) {
;;;199            return -1;
;;;200        }
;;;201        return FMC_Erase(fmc,addr,CMD_ERASE_64K);
;;;202    }
;;;203    
;;;204    /**
;;;205      * @brief Erase the whole flash memory.
;;;206      *
;;;207      * This function is used to erase all data in flash, include
;;;208      * Code Area and Info Area.
;;;209      *
;;;210      * @note This API should only be used when you really know what
;;;211      * you are doing.
;;;212      *
;;;213      * @param fmc: where fmc is a flash peripheral.
;;;214      * @retval 0: Success.
;;;215      * @retval -1: Fail.
;;;216      */
;;;217    int FMC_EraseChip(FLCTL_T *fmc)
;;;218    {
;;;219        return FMC_Erase(fmc,0x0,CMD_ERASE_CHIP);
;;;220    }
;;;221    
;;;222    static void find_special_chunk_in_range(size_t chunk_pattern, uint32_t range_start_sector_idx, uint16_t range_sector_num,
;;;223                                            uint32_t *chunk_start_sector_idx, uint16_t *chunk_sector_num)
;;;224    {
;;;225        size_t remainder = range_start_sector_idx % chunk_pattern;
;;;226    
;;;227        for (size_t sector_idx = remainder ? (range_start_sector_idx - remainder + chunk_pattern) : range_start_sector_idx;
;;;228                sector_idx <= range_start_sector_idx + range_sector_num;
;;;229                sector_idx += chunk_pattern) {
;;;230            if (*chunk_start_sector_idx == 0) {
;;;231                *chunk_start_sector_idx = (sector_idx == 0) ? chunk_pattern : sector_idx;    //Found chunk start position (and should not be 1st block)
;;;232            } else {
;;;233                *chunk_sector_num += chunk_pattern; //Found multiple expected chunk
;;;234            }
;;;235        }
;;;236    }
;;;237    
;;;238    /**
;;;239      * @brief Erase specific data in flash code area.
;;;240      *
;;;241      * This function is used to erase specific data in flash Code
;;;242      * Area.
;;;243      *
;;;244      * @note This API is the most recommended function used to erase
;;;245      * data in flash code area.
;;;246      *
;;;247      * @param fmc: where fmc is a flash peripheral.
;;;248      * @param addr: start address to erase, should be 4KB aligned.
;;;249      * @param len: length to erase in bytes.
;;;250      * @retval 0: Success.
;;;251      * @retval -1: Fail.
;;;252      */
;;;253    int FMC_EraseCodeArea(FLCTL_T *fmc, uint32_t addr, uint32_t len)
;;;254    {
;;;255        uint32_t block_64k_start_sector_idx = 0;
;;;256        uint16_t block_64k_sector_num = 0;
;;;257        uint32_t block_32k_start_sector_idx = 0;
;;;258        uint16_t block_32k_sector_num = 0;
;;;259    
;;;260        uint32_t start_phy_sector_idx = addr / SECTOR_SIZE + 1;
;;;261        uint16_t sector_num = len / SECTOR_SIZE + (len % SECTOR_SIZE ? 1 : 0);
;;;262        uint16_t total_phy_sector_num = FMC_GetFlashCodeAreaSize(fmc) / SECTOR_SIZE + 1;
;;;263    
;;;264        // Check if erase start address and len are 4KB aligned and size not out of flash range
;;;265        if ((addr % SECTOR_SIZE != 0) || ((start_phy_sector_idx + sector_num) > total_phy_sector_num)) {
;;;266            return -1;
;;;267        }
;;;268    
;;;269        // Fine 32K blocks from the initial data chunk
;;;270        find_special_chunk_in_range(8, start_phy_sector_idx, sector_num, &block_32k_start_sector_idx, &block_32k_sector_num);
;;;271    
;;;272        if (block_32k_sector_num == 0) { // No 32k-block found
;;;273            // Do only sector erase
;;;274            for (size_t i = 0; i < sector_num; i++) {
;;;275                FMC_EraseSector(FLCTL, (start_phy_sector_idx + i - 1) * SECTOR_SIZE);
;;;276            }
;;;277        } else { // Found at least 1 32k-block
;;;278            // Do sector erase for leading sectors
;;;279            for (size_t i = 0; i < block_32k_start_sector_idx - start_phy_sector_idx; i++) {
;;;280                FMC_EraseSector(FLCTL, (start_phy_sector_idx + i - 1) * SECTOR_SIZE);
;;;281            }
;;;282            // Do sector erase for trailing sectors
;;;283            for (size_t i = 0; i < start_phy_sector_idx + sector_num - block_32k_start_sector_idx - block_32k_sector_num; i++) {
;;;284                FMC_EraseSector(FLCTL, (block_32k_start_sector_idx + block_32k_sector_num + i - 1) * SECTOR_SIZE);
;;;285            }
;;;286    
;;;287            // Find 64K blocks from the 32K-block chunk if there are
;;;288            find_special_chunk_in_range(16, block_32k_start_sector_idx, block_32k_sector_num, &block_64k_start_sector_idx, &block_64k_sector_num);
;;;289    
;;;290            if (block_64k_sector_num == 0) { // No 64k-block found
;;;291                // Do only block-32k erase
;;;292                for (size_t i = 0; i < block_32k_sector_num; i += 8) {
;;;293                    FMC_EraseBlock32k(FLCTL, (block_32k_start_sector_idx + i - 1) * SECTOR_SIZE);
;;;294                }
;;;295            } else { // Found at least 1 64k-block
;;;296                // Do block-32k erase for leading sectors if there are
;;;297                if (block_32k_start_sector_idx % 16 != 0) {
;;;298                    FMC_EraseBlock32k(FLCTL, (block_32k_start_sector_idx - 1) * SECTOR_SIZE);
;;;299                }
;;;300                // Do block-32k erase for trailing sectors if there are
;;;301                if ((block_32k_start_sector_idx + block_32k_sector_num) % 16 != 0) {
;;;302                    FMC_EraseBlock32k(FLCTL, (block_64k_start_sector_idx + block_64k_sector_num - 1) * SECTOR_SIZE);
;;;303                }
;;;304                // Do block_64k erase
;;;305                for (size_t i = 0; i < block_64k_sector_num; i += 16) {
;;;306                    FMC_EraseBlock64k(FLCTL, (block_64k_start_sector_idx + i - 1) * SECTOR_SIZE);
;;;307                }
;;;308            }
;;;309        }
;;;310    
;;;311        return 0;
;;;312    }
;;;313    
;;;314    /**
;;;315      * @brief  This function is used to write status,
;;;316      * The Read Status Register can be read at any time
;;;317      * @param  fmc: where fmc is a flash peripheral.
;;;318      * @param  ops: where ops can be OPS_WR_STU_REG_ALL
;;;319      *                               OPS_WR_STU_REG_NOR
;;;320      * @param  buf: where buf is write value
;;;321      * @retval none
;;;322      */
;;;323    void FMC_WriteStatusReg(FLCTL_T *fmc,unsigned char ops,unsigned int buf)
;;;324    {
;;;325    	unsigned char offset =0;
;;;326    	unsigned char bytes_num_w;
;;;327    
;;;328    	if(FMC_WriteEnable(fmc) == 0)
;;;329    		return;	
;;;330    
;;;331    	if(ops == OPS_WR_STU_REG_ALL)
;;;332    	// - write staus [15:0]
;;;333    		bytes_num_w = 0x03; 
;;;334    	else
;;;335    	// - write staus [ 7:0]
;;;336    		bytes_num_w = 0x02;
;;;337    
;;;338        fmc->X_FL_CONFIG &= ~BIT2;  //clear tx_address_transaction bit
;;;339    	
;;;340    	fmc->X_FL_CTL = (0<<8) | (bytes_num_w<<0);
;;;341    	fmc->X_FL_WD[offset++] = CMD_WRITE_STATUS;
;;;342    	fmc->X_FL_WD[offset++] = buf&0xff;
;;;343    	fmc->X_FL_WD[offset++] = (buf>>8)&0xff;
;;;344    	fmc->X_FL_X_MODE |= (0x01<<Long_Time_Op_Pos);
;;;345    	fmc->X_FL_TRIG = CMD_TRIG;
;;;346    	while(fmc->X_FL_TRIG){};
;;;347    
;;;348        fmc->X_FL_CONFIG |= BIT2;  //reset tx_address_transaction bit
;;;349    
;;;350    //	while(FMC_ReadStatusReg(fmc,CMD_READ_STATUS_L) & Write_In_Process_Msk);
;;;351    }
;;;352    /**
;;;353      * @brief  This function is used to read flash,
;;;354      * @param  fmc: where fmc is a flash peripheral.
;;;355    	* @param  Addr: where Addr is start address to read
;;;356    	* @param  cmd: where cmd can be CMD_FAST_READ or CMD_NOR_READ
;;;357      * @retval 4byte data
;;;358      */
;;;359    unsigned int FMC_ReadWord(FLCTL_T *fmc,unsigned int Addr, unsigned char cmd)
;;;360    {
;;;361    //	unsigned char offset =0;
;;;362    	unsigned char bytes_num_w;
;;;363    
;;;364    	if(cmd == CMD_FAST_READ || cmd == CMD_QREAD || cmd == CMD_2READ || cmd == CMD_DREAD)
;;;365    		bytes_num_w = 0x05; 
;;;366    	else if (cmd == CMD_4READ)
;;;367            bytes_num_w = 0x07;
;;;368        else if (cmd == CMD_NORM_READ)
;;;369    		bytes_num_w = 0x04;
;;;370        else
;;;371            bytes_num_w = 0x04;
;;;372    
;;;373        fmc->X_FL_CTL = (4<<8) | (bytes_num_w<<0);
;;;374    	fmc->X_FL_WD[0] = cmd;
;;;375    	fmc->X_FL_WD[1] = (Addr & 0x00ff0000)>>16;
;;;376    	fmc->X_FL_WD[2] = (Addr & 0x0000ff00)>>8;
;;;377    	fmc->X_FL_WD[3] = Addr & 0xff;
;;;378        fmc->X_FL_WD[4] = 0xff;
;;;379        fmc->X_FL_WD[5] = 0xff;
;;;380    	fmc->X_FL_TRIG = CMD_TRIG;
;;;381    	while(fmc->X_FL_TRIG){};
;;;382    	
;;;383    	return *((__I uint32_t*)FLCTL_BUFF->X_FL_BUFFER);
;;;384    }
;;;385    /**
;;;386      * @brief  This function is used to read flash,
;;;387      * @param  fmc: where fmc is a flash peripheral.
;;;388    	* @param  Addr: where Addr is start address to read
;;;389    	* @param  cmd: where cmd can be CMD_FAST_READ or CMD_NOR_READ
;;;390      * @retval 1byte data
;;;391      */
;;;392    unsigned char FMC_ReadByte(FLCTL_T *fmc,unsigned int Addr,unsigned char cmd)
;;;393    {
;;;394    	unsigned char bytes_num_w;
;;;395    
;;;396    	if(cmd == CMD_FAST_READ || cmd == CMD_QREAD || cmd == CMD_2READ || cmd == CMD_DREAD)
;;;397    		bytes_num_w = 0x05; 
;;;398    	else if (cmd == CMD_4READ)
;;;399            bytes_num_w = 0x07;
;;;400        else if (cmd == CMD_NORM_READ)
;;;401    		bytes_num_w = 0x04;
;;;402        else
;;;403    		bytes_num_w = 0x04;
;;;404    
;;;405    	fmc->X_FL_CTL = (1<<8) | (bytes_num_w<<0);
;;;406    	fmc->X_FL_WD[0] = cmd;
;;;407    	fmc->X_FL_WD[1] = (Addr & 0x00ff0000)>>16;
;;;408    	fmc->X_FL_WD[2] = (Addr & 0x0000ff00)>>8;
;;;409    	fmc->X_FL_WD[3] = Addr & 0xff;
;;;410        fmc->X_FL_WD[4] = 0xff;
;;;411        fmc->X_FL_WD[5] = 0xff;
;;;412    	
;;;413    	fmc->X_FL_TRIG = CMD_TRIG;
;;;414    	while(fmc->X_FL_TRIG){};
;;;415    
;;;416    	return FLCTL_BUFF->X_FL_BUFFER[0];
;;;417    	 
;;;418    }
;;;419    /**
;;;420      * @brief  This function is used to read a page size (256 bytes) of data from flash
;;;421      * @param  fmc     where fmc is a flash peripheral.
;;;422      * @param  Addr    where Addr is start address to read
;;;423      * @param  cmd     where cmd can be CMD_FAST_READ or CMD_NORM_READ
;;;424      * @retval Internal Buffer address
;;;425      */
;;;426    unsigned char *FMC_ReadPage(FLCTL_T *fmc,unsigned int Addr,unsigned char cmd)
;;;427    {
;;;428    	unsigned char bytes_num_w;
;;;429    
;;;430    	if(cmd == CMD_FAST_READ || cmd == CMD_QREAD || cmd == CMD_2READ || cmd == CMD_DREAD)
;;;431    		bytes_num_w = 0x05; 
;;;432    	else if (cmd == CMD_4READ)
;;;433            bytes_num_w = 0x07;
;;;434        else if (cmd == CMD_NORM_READ)
;;;435    		bytes_num_w = 0x04;
;;;436        else
;;;437            bytes_num_w = 0x04;
;;;438    
;;;439        fmc->X_FL_CTL = (256<<8) | (bytes_num_w<<0);
;;;440    	fmc->X_FL_WD[0] = cmd;
;;;441    	fmc->X_FL_WD[1] = (Addr & 0x00ff0000)>>16;
;;;442    	fmc->X_FL_WD[2] = (Addr & 0x0000ff00)>>8;
;;;443    	fmc->X_FL_WD[3] = Addr & 0xff;
;;;444        fmc->X_FL_WD[4] = 0xff;
;;;445        fmc->X_FL_WD[5] = 0xff;
;;;446    	
;;;447    	fmc->X_FL_TRIG = CMD_TRIG;
;;;448    	while(fmc->X_FL_TRIG){};
;;;449    
;;;450    	return (unsigned char *)&(FLCTL_BUFF->X_FL_BUFFER[0]);
;;;451    }
;;;452    
;;;453    /**
;;;454      * Read small data (less than 256 bytes) from flash (for internal use).
;;;455      */
;;;456    static unsigned char *FMC_ReadInternal(FLCTL_T *fmc,unsigned int Addr,unsigned char cmd, unsigned int len)
;;;457    {
;;;458    	unsigned char bytes_num_w;
;;;459    
;;;460    	if(cmd == CMD_FAST_READ || cmd == CMD_QREAD || cmd == CMD_2READ || cmd == CMD_DREAD)
;;;461    		bytes_num_w = 0x05; 
;;;462    	else if (cmd == CMD_4READ)
;;;463            bytes_num_w = 0x07;
;;;464        else if (cmd == CMD_NORM_READ)
;;;465    		bytes_num_w = 0x04;
;;;466        else
;;;467            bytes_num_w = 0x04;
;;;468    
;;;469        fmc->X_FL_CTL = (len<<8) | (bytes_num_w<<0);
;;;470    	fmc->X_FL_WD[0] = cmd;
;;;471    	fmc->X_FL_WD[1] = (Addr & 0x00ff0000)>>16;
;;;472    	fmc->X_FL_WD[2] = (Addr & 0x0000ff00)>>8;
;;;473    	fmc->X_FL_WD[3] = Addr & 0xff;
;;;474        fmc->X_FL_WD[4] = 0xff;
;;;475        fmc->X_FL_WD[5] = 0xff;
;;;476    	fmc->X_FL_TRIG = CMD_TRIG;
;;;477    	while(fmc->X_FL_TRIG){};
;;;478    
;;;479    	return (unsigned char *)&(FLCTL_BUFF->X_FL_BUFFER[0]);
;;;480    }
;;;481    
;;;482    /**
;;;483      * @brief  This function is used to read data stream from flash
;;;484      * @param  fmc     where fmc is a flash peripheral.
;;;485      * @param  Addr    where Addr is start address to read
;;;486      * @param  cmd     where cmd can be CMD_FAST_READ or CMD_NORM_READ
;;;487      * @param  buf     where buf is a buffer to store read data
;;;488      * @param  len     where len is data length of bytes to read
;;;489      * @retval None
;;;490      */
;;;491    int FMC_ReadStream(FLCTL_T *fmc, unsigned int Addr, unsigned char cmd, unsigned char *buf, unsigned int len)
;;;492    {
;;;493        unsigned int tmp_addr = Addr;
;;;494        unsigned int tmp_size = len;
;;;495        unsigned int code_area_size = FMC_GetFlashCodeAreaSize(fmc);
;;;496        
;;;497        if ((Addr >= code_area_size) || (Addr + len > code_area_size))
;;;498        {
;;;499            return -1;
;;;500        }
;;;501    
;;;502        while (tmp_size >= 256)
;;;503        {
;;;504            memcpy(&buf[tmp_addr - Addr], FMC_ReadPage(fmc, tmp_addr, cmd), 256);
;;;505            tmp_addr += 256;
;;;506            tmp_size -= 256;
;;;507        }
;;;508    
;;;509        if (tmp_size)
;;;510        {
;;;511            memcpy(&buf[tmp_addr - Addr], FMC_ReadInternal(fmc, tmp_addr, cmd, tmp_size), tmp_size);
;;;512        }
;;;513    
;;;514        return 0;
;;;515    }
;;;516    /**
;;;517      * @brief  This function is used to write data to buffer,
;;;518      * @param  fmc_w_buff: where fmc_w_buff is a cache to store write data.
;;;519    	* @param  size: where size is write data size
;;;520    	* @param  pData: write data
;;;521      * @retval none
;;;522      */
;;;523    static inline uint32_t FMC_PrepBuf(unsigned int size,unsigned char *pData)
;;;524    {
;;;525    	uint32_t i;
;;;526        uint32_t len = size > 256 ? 256 : size;
;;;527    	for(i = 0; i < len; i++)
;;;528    	{
;;;529    		FLCTL_BUFF->X_FL_BUFFER[i] = *pData;
;;;530    		pData ++;
;;;531    	}
;;;532        while(i < 256){
;;;533            FLCTL_BUFF->X_FL_BUFFER[i] = 0xFF;
;;;534            i++;
;;;535        }
;;;536        return len;
;;;537    }
;;;538    
;;;539    void FMC_SetFlashMode(FLCTL_T *fmc, uint32_t mode, bool enhance)
;;;540    {
        0x00000960:    b570        p.      PUSH     {r4-r6,lr}
        0x00000962:    4615        .F      MOV      r5,r2
        0x00000964:    460b        .F      MOV      r3,r1
        0x00000966:    4604        .F      MOV      r4,r0
;;;541        FMC_ExitEnhanceMode(fmc);
        0x00000968:    f7ffffda    ....    BL       FMC_ExitEnhanceMode ; 0x920
;;;542    
;;;543        if (mode == FLASH_X1_MODE)
        0x0000096c:    2b00        .+      CMP      r3,#0
        0x0000096e:    d004        ..      BEQ      0x97a ; FMC_SetFlashMode + 26
        0x00000970:    2b01        .+      CMP      r3,#1
        0x00000972:    d007        ..      BEQ      0x984 ; FMC_SetFlashMode + 36
        0x00000974:    2b02        .+      CMP      r3,#2
        0x00000976:    d00e        ..      BEQ      0x996 ; FMC_SetFlashMode + 54
        0x00000978:    e043        C.      B        0xa02 ; FMC_SetFlashMode + 162
;;;544        {
;;;545            // set cpu to x1_mode
;;;546            fmc->X_FL_X_MODE = (fmc->X_FL_X_MODE & ~0x3);
        0x0000097a:    68e0        .h      LDR      r0,[r4,#0xc]
        0x0000097c:    0880        ..      LSRS     r0,r0,#2
        0x0000097e:    0080        ..      LSLS     r0,r0,#2
        0x00000980:    60e0        .`      STR      r0,[r4,#0xc]
        0x00000982:    e03e        >.      B        0xa02 ; FMC_SetFlashMode + 162
;;;547        }
;;;548        else if (mode == FLASH_X2_MODE)
;;;549        {
;;;550            // set cpu to x2_mode
;;;551            fmc->X_FL_X_MODE = ((fmc->X_FL_X_MODE & ~0x3) | FLASH_X2_MODE);
        0x00000984:    68e0        .h      LDR      r0,[r4,#0xc]
        0x00000986:    0880        ..      LSRS     r0,r0,#2
        0x00000988:    0080        ..      LSLS     r0,r0,#2
        0x0000098a:    1c40        @.      ADDS     r0,r0,#1
        0x0000098c:    60e0        .`      STR      r0,[r4,#0xc]
;;;552    
;;;553            if (enhance)
        0x0000098e:    2d00        .-      CMP      r5,#0
        0x00000990:    d037        7.      BEQ      0xa02 ; FMC_SetFlashMode + 162
;;;554            {
;;;555                FMC_EnterEnhanceMode(fmc, FLASH_X2_MODE);
        0x00000992:    2101        .!      MOVS     r1,#1
        0x00000994:    e032        2.      B        0x9fc ; FMC_SetFlashMode + 156
;;;556            }
;;;557        }
;;;558        else if (mode == FLASH_X4_MODE)
;;;559        {
;;;560            uint16_t status;
;;;561            // Ensure QE bit is set
;;;562            status = FMC_ReadStatusReg(fmc, CMD_READ_STATUS_H);
        0x00000996:    2135        5!      MOVS     r1,#0x35
        0x00000998:    4620         F      MOV      r0,r4
        0x0000099a:    f7ffffd3    ....    BL       FMC_ReadStatusReg ; 0x944
        0x0000099e:    2601        .&      MOVS     r6,#1
        0x000009a0:    4603        .F      MOV      r3,r0
        0x000009a2:    0276        v.      LSLS     r6,r6,#9
;;;563            while ((status&0x02) != 0x02)
        0x000009a4:    e010        ..      B        0x9c8 ; FMC_SetFlashMode + 104
;;;564            {
;;;565                status = (status << 8) | FMC_ReadStatusReg(fmc, CMD_READ_STATUS_L) | QUAD_ENABLE_Msk;
        0x000009a6:    2105        .!      MOVS     r1,#5
        0x000009a8:    4620         F      MOV      r0,r4
        0x000009aa:    f7ffffcb    ....    BL       FMC_ReadStatusReg ; 0x944
        0x000009ae:    0219        ..      LSLS     r1,r3,#8
        0x000009b0:    4308        .C      ORRS     r0,r0,r1
        0x000009b2:    4330        0C      ORRS     r0,r0,r6
        0x000009b4:    4602        .F      MOV      r2,r0
;;;566                FMC_WriteStatusReg(fmc, OPS_WR_STU_REG_ALL, status);
        0x000009b6:    2101        .!      MOVS     r1,#1
        0x000009b8:    4620         F      MOV      r0,r4
        0x000009ba:    f000f831    ..1.    BL       FMC_WriteStatusReg ; 0xa20
;;;567                status = FMC_ReadStatusReg(fmc, CMD_READ_STATUS_H);
        0x000009be:    2135        5!      MOVS     r1,#0x35
        0x000009c0:    4620         F      MOV      r0,r4
        0x000009c2:    f7ffffbf    ....    BL       FMC_ReadStatusReg ; 0x944
        0x000009c6:    4603        .F      MOV      r3,r0
        0x000009c8:    0798        ..      LSLS     r0,r3,#30
        0x000009ca:    d5ec        ..      BPL      0x9a6 ; FMC_SetFlashMode + 70
;;;568            }
;;;569    
;;;570            // set cpu to x4_mode
;;;571            fmc->X_FL_X_MODE = ((fmc->X_FL_X_MODE & ~0x3) | FLASH_X4_MODE);
        0x000009cc:    68e0        .h      LDR      r0,[r4,#0xc]
        0x000009ce:    0880        ..      LSRS     r0,r0,#2
        0x000009d0:    0080        ..      LSLS     r0,r0,#2
        0x000009d2:    1c80        ..      ADDS     r0,r0,#2
        0x000009d4:    60e0        .`      STR      r0,[r4,#0xc]
;;;572    
;;;573            // en_burst_wrap
;;;574            fmc->X_FL_X_MODE |= (0x1 << 16);  // 32bit reg
        0x000009d6:    68e0        .h      LDR      r0,[r4,#0xc]
        0x000009d8:    2101        .!      MOVS     r1,#1
        0x000009da:    0409        ..      LSLS     r1,r1,#16
        0x000009dc:    4308        .C      ORRS     r0,r0,r1
        0x000009de:    60e0        .`      STR      r0,[r4,#0xc]
;;;575    
;;;576            // issue burst_wrap command to spi flash
;;;577            fmc->X_FL_CTL = (0<<8) | (0x05<<0);
        0x000009e0:    2005        .       MOVS     r0,#5
        0x000009e2:    6020         `      STR      r0,[r4,#0]
;;;578            fmc->X_FL_WD[0] = CMD_BURST_READ;
        0x000009e4:    2077        w       MOVS     r0,#0x77
        0x000009e6:    71a0        .q      STRB     r0,[r4,#6]
;;;579            fmc->X_FL_WD[4] = BURST_READ_MODE_32<<5;
        0x000009e8:    2040        @       MOVS     r0,#0x40
        0x000009ea:    72a0        .r      STRB     r0,[r4,#0xa]
;;;580            fmc->X_FL_TRIG = CMD_TRIG;
        0x000009ec:    2001        .       MOVS     r0,#1
        0x000009ee:    7120         q      STRB     r0,[r4,#4]
;;;581            while(fmc->X_FL_TRIG){};
        0x000009f0:    7920         y      LDRB     r0,[r4,#4]
        0x000009f2:    2800        .(      CMP      r0,#0
        0x000009f4:    d1fc        ..      BNE      0x9f0 ; FMC_SetFlashMode + 144
;;;582    
;;;583            if (enhance)
        0x000009f6:    2d00        .-      CMP      r5,#0
        0x000009f8:    d003        ..      BEQ      0xa02 ; FMC_SetFlashMode + 162
;;;584            {
;;;585                FMC_EnterEnhanceMode(fmc, FLASH_X4_MODE);
        0x000009fa:    2102        .!      MOVS     r1,#2
        0x000009fc:    4620         F      MOV      r0,r4
        0x000009fe:    f7ffff73    ..s.    BL       FMC_EnterEnhanceMode ; 0x8e8
        0x00000a02:    69a0        .i      LDR      r0,[r4,#0x18]
        0x00000a04:    0840        @.      LSRS     r0,r0,#1
        0x00000a06:    0040        @.      LSLS     r0,r0,#1
        0x00000a08:    61a0        .a      STR      r0,[r4,#0x18]
;;;586            }
;;;587        }
;;;588    
;;;589        /* Disable FMC Auto DP to ensure sleep mode works properly */
;;;590        FMC_DisableAutoDp(fmc);
;;;591    }
        0x00000a0a:    bd70        p.      POP      {r4-r6,pc}
    i.FMC_WriteEnable
    FMC_WriteEnable
        0x00000a0c:    2101        .!      MOVS     r1,#1
        0x00000a0e:    6001        .`      STR      r1,[r0,#0]
;;; .\..\..\..\..\pan108\peripheral\src\pan_fmc.c (89)
        0x00000a10:    2206        ."      MOVS     r2,#6
        0x00000a12:    7182        .q      STRB     r2,[r0,#6]
;;;90     	fmc->X_FL_TRIG = CMD_TRIG;
        0x00000a14:    7101        .q      STRB     r1,[r0,#4]
;;;91     	while(fmc->X_FL_TRIG){};
        0x00000a16:    7901        .y      LDRB     r1,[r0,#4]
        0x00000a18:    2900        .)      CMP      r1,#0
        0x00000a1a:    d1fc        ..      BNE      0xa16 ; FMC_WriteEnable + 10
;;;92     
;;;93         return 1;
        0x00000a1c:    2001        .       MOVS     r0,#1
;;;94     }
        0x00000a1e:    4770        pG      BX       lr
    i.FMC_WriteStatusReg
    FMC_WriteStatusReg
;;;95     /**
;;;96       * @brief  This is a internal function used to erase flash,
;;;97       * @param  fmc: where fmc is a flash peripheral.
;;;98       * @param  Addr: where addr is a erase start address.  
;;;99       * @param  cmd: where cmd can be CMD_ERASE_PAGE
;;;100    	*							  CMD_ERASE_SECTOR
;;;101    	*							  CMD_ERASE_32K
;;;102    	*							  CMD_ERASE_64K
;;;103    	*							  CMD_ERASE_CHIP
;;;104      * @retval 0: Success
;;;105      * @retval -1: Fail
;;;106      */
;;;107    static int FMC_Erase(FLCTL_T *fmc,unsigned int Addr,unsigned char cmd)
;;;108    {
;;;109    	unsigned char offset = 0;
;;;110    	unsigned char bytes_num_w;
;;;111    
;;;112    	FMC_WriteEnable(fmc);
;;;113    
;;;114    	if(cmd != CMD_ERASE_CHIP)
;;;115    	// - it's page/sector/block erase
;;;116    		bytes_num_w = 0x04;
;;;117    	else
;;;118    	// - it's chip erase
;;;119    		bytes_num_w = 0x01;
;;;120    			
;;;121    	fmc->X_FL_CTL = (0<<8) | (bytes_num_w<<0);
;;;122    	fmc->X_FL_WD[offset++] = cmd;
;;;123    
;;;124    	fmc->X_FL_WD[offset++] = (Addr & 0x00ff0000)>>16;
;;;125    	fmc->X_FL_WD[offset++] = (Addr & 0x0000ff00)>>8;
;;;126    	fmc->X_FL_WD[offset++] = Addr & 0xff;
;;;127    	fmc->X_FL_X_MODE |= (0x01<<Long_Time_Op_Pos);
;;;128    	fmc->X_FL_TRIG = CMD_TRIG;
;;;129    	while(fmc->X_FL_TRIG){}
;;;130    
;;;131    	while(FMC_ReadStatusReg(fmc,CMD_READ_STATUS_L) & Write_In_Process_Msk) {}
;;;132    	return 0;
;;;133    }
;;;134    
;;;135    /**
;;;136      * @brief Erase a 4KB Sector in Flash Memory.
;;;137      *
;;;138      * This function is used to erase a 4KB flash sector
;;;139      * in flash code area.
;;;140      *
;;;141      * @param fmc: where fmc is a flash peripheral.
;;;142      * @param adr: where addr is a erase start address.
;;;143      * @retval 0: Success.
;;;144      * @retval -1: Fail.
;;;145      */
;;;146    int FMC_EraseSector(FLCTL_T *fmc,unsigned long addr)
;;;147    {
;;;148        if (addr >= FMC_GetFlashCodeAreaSize(fmc)) {
;;;149            return -1;
;;;150        }
;;;151        return FMC_Erase(fmc,addr,CMD_ERASE_SECTOR);
;;;152    }
;;;153    
;;;154    /**
;;;155      * @brief Erase a 32KB Block in Flash Memory.
;;;156      *
;;;157      * This function is used to erase a 32KB flash block
;;;158      * in flash code area.
;;;159      *
;;;160      * @note The 1st 28KB flash block is not allowed to be erased
;;;161      * as the Info Area resides in this physical 32KB flash block.
;;;162      * @note The 32KB flash block start address is 0x7000, 0xF000,
;;;163      * 0x17000, 0x1F000, 0x27000, 0x2F000, ...
;;;164      *
;;;165      * @param fmc: where fmc is a flash peripheral.
;;;166      * @param adr: where addr is a erase start address.
;;;167      * @retval 0: Success.
;;;168      * @retval -1: Fail.
;;;169      */
;;;170    int FMC_EraseBlock32k(FLCTL_T *fmc,unsigned long addr)
;;;171    {
;;;172        if ((addr >= FMC_GetFlashCodeAreaSize(fmc))
;;;173            || (addr < 0x7000)) {
;;;174            return -1;
;;;175        }
;;;176        return FMC_Erase(fmc,addr,CMD_ERASE_32K);
;;;177    }
;;;178    
;;;179    /**
;;;180      * @brief Erase a 64KB Block in Flash Memory.
;;;181      *
;;;182      * This function is used to erase a 64KB flash block
;;;183      * in flash code area.
;;;184      *
;;;185      * @note The 1st 60KB flash block is not allowed to be erased
;;;186      * as the Info Area resides in this physical 64KB flash block.
;;;187      * @note The 64KB flash block start address is 0xF000, 0x1F000,
;;;188      * 0x2F000, 0x3F000, 0x4F000, 0x5F000, ...
;;;189      *
;;;190      * @param fmc: where fmc is a flash peripheral.
;;;191      * @param adr: where addr is a erase start address.
;;;192      * @retval 0: Success.
;;;193      * @retval -1: Fail.
;;;194      */
;;;195    int FMC_EraseBlock64k(FLCTL_T *fmc,unsigned long addr)
;;;196    {
;;;197        if ((addr >= FMC_GetFlashCodeAreaSize(fmc))
;;;198            || (addr < 0xF000)) {
;;;199            return -1;
;;;200        }
;;;201        return FMC_Erase(fmc,addr,CMD_ERASE_64K);
;;;202    }
;;;203    
;;;204    /**
;;;205      * @brief Erase the whole flash memory.
;;;206      *
;;;207      * This function is used to erase all data in flash, include
;;;208      * Code Area and Info Area.
;;;209      *
;;;210      * @note This API should only be used when you really know what
;;;211      * you are doing.
;;;212      *
;;;213      * @param fmc: where fmc is a flash peripheral.
;;;214      * @retval 0: Success.
;;;215      * @retval -1: Fail.
;;;216      */
;;;217    int FMC_EraseChip(FLCTL_T *fmc)
;;;218    {
;;;219        return FMC_Erase(fmc,0x0,CMD_ERASE_CHIP);
;;;220    }
;;;221    
;;;222    static void find_special_chunk_in_range(size_t chunk_pattern, uint32_t range_start_sector_idx, uint16_t range_sector_num,
;;;223                                            uint32_t *chunk_start_sector_idx, uint16_t *chunk_sector_num)
;;;224    {
;;;225        size_t remainder = range_start_sector_idx % chunk_pattern;
;;;226    
;;;227        for (size_t sector_idx = remainder ? (range_start_sector_idx - remainder + chunk_pattern) : range_start_sector_idx;
;;;228                sector_idx <= range_start_sector_idx + range_sector_num;
;;;229                sector_idx += chunk_pattern) {
;;;230            if (*chunk_start_sector_idx == 0) {
;;;231                *chunk_start_sector_idx = (sector_idx == 0) ? chunk_pattern : sector_idx;    //Found chunk start position (and should not be 1st block)
;;;232            } else {
;;;233                *chunk_sector_num += chunk_pattern; //Found multiple expected chunk
;;;234            }
;;;235        }
;;;236    }
;;;237    
;;;238    /**
;;;239      * @brief Erase specific data in flash code area.
;;;240      *
;;;241      * This function is used to erase specific data in flash Code
;;;242      * Area.
;;;243      *
;;;244      * @note This API is the most recommended function used to erase
;;;245      * data in flash code area.
;;;246      *
;;;247      * @param fmc: where fmc is a flash peripheral.
;;;248      * @param addr: start address to erase, should be 4KB aligned.
;;;249      * @param len: length to erase in bytes.
;;;250      * @retval 0: Success.
;;;251      * @retval -1: Fail.
;;;252      */
;;;253    int FMC_EraseCodeArea(FLCTL_T *fmc, uint32_t addr, uint32_t len)
;;;254    {
;;;255        uint32_t block_64k_start_sector_idx = 0;
;;;256        uint16_t block_64k_sector_num = 0;
;;;257        uint32_t block_32k_start_sector_idx = 0;
;;;258        uint16_t block_32k_sector_num = 0;
;;;259    
;;;260        uint32_t start_phy_sector_idx = addr / SECTOR_SIZE + 1;
;;;261        uint16_t sector_num = len / SECTOR_SIZE + (len % SECTOR_SIZE ? 1 : 0);
;;;262        uint16_t total_phy_sector_num = FMC_GetFlashCodeAreaSize(fmc) / SECTOR_SIZE + 1;
;;;263    
;;;264        // Check if erase start address and len are 4KB aligned and size not out of flash range
;;;265        if ((addr % SECTOR_SIZE != 0) || ((start_phy_sector_idx + sector_num) > total_phy_sector_num)) {
;;;266            return -1;
;;;267        }
;;;268    
;;;269        // Fine 32K blocks from the initial data chunk
;;;270        find_special_chunk_in_range(8, start_phy_sector_idx, sector_num, &block_32k_start_sector_idx, &block_32k_sector_num);
;;;271    
;;;272        if (block_32k_sector_num == 0) { // No 32k-block found
;;;273            // Do only sector erase
;;;274            for (size_t i = 0; i < sector_num; i++) {
;;;275                FMC_EraseSector(FLCTL, (start_phy_sector_idx + i - 1) * SECTOR_SIZE);
;;;276            }
;;;277        } else { // Found at least 1 32k-block
;;;278            // Do sector erase for leading sectors
;;;279            for (size_t i = 0; i < block_32k_start_sector_idx - start_phy_sector_idx; i++) {
;;;280                FMC_EraseSector(FLCTL, (start_phy_sector_idx + i - 1) * SECTOR_SIZE);
;;;281            }
;;;282            // Do sector erase for trailing sectors
;;;283            for (size_t i = 0; i < start_phy_sector_idx + sector_num - block_32k_start_sector_idx - block_32k_sector_num; i++) {
;;;284                FMC_EraseSector(FLCTL, (block_32k_start_sector_idx + block_32k_sector_num + i - 1) * SECTOR_SIZE);
;;;285            }
;;;286    
;;;287            // Find 64K blocks from the 32K-block chunk if there are
;;;288            find_special_chunk_in_range(16, block_32k_start_sector_idx, block_32k_sector_num, &block_64k_start_sector_idx, &block_64k_sector_num);
;;;289    
;;;290            if (block_64k_sector_num == 0) { // No 64k-block found
;;;291                // Do only block-32k erase
;;;292                for (size_t i = 0; i < block_32k_sector_num; i += 8) {
;;;293                    FMC_EraseBlock32k(FLCTL, (block_32k_start_sector_idx + i - 1) * SECTOR_SIZE);
;;;294                }
;;;295            } else { // Found at least 1 64k-block
;;;296                // Do block-32k erase for leading sectors if there are
;;;297                if (block_32k_start_sector_idx % 16 != 0) {
;;;298                    FMC_EraseBlock32k(FLCTL, (block_32k_start_sector_idx - 1) * SECTOR_SIZE);
;;;299                }
;;;300                // Do block-32k erase for trailing sectors if there are
;;;301                if ((block_32k_start_sector_idx + block_32k_sector_num) % 16 != 0) {
;;;302                    FMC_EraseBlock32k(FLCTL, (block_64k_start_sector_idx + block_64k_sector_num - 1) * SECTOR_SIZE);
;;;303                }
;;;304                // Do block_64k erase
;;;305                for (size_t i = 0; i < block_64k_sector_num; i += 16) {
;;;306                    FMC_EraseBlock64k(FLCTL, (block_64k_start_sector_idx + i - 1) * SECTOR_SIZE);
;;;307                }
;;;308            }
;;;309        }
;;;310    
;;;311        return 0;
;;;312    }
;;;313    
;;;314    /**
;;;315      * @brief  This function is used to write status,
;;;316      * The Read Status Register can be read at any time
;;;317      * @param  fmc: where fmc is a flash peripheral.
;;;318      * @param  ops: where ops can be OPS_WR_STU_REG_ALL
;;;319      *                               OPS_WR_STU_REG_NOR
;;;320      * @param  buf: where buf is write value
;;;321      * @retval none
;;;322      */
;;;323    void FMC_WriteStatusReg(FLCTL_T *fmc,unsigned char ops,unsigned int buf)
;;;324    {
        0x00000a20:    b530        0.      PUSH     {r4,r5,lr}
        0x00000a22:    4614        .F      MOV      r4,r2
        0x00000a24:    460d        .F      MOV      r5,r1
        0x00000a26:    4603        .F      MOV      r3,r0
;;;325    	unsigned char offset =0;
;;;326    	unsigned char bytes_num_w;
;;;327    
;;;328    	if(FMC_WriteEnable(fmc) == 0)
        0x00000a28:    f7fffff0    ....    BL       FMC_WriteEnable ; 0xa0c
        0x00000a2c:    2800        .(      CMP      r0,#0
        0x00000a2e:    d018        ..      BEQ      0xa62 ; FMC_WriteStatusReg + 66
;;;329    		return;	
;;;330    
;;;331    	if(ops == OPS_WR_STU_REG_ALL)
        0x00000a30:    2d01        .-      CMP      r5,#1
        0x00000a32:    d017        ..      BEQ      0xa64 ; FMC_WriteStatusReg + 68
;;;332    	// - write staus [15:0]
;;;333    		bytes_num_w = 0x03; 
;;;334    	else
;;;335    	// - write staus [ 7:0]
;;;336    		bytes_num_w = 0x02;
        0x00000a34:    2002        .       MOVS     r0,#2
;;;337    
;;;338        fmc->X_FL_CONFIG &= ~BIT2;  //clear tx_address_transaction bit
        0x00000a36:    7959        Yy      LDRB     r1,[r3,#5]
        0x00000a38:    22fb        ."      MOVS     r2,#0xfb
        0x00000a3a:    4011        .@      ANDS     r1,r1,r2
        0x00000a3c:    7159        Yq      STRB     r1,[r3,#5]
;;;339    	
;;;340    	fmc->X_FL_CTL = (0<<8) | (bytes_num_w<<0);
        0x00000a3e:    6018        .`      STR      r0,[r3,#0]
;;;341    	fmc->X_FL_WD[offset++] = CMD_WRITE_STATUS;
        0x00000a40:    2001        .       MOVS     r0,#1
        0x00000a42:    7198        .q      STRB     r0,[r3,#6]
;;;342    	fmc->X_FL_WD[offset++] = buf&0xff;
        0x00000a44:    71dc        .q      STRB     r4,[r3,#7]
;;;343    	fmc->X_FL_WD[offset++] = (buf>>8)&0xff;
        0x00000a46:    0a21        !.      LSRS     r1,r4,#8
        0x00000a48:    7219        .r      STRB     r1,[r3,#8]
;;;344    	fmc->X_FL_X_MODE |= (0x01<<Long_Time_Op_Pos);
        0x00000a4a:    68d9        .h      LDR      r1,[r3,#0xc]
        0x00000a4c:    0442        B.      LSLS     r2,r0,#17
        0x00000a4e:    4311        .C      ORRS     r1,r1,r2
        0x00000a50:    60d9        .`      STR      r1,[r3,#0xc]
;;;345    	fmc->X_FL_TRIG = CMD_TRIG;
        0x00000a52:    7118        .q      STRB     r0,[r3,#4]
;;;346    	while(fmc->X_FL_TRIG){};
        0x00000a54:    7918        .y      LDRB     r0,[r3,#4]
        0x00000a56:    2800        .(      CMP      r0,#0
        0x00000a58:    d1fc        ..      BNE      0xa54 ; FMC_WriteStatusReg + 52
;;;347    
;;;348        fmc->X_FL_CONFIG |= BIT2;  //reset tx_address_transaction bit
        0x00000a5a:    7958        Xy      LDRB     r0,[r3,#5]
        0x00000a5c:    2104        .!      MOVS     r1,#4
        0x00000a5e:    4308        .C      ORRS     r0,r0,r1
        0x00000a60:    7158        Xq      STRB     r0,[r3,#5]
;;;349    
;;;350    //	while(FMC_ReadStatusReg(fmc,CMD_READ_STATUS_L) & Write_In_Process_Msk);
;;;351    }
        0x00000a62:    bd30        0.      POP      {r4,r5,pc}
        0x00000a64:    2003        .       MOVS     r0,#3
        0x00000a66:    e7e6        ..      B        0xa36 ; FMC_WriteStatusReg + 22
    i.Factory_Read
    Factory_Read
;;; ..\..\..\..\radio\pan216.c
;;;5      {
        0x00000a68:    b510        ..      PUSH     {r4,lr}
        0x00000a6a:    4604        .F      MOV      r4,r0
;;;6          uint8_t val;
;;;7          PAN216_SetPage(1);
        0x00000a6c:    2001        .       MOVS     r0,#1
        0x00000a6e:    f000fe31    ..1.    BL       PAN216_SetPage ; 0x16d4
;;;8          PAN216_WriteRegUnchecked(0x04, addr << 1);
        0x00000a72:    0660        `.      LSLS     r0,r4,#25
        0x00000a74:    0e01        ..      LSRS     r1,r0,#24
        0x00000a76:    2004        .       MOVS     r0,#4
        0x00000a78:    f001f882    ....    BL       PAN216_WriteRegUnchecked ; 0x1b80
;;;9          val = PAN216_ReadReg(0x04);
        0x00000a7c:    2004        .       MOVS     r0,#4
        0x00000a7e:    f000fcee    ....    BL       PAN216_ReadReg ; 0x145e
        0x00000a82:    4604        .F      MOV      r4,r0
;;;10         PAN216_SetPage(0);
        0x00000a84:    2000        .       MOVS     r0,#0
        0x00000a86:    f000fe25    ..%.    BL       PAN216_SetPage ; 0x16d4
;;;11         Pan216_Funs.delayus(100);
        0x00000a8a:    4805        .H      LDR      r0,[pc,#20] ; [0xaa0] = 0x20000010
        0x00000a8c:    6901        .i      LDR      r1,[r0,#0x10]
        0x00000a8e:    2064        d       MOVS     r0,#0x64
        0x00000a90:    4788        .G      BLX      r1
;;;12         PAN216_WriteRegUnchecked(0x73, 0x01);
        0x00000a92:    2101        .!      MOVS     r1,#1
        0x00000a94:    2073        s       MOVS     r0,#0x73
        0x00000a96:    f001f873    ..s.    BL       PAN216_WriteRegUnchecked ; 0x1b80
;;;13     
;;;14         return val;
        0x00000a9a:    4620         F      MOV      r0,r4
;;;15     }
        0x00000a9c:    bd10        ..      POP      {r4,pc}
    $d
        0x00000a9e:    0000        ..      DCW    0
        0x00000aa0:    20000010    ...     DCD    536870928
    $t
    i.GPIO_SetMode
    GPIO_SetMode
;;; .\..\..\..\..\pan108\peripheral\src\pan_gpio.c
;;;44     {
        0x00000aa4:    b5f0        ..      PUSH     {r4-r7,lr}
;;;45         uint32_t i;
;;;46     
;;;47         for (i=0; i<GPIO_PIN_MAX; i++) {
        0x00000aa6:    2300        .#      MOVS     r3,#0
        0x00000aa8:    2401        .$      MOVS     r4,#1
        0x00000aaa:    4625        %F      MOV      r5,r4
        0x00000aac:    409d        .@      LSLS     r5,r5,r3
        0x00000aae:    420d        .B      TST      r5,r1
        0x00000ab0:    d008        ..      BEQ      0xac4 ; GPIO_SetMode + 32
        0x00000ab2:    6806        .h      LDR      r6,[r0,#0]
        0x00000ab4:    005d        ].      LSLS     r5,r3,#1
        0x00000ab6:    2703        .'      MOVS     r7,#3
        0x00000ab8:    40af        .@      LSLS     r7,r7,r5
        0x00000aba:    43be        .C      BICS     r6,r6,r7
        0x00000abc:    4617        .F      MOV      r7,r2
        0x00000abe:    40af        .@      LSLS     r7,r7,r5
        0x00000ac0:    433e        >C      ORRS     r6,r6,r7
        0x00000ac2:    6006        .`      STR      r6,[r0,#0]
        0x00000ac4:    1c5b        [.      ADDS     r3,r3,#1
        0x00000ac6:    2b08        .+      CMP      r3,#8
        0x00000ac8:    d3ef        ..      BCC      0xaaa ; GPIO_SetMode + 6
;;;48             if (u32PinMask & (1 << i)) {
;;;49                 gpio->MODE = (gpio->MODE & ~(0x3 << (i << 1))) | (Mode << (i << 1));
;;;50             }
;;;51         }
;;;52         if((GPIO_MODE_INPUT==Mode)|(GPIO_MODE_QUASI==Mode))
        0x00000aca:    2a00        .*      CMP      r2,#0
        0x00000acc:    d002        ..      BEQ      0xad4 ; GPIO_SetMode + 48
        0x00000ace:    2400        .$      MOVS     r4,#0
        0x00000ad0:    2a03        .*      CMP      r2,#3
        0x00000ad2:    d007        ..      BEQ      0xae4 ; GPIO_SetMode + 64
        0x00000ad4:    2200        ."      MOVS     r2,#0
        0x00000ad6:    4314        .C      ORRS     r4,r4,r2
        0x00000ad8:    d003        ..      BEQ      0xae2 ; GPIO_SetMode + 62
        0x00000ada:    6842        Bh      LDR      r2,[r0,#4]
        0x00000adc:    0409        ..      LSLS     r1,r1,#16
        0x00000ade:    438a        .C      BICS     r2,r2,r1
        0x00000ae0:    6042        B`      STR      r2,[r0,#4]
        0x00000ae2:    bdf0        ..      POP      {r4-r7,pc}
        0x00000ae4:    2201        ."      MOVS     r2,#1
        0x00000ae6:    e7f6        ..      B        0xad6 ; GPIO_SetMode + 50
    i.GPIO_SetModeByPin
    GPIO_SetModeByPin
;;; ..\..\..\..\pan108\bsp.c
;;;235    {
        0x00000ae8:    b570        p.      PUSH     {r4-r6,lr}
        0x00000aea:    460d        .F      MOV      r5,r1
        0x00000aec:    4604        .F      MOV      r4,r0
;;;236        uint8_t port = PinID / 0x10;
        0x00000aee:    0900        ..      LSRS     r0,r0,#4
;;;237        uint8_t bit = PinID % 0x10;
        0x00000af0:    0722        ".      LSLS     r2,r4,#28
        0x00000af2:    0f12        ..      LSRS     r2,r2,#28
;;;238    
;;;239        GPIO_SetMode((GPIO_T*)(P0_BASE + 0x40 * port), BIT0 << bit, Mode);
        0x00000af4:    2101        .!      MOVS     r1,#1
        0x00000af6:    4091        .@      LSLS     r1,r1,r2
        0x00000af8:    0180        ..      LSLS     r0,r0,#6
        0x00000afa:    4a09        .J      LDR      r2,[pc,#36] ; [0xb20] = 0x40020000
        0x00000afc:    1880        ..      ADDS     r0,r0,r2
        0x00000afe:    462a        *F      MOV      r2,r5
        0x00000b00:    f7ffffd0    ....    BL       GPIO_SetMode ; 0xaa4
;;;240    
;;;241        if (Mode == GPIO_MODE_INPUT || Mode == GPIO_MODE_QUASI)
        0x00000b04:    2d00        .-      CMP      r5,#0
        0x00000b06:    d001        ..      BEQ      0xb0c ; GPIO_SetModeByPin + 36
        0x00000b08:    2d03        .-      CMP      r5,#3
        0x00000b0a:    d107        ..      BNE      0xb1c ; GPIO_SetModeByPin + 52
;;;242        {
;;;243            if (PinID == P5_6 || PinID == P4_6 || PinID == P4_7)
        0x00000b0c:    2c56        V,      CMP      r4,#0x56
        0x00000b0e:    d003        ..      BEQ      0xb18 ; GPIO_SetModeByPin + 48
        0x00000b10:    2c46        F,      CMP      r4,#0x46
        0x00000b12:    d001        ..      BEQ      0xb18 ; GPIO_SetModeByPin + 48
        0x00000b14:    2c47        G,      CMP      r4,#0x47
        0x00000b16:    d101        ..      BNE      0xb1c ; GPIO_SetModeByPin + 52
;;;244            {
;;;245                // These Pins' DINOFF bits should be synced to 3v area
;;;246                CLK_Wait3vSyncReady();
        0x00000b18:    f7fffeb0    ....    BL       CLK_Wait3vSyncReady ; 0x87c
;;;247            }
;;;248        }
;;;249    }
        0x00000b1c:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x00000b1e:    0000        ..      DCW    0
        0x00000b20:    40020000    ...@    DCD    1073872896
    $t
    i.Hard_Fault_Handler
    Hard_Fault_Handler
    __tagsym$$used
;;; .\..\..\..\..\pan108\device\Source\pan_retarget.c
;;;45     {
        0x00000b24:    4604        .F      MOV      r4,r0
;;;46         printf("In Hard Fault Handler\r\n");
        0x00000b26:    a003        ..      ADR      r0,{pc}+0xe ; 0xb34
        0x00000b28:    f001f968    ..h.    BL       __0printf$8 ; 0x1dfc
;;;47     
;;;48         stackDump(stack);
        0x00000b2c:    4620         F      MOV      r0,r4
        0x00000b2e:    f001ff59    ..Y.    BL       stackDump ; 0x29e4
;;;49     
;;;50         while(1);
        0x00000b32:    e7fe        ..      B        0xb32 ; Hard_Fault_Handler + 14
    $d
        0x00000b34:    48206e49    In H    DCD    1210084937
        0x00000b38:    20647261    ard     DCD    543453793
        0x00000b3c:    6c756146    Faul    DCD    1819631942
        0x00000b40:    61482074    t Ha    DCD    1632116852
        0x00000b44:    656c646e    ndle    DCD    1701602414
        0x00000b48:    000a0d72    r...    DCD    658802
    $t
    i.InitIcache
    InitIcache
;;; .\..\..\..\..\pan108\peripheral\src\pan_fmc.c
;;;805    	CR->X_CACHE_EN = 0x00;
        0x00000b4c:    2200        ."      MOVS     r2,#0
        0x00000b4e:    2001        .       MOVS     r0,#1
        0x00000b50:    0580        ..      LSLS     r0,r0,#22
        0x00000b52:    6002        .`      STR      r2,[r0,#0]
        0x00000b54:    2202        ."      MOVS     r2,#2
        0x00000b56:    2900        .)      CMP      r1,#0
;;; .\..\..\..\..\pan108\peripheral\src\pan_fmc.c (803)
        0x00000b58:    d004        ..      BEQ      0xb64 ; InitIcache + 24
;;;804    	// Disable cache
;;;805    	CR->X_CACHE_EN = 0x00;
;;;806    
;;;807        if ((mode == FLASH_X1_MODE) || (mode == FLASH_X2_MODE))
        0x00000b5a:    2901        .)      CMP      r1,#1
        0x00000b5c:    d002        ..      BEQ      0xb64 ; InitIcache + 24
        0x00000b5e:    2902        .)      CMP      r1,#2
        0x00000b60:    d003        ..      BEQ      0xb6a ; InitIcache + 30
        0x00000b62:    e005        ..      B        0xb70 ; InitIcache + 36
;;;808        {
;;;809            CR->X_CACHE_INI |= 0x02;    // flash_has_no_wrap = 1
        0x00000b64:    6881        .h      LDR      r1,[r0,#8]
        0x00000b66:    4311        .C      ORRS     r1,r1,r2
        0x00000b68:    e001        ..      B        0xb6e ; InitIcache + 34
;;;810        }
;;;811        else if (mode == FLASH_X4_MODE)
;;;812        {
;;;813            CR->X_CACHE_INI &= ~0x02;   // flash_has_no_wrap = 0
        0x00000b6a:    6881        .h      LDR      r1,[r0,#8]
        0x00000b6c:    4391        .C      BICS     r1,r1,r2
        0x00000b6e:    6081        .`      STR      r1,[r0,#8]
;;;814        }
;;;815    
;;;816    	// Flush cache, ini_trg = 1
;;;817    	CR->X_CACHE_INI |= 0x01; //inv_all
        0x00000b70:    6882        .h      LDR      r2,[r0,#8]
        0x00000b72:    2101        .!      MOVS     r1,#1
        0x00000b74:    430a        .C      ORRS     r2,r2,r1
        0x00000b76:    6082        .`      STR      r2,[r0,#8]
;;;818    
;;;819    	while(CR->X_CACHE_INI & 0x1){};
        0x00000b78:    6882        .h      LDR      r2,[r0,#8]
        0x00000b7a:    07d2        ..      LSLS     r2,r2,#31
        0x00000b7c:    d1fc        ..      BNE      0xb78 ; InitIcache + 44
;;;820    
;;;821    	// Enable cache
;;;822    	CR->X_CACHE_EN = 0x01;
        0x00000b7e:    6001        .`      STR      r1,[r0,#0]
;;;823    }
        0x00000b80:    4770        pG      BX       lr
        0x00000b82:    0000        ..      MOVS     r0,r0
    i.OLED_Clear
    OLED_Clear
;;; ..\src\oled.c
;;;113    {
        0x00000b84:    b510        ..      PUSH     {r4,lr}
;;;114        uint8_t i, n;
;;;115        for (i = 0; i < 8; i++)
        0x00000b86:    2100        .!      MOVS     r1,#0
        0x00000b88:    4b08        .K      LDR      r3,[pc,#32] ; [0xbac] = 0x20000099
        0x00000b8a:    460a        .F      MOV      r2,r1
        0x00000b8c:    2000        .       MOVS     r0,#0
        0x00000b8e:    00c4        ..      LSLS     r4,r0,#3
        0x00000b90:    18e4        ..      ADDS     r4,r4,r3
        0x00000b92:    1c40        @.      ADDS     r0,r0,#1
        0x00000b94:    b2c0        ..      UXTB     r0,r0
        0x00000b96:    5462        bT      STRB     r2,[r4,r1]
        0x00000b98:    2880        .(      CMP      r0,#0x80
        0x00000b9a:    d3f8        ..      BCC      0xb8e ; OLED_Clear + 10
        0x00000b9c:    1c49        I.      ADDS     r1,r1,#1
        0x00000b9e:    b2c9        ..      UXTB     r1,r1
        0x00000ba0:    2908        .)      CMP      r1,#8
        0x00000ba2:    d3f3        ..      BCC      0xb8c ; OLED_Clear + 8
;;;116            for (n = 0; n < 128; n++)
;;;117                OLED_GRAM[n][i] = 0x00;
;;;118        OLED_Refresh_Gram();
        0x00000ba4:    f000f89a    ....    BL       OLED_Refresh_Gram ; 0xcdc
;;;119    }
        0x00000ba8:    bd10        ..      POP      {r4,pc}
    $d
        0x00000baa:    0000        ..      DCW    0
        0x00000bac:    20000099    ...     DCD    536871065
    $t
    i.OLED_DrawPoint
    OLED_DrawPoint
;;;120    
;;;121    /**
;;;122     * @brief weight memory
;;;123     * @param[in] <x> abscissa axis
;;;124     * @param[in] <y> vertical axis
;;;125     * @param[in] <t> 1:point 0:no point
;;;126     * @return none
;;;127     */
;;;128    void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
;;;129    {
        0x00000bb0:    b510        ..      PUSH     {r4,lr}
        0x00000bb2:    287f        .(      CMP      r0,#0x7f
;;; ..\src\oled.c (129)
        0x00000bb4:    d814        ..      BHI      0xbe0 ; OLED_DrawPoint + 48
;;;130        uint8_t pos, bx, temp = 0;
;;;131        if (x > 127 || y > 63)
        0x00000bb6:    293f        ?)      CMP      r1,#0x3f
        0x00000bb8:    d812        ..      BHI      0xbe0 ; OLED_DrawPoint + 48
;;;132            return;
;;;133        pos = 7 - y / 8;
        0x00000bba:    08cb        ..      LSRS     r3,r1,#3
        0x00000bbc:    2407        .$      MOVS     r4,#7
        0x00000bbe:    1ae3        ..      SUBS     r3,r4,r3
        0x00000bc0:    4021        !@      ANDS     r1,r1,r4
        0x00000bc2:    1a64        d.      SUBS     r4,r4,r1
        0x00000bc4:    2101        .!      MOVS     r1,#1
        0x00000bc6:    40a1        .@      LSLS     r1,r1,r4
        0x00000bc8:    4c06        .L      LDR      r4,[pc,#24] ; [0xbe4] = 0x20000099
        0x00000bca:    00c0        ..      LSLS     r0,r0,#3
        0x00000bcc:    1900        ..      ADDS     r0,r0,r4
        0x00000bce:    b2db        ..      UXTB     r3,r3
        0x00000bd0:    2a00        .*      CMP      r2,#0
        0x00000bd2:    5cc2        .\      LDRB     r2,[r0,r3]
;;;134        bx = y % 8;
;;;135        temp = 1 << (7 - bx);
        0x00000bd4:    b2c9        ..      UXTB     r1,r1
;;;136        if (t)
        0x00000bd6:    d001        ..      BEQ      0xbdc ; OLED_DrawPoint + 44
;;;137            OLED_GRAM[x][pos] |= temp;
        0x00000bd8:    430a        .C      ORRS     r2,r2,r1
        0x00000bda:    e000        ..      B        0xbde ; OLED_DrawPoint + 46
        0x00000bdc:    438a        .C      BICS     r2,r2,r1
        0x00000bde:    54c2        .T      STRB     r2,[r0,r3]
;;;138        else
;;;139            OLED_GRAM[x][pos] &= ~temp;
;;;140    }
        0x00000be0:    bd10        ..      POP      {r4,pc}
    $d
        0x00000be2:    0000        ..      DCW    0
        0x00000be4:    20000099    ...     DCD    536871065
    $t
    i.OLED_Init
    OLED_Init
;;;141    
;;;142    void OLED_ReversePoint(uint8_t x, uint8_t y)
;;;143    {
;;;144        uint8_t pos, bx, temp = 0;
;;;145        if (x > 127 || y > 63)
;;;146            return;
;;;147        pos = 7 - y / 8;
;;;148        bx = y % 8;
;;;149        temp = 1 << (7 - bx);
;;;150    //    uint8_t t;
;;;151        if (OLED_GRAM[x][pos] & temp)
;;;152            OLED_GRAM[x][pos] &= ~temp;
;;;153        else
;;;154            OLED_GRAM[x][pos] |= temp;
;;;155    
;;;156    }
;;;157    /**
;;;158     * @brief paint  area
;;;159     * @param[in] <x1> abscissa axis of left
;;;160     * @param[in] <y1> vertical axis of left
;;;161     * @param[in] <x2> abscissa axis of right
;;;162     * @param[in] <y2> vertical axis of right
;;;163     * @param[in] <dot> 1:point 0:no point
;;;164     * @return none
;;;165     */
;;;166    void OLED_Fill(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t dot)
;;;167    {
;;;168        uint8_t x, y;
;;;169        for (x = x1; x <= x2; x++)
;;;170        {
;;;171            for (y = y1; y <= y2; y++)
;;;172                OLED_DrawPoint(x, y, dot);
;;;173        }
;;;174        OLED_Refresh_Gram();
;;;175    }
;;;176    
;;;177    /**
;;;178     * @brief show a char on OLED
;;;179     * @param[in] <x> abscissa axis
;;;180     * @param[in] <y> vertical axis
;;;181     * @param[in] <char> char
;;;182     * @param[in] <size> size of word 12 0r 16 or 24
;;;183     * @param[in] <mode> show mode  0:with shadow 1:without shadow
;;;184     * @return result
;;;185     */
;;;186    void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode)
;;;187    {
;;;188        uint8_t temp, t, t1;
;;;189        uint8_t y0 = y;
;;;190        uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);
;;;191        chr = chr - ' ';
;;;192        for (t = 0; t < csize; t++)
;;;193        {
;;;194            if (size == 12)
;;;195                temp = asc2_1206[chr][t];
;;;196            else if (size == 16)
;;;197                temp = asc2_1608[chr][t];
;;;198            else if (size == 24)
;;;199                temp = asc2_2412[chr][t];
;;;200            else
;;;201                return;
;;;202            for (t1 = 0; t1 < 8; t1++)
;;;203            {
;;;204                if (temp & 0x80)
;;;205                    OLED_DrawPoint(x, y, mode);
;;;206                else
;;;207                    OLED_DrawPoint(x, y, !mode);
;;;208                temp <<= 1;
;;;209                y++;
;;;210                if ((y - y0) == size)
;;;211                {
;;;212                    y = y0;
;;;213                    x++;
;;;214                    break;
;;;215                }
;;;216            }
;;;217        }
;;;218    }
;;;219    
;;;220    /**
;;;221     * @brief calculate m^n
;;;222     * @param[in] <m>
;;;223     * @param[in] <n>
;;;224     * @return result
;;;225     */
;;;226    uint32_t mypow(uint8_t m, uint8_t n)
;;;227    {
;;;228        uint32_t result = 1;
;;;229        while (n--)
;;;230            result *= m;
;;;231        return result;
;;;232    }
;;;233    
;;;234    /**
;;;235     * @brief show number on OLED
;;;236     * @param[in] <x> abscissa axis
;;;237     * @param[in] <y> vertical axis
;;;238     * @param[in] <num> number (0~4294967295)
;;;239     * @param[in] <len> length of number
;;;240     * @param[in] <size> size of word 16 0r 12
;;;241     * @return result
;;;242     */
;;;243    void OLED_ShowNum(uint8_t x, uint8_t y, uint32_t num, uint8_t len, uint8_t size)
;;;244    {
;;;245        uint8_t t, temp;
;;;246        uint8_t enshow = 0;
;;;247        for (t = 0; t < len; t++)
;;;248        {
;;;249            temp = (num / mypow(10, len - t - 1)) % 10;
;;;250            if (enshow == 0 && t < (len - 1))
;;;251            {
;;;252                if (temp == 0)
;;;253                {
;;;254                    OLED_ShowChar(x + (size / 2) * t, y, '0', size, 1);
;;;255                    continue;
;;;256                }
;;;257                else
;;;258                    enshow = 1;
;;;259            }
;;;260            OLED_ShowChar(x + (size / 2) * t, y, temp + '0', size, 1);
;;;261        }
;;;262    }
;;;263    
;;;264    /**
;;;265     * @brief show string on OLED
;;;266     * @param[in] <x> abscissa axis
;;;267     * @param[in] <y> vertical axis
;;;268     * @param[in] <p> string
;;;269     * @param[in] <size> size of word 16 0r 12
;;;270     * @return result
;;;271     */
;;;272    void OLED_ShowString(uint8_t x, uint8_t y, char *p, uint8_t size)
;;;273    {
;;;274        while ((*p <= '~') && (*p >= ' '))
;;;275        {
;;;276            if (x > (128 - (size / 2)))
;;;277            {
;;;278                x = 0;
;;;279                y += size;
;;;280            }
;;;281            if (y > (64 - size))
;;;282            {
;;;283                y = x = 0;
;;;284                OLED_Clear();
;;;285            }
;;;286            OLED_ShowChar(x, y, *p, size, 1);
;;;287            x += size / 2;
;;;288            p++;
;;;289        }
;;;290    }
;;;291    
;;;292    void OLED_Reverse(uint8_t x, uint8_t y, uint8_t width, uint8_t height)
;;;293    {
;;;294        uint8_t i, j;
;;;295        for (i = x; i < x + width; i++)
;;;296        {
;;;297            for (j = (y - height); j < y; j++)
;;;298            {
;;;299                OLED_ReversePoint(i, j);
;;;300            }
;;;301        }
;;;302    }
;;;303    
;;;304    void OLED_ShowStringRev(uint8_t x, uint8_t y, char *p, uint8_t size)
;;;305    {
;;;306        while ((*p <= '~') && (*p >= ' '))
;;;307        {
;;;308            if (x > (128 - (size / 2)))
;;;309            {
;;;310                x = 0;
;;;311                y += size;
;;;312            }
;;;313            if (y > (64 - size))
;;;314            {
;;;315                y = x = 0;
;;;316                OLED_Clear();
;;;317            }
;;;318            OLED_ShowChar(x, y, *p, size, 0);
;;;319            x += size / 2;
;;;320            p++;
;;;321        }
;;;322    }
;;;323    /**
;;;324     * @brief do basic configuration to initialize
;;;325     * @param[in] <none>
;;;326     * @return none
;;;327     */
;;;328    void OLED_Init(void)
;;;329    {
        0x00000be8:    b570        p.      PUSH     {r4-r6,lr}
;;;330        OLED_CS(Enable);
        0x00000bea:    4c3b        ;L      LDR      r4,[pc,#236] ; [0xcd8] = 0x40020240
        0x00000bec:    2501        .%      MOVS     r5,#1
        0x00000bee:    6025        %`      STR      r5,[r4,#0]
;;;331        OLED_RST(Enable);
        0x00000bf0:    61a5        .a      STR      r5,[r4,#0x18]
;;;332        BSP_DelayUs(10);
        0x00000bf2:    200a        .       MOVS     r0,#0xa
        0x00000bf4:    f7fffc7a    ..z.    BL       BSP_DelayUs ; 0x4ec
;;;333        OLED_RST(Disable);
        0x00000bf8:    2000        .       MOVS     r0,#0
        0x00000bfa:    61a0        .a      STR      r0,[r4,#0x18]
;;;334        BSP_DelayUs(100);
        0x00000bfc:    2064        d       MOVS     r0,#0x64
        0x00000bfe:    f7fffc75    ..u.    BL       BSP_DelayUs ; 0x4ec
;;;335        OLED_RST(Enable);
        0x00000c02:    61a5        .a      STR      r5,[r4,#0x18]
;;;336        BSP_DelayUs(10);
        0x00000c04:    200a        .       MOVS     r0,#0xa
        0x00000c06:    f7fffc71    ..q.    BL       BSP_DelayUs ; 0x4ec
;;;337    
;;;338        OLED_WR_Byte(0xAE, OLED_CMD);
        0x00000c0a:    2100        .!      MOVS     r1,#0
        0x00000c0c:    20ae        .       MOVS     r0,#0xae
        0x00000c0e:    f000f911    ....    BL       OLED_WR_Byte ; 0xe34
;;;339        OLED_WR_Byte(0xD5, OLED_CMD);
        0x00000c12:    2100        .!      MOVS     r1,#0
        0x00000c14:    20d5        .       MOVS     r0,#0xd5
        0x00000c16:    f000f90d    ....    BL       OLED_WR_Byte ; 0xe34
;;;340        OLED_WR_Byte(80, OLED_CMD);
        0x00000c1a:    2100        .!      MOVS     r1,#0
        0x00000c1c:    2050        P       MOVS     r0,#0x50
        0x00000c1e:    f000f909    ....    BL       OLED_WR_Byte ; 0xe34
;;;341        OLED_WR_Byte(0xA8, OLED_CMD);
        0x00000c22:    2100        .!      MOVS     r1,#0
        0x00000c24:    20a8        .       MOVS     r0,#0xa8
        0x00000c26:    f000f905    ....    BL       OLED_WR_Byte ; 0xe34
;;;342        OLED_WR_Byte(0X3F, OLED_CMD);
        0x00000c2a:    2100        .!      MOVS     r1,#0
        0x00000c2c:    203f        ?       MOVS     r0,#0x3f
        0x00000c2e:    f000f901    ....    BL       OLED_WR_Byte ; 0xe34
;;;343        OLED_WR_Byte(0xD3, OLED_CMD);
        0x00000c32:    2100        .!      MOVS     r1,#0
        0x00000c34:    20d3        .       MOVS     r0,#0xd3
        0x00000c36:    f000f8fd    ....    BL       OLED_WR_Byte ; 0xe34
;;;344        OLED_WR_Byte(0X00, OLED_CMD);
        0x00000c3a:    2100        .!      MOVS     r1,#0
        0x00000c3c:    4608        .F      MOV      r0,r1
        0x00000c3e:    f000f8f9    ....    BL       OLED_WR_Byte ; 0xe34
;;;345        OLED_WR_Byte(0x40, OLED_CMD);
        0x00000c42:    2100        .!      MOVS     r1,#0
        0x00000c44:    2040        @       MOVS     r0,#0x40
        0x00000c46:    f000f8f5    ....    BL       OLED_WR_Byte ; 0xe34
;;;346    
;;;347        OLED_WR_Byte(0x8D, OLED_CMD);
        0x00000c4a:    2100        .!      MOVS     r1,#0
        0x00000c4c:    208d        .       MOVS     r0,#0x8d
        0x00000c4e:    f000f8f1    ....    BL       OLED_WR_Byte ; 0xe34
;;;348        OLED_WR_Byte(0x14, OLED_CMD);
        0x00000c52:    2100        .!      MOVS     r1,#0
        0x00000c54:    2014        .       MOVS     r0,#0x14
        0x00000c56:    f000f8ed    ....    BL       OLED_WR_Byte ; 0xe34
;;;349        OLED_WR_Byte(0x20, OLED_CMD);
        0x00000c5a:    2100        .!      MOVS     r1,#0
        0x00000c5c:    2020                MOVS     r0,#0x20
        0x00000c5e:    f000f8e9    ....    BL       OLED_WR_Byte ; 0xe34
;;;350        OLED_WR_Byte(0x02, OLED_CMD);
        0x00000c62:    2100        .!      MOVS     r1,#0
        0x00000c64:    2002        .       MOVS     r0,#2
        0x00000c66:    f000f8e5    ....    BL       OLED_WR_Byte ; 0xe34
;;;351        OLED_WR_Byte(0xA1, OLED_CMD);
        0x00000c6a:    2100        .!      MOVS     r1,#0
        0x00000c6c:    20a1        .       MOVS     r0,#0xa1
        0x00000c6e:    f000f8e1    ....    BL       OLED_WR_Byte ; 0xe34
;;;352        OLED_WR_Byte(0xC0, OLED_CMD);
        0x00000c72:    2100        .!      MOVS     r1,#0
        0x00000c74:    20c0        .       MOVS     r0,#0xc0
        0x00000c76:    f000f8dd    ....    BL       OLED_WR_Byte ; 0xe34
;;;353        OLED_WR_Byte(0xDA, OLED_CMD);
        0x00000c7a:    2100        .!      MOVS     r1,#0
        0x00000c7c:    20da        .       MOVS     r0,#0xda
        0x00000c7e:    f000f8d9    ....    BL       OLED_WR_Byte ; 0xe34
;;;354        OLED_WR_Byte(0x12, OLED_CMD);
        0x00000c82:    2100        .!      MOVS     r1,#0
        0x00000c84:    2012        .       MOVS     r0,#0x12
        0x00000c86:    f000f8d5    ....    BL       OLED_WR_Byte ; 0xe34
;;;355    
;;;356        OLED_WR_Byte(0x81, OLED_CMD);
        0x00000c8a:    2100        .!      MOVS     r1,#0
        0x00000c8c:    2081        .       MOVS     r0,#0x81
        0x00000c8e:    f000f8d1    ....    BL       OLED_WR_Byte ; 0xe34
;;;357        OLED_WR_Byte(0xEF, OLED_CMD);
        0x00000c92:    2100        .!      MOVS     r1,#0
        0x00000c94:    20ef        .       MOVS     r0,#0xef
        0x00000c96:    f000f8cd    ....    BL       OLED_WR_Byte ; 0xe34
;;;358        OLED_WR_Byte(0xD9, OLED_CMD);
        0x00000c9a:    2100        .!      MOVS     r1,#0
        0x00000c9c:    20d9        .       MOVS     r0,#0xd9
        0x00000c9e:    f000f8c9    ....    BL       OLED_WR_Byte ; 0xe34
;;;359        OLED_WR_Byte(0xf1, OLED_CMD);
        0x00000ca2:    2100        .!      MOVS     r1,#0
        0x00000ca4:    20f1        .       MOVS     r0,#0xf1
        0x00000ca6:    f000f8c5    ....    BL       OLED_WR_Byte ; 0xe34
;;;360        OLED_WR_Byte(0xDB, OLED_CMD);
        0x00000caa:    2100        .!      MOVS     r1,#0
        0x00000cac:    20db        .       MOVS     r0,#0xdb
        0x00000cae:    f000f8c1    ....    BL       OLED_WR_Byte ; 0xe34
;;;361        OLED_WR_Byte(0x30, OLED_CMD);
        0x00000cb2:    2100        .!      MOVS     r1,#0
        0x00000cb4:    2030        0       MOVS     r0,#0x30
        0x00000cb6:    f000f8bd    ....    BL       OLED_WR_Byte ; 0xe34
;;;362    
;;;363        OLED_WR_Byte(0xA4, OLED_CMD);
        0x00000cba:    2100        .!      MOVS     r1,#0
        0x00000cbc:    20a4        .       MOVS     r0,#0xa4
        0x00000cbe:    f000f8b9    ....    BL       OLED_WR_Byte ; 0xe34
;;;364        OLED_WR_Byte(0xA6, OLED_CMD);
        0x00000cc2:    2100        .!      MOVS     r1,#0
        0x00000cc4:    20a6        .       MOVS     r0,#0xa6
        0x00000cc6:    f000f8b5    ....    BL       OLED_WR_Byte ; 0xe34
;;;365        OLED_WR_Byte(0xAF, OLED_CMD);
        0x00000cca:    2100        .!      MOVS     r1,#0
        0x00000ccc:    20af        .       MOVS     r0,#0xaf
        0x00000cce:    f000f8b1    ....    BL       OLED_WR_Byte ; 0xe34
;;;366        OLED_Clear();
        0x00000cd2:    f7ffff57    ..W.    BL       OLED_Clear ; 0xb84
;;;367    }
        0x00000cd6:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x00000cd8:    40020240    @..@    DCD    1073873472
    $t
    i.OLED_Refresh_Gram
    OLED_Refresh_Gram
;;; ..\src\oled.c (58)
        0x00000cdc:    b570        p.      PUSH     {r4-r6,lr}
        0x00000cde:    4e10        .N      LDR      r6,[pc,#64] ; [0xd20] = 0x20000099
;;;59         uint8_t i, n;
;;;60         for (i = 0; i < 8; i++)
        0x00000ce0:    2400        .$      MOVS     r4,#0
;;;61         {
;;;62             OLED_WR_Byte(0xb0 + i, OLED_CMD);
        0x00000ce2:    4620         F      MOV      r0,r4
        0x00000ce4:    30b0        .0      ADDS     r0,r0,#0xb0
        0x00000ce6:    b2c0        ..      UXTB     r0,r0
        0x00000ce8:    2100        .!      MOVS     r1,#0
        0x00000cea:    f000f8a3    ....    BL       OLED_WR_Byte ; 0xe34
;;;63             OLED_WR_Byte(0x00, OLED_CMD);
        0x00000cee:    2100        .!      MOVS     r1,#0
        0x00000cf0:    4608        .F      MOV      r0,r1
        0x00000cf2:    f000f89f    ....    BL       OLED_WR_Byte ; 0xe34
;;;64             OLED_WR_Byte(0x10, OLED_CMD);
        0x00000cf6:    2100        .!      MOVS     r1,#0
        0x00000cf8:    2010        .       MOVS     r0,#0x10
        0x00000cfa:    f000f89b    ....    BL       OLED_WR_Byte ; 0xe34
;;;65             for (n = 0; n < 128; n++)
        0x00000cfe:    2500        .%      MOVS     r5,#0
        0x00000d00:    00e8        ..      LSLS     r0,r5,#3
        0x00000d02:    1980        ..      ADDS     r0,r0,r6
        0x00000d04:    5d00        .]      LDRB     r0,[r0,r4]
        0x00000d06:    2101        .!      MOVS     r1,#1
        0x00000d08:    f000f894    ....    BL       OLED_WR_Byte ; 0xe34
        0x00000d0c:    1c6d        m.      ADDS     r5,r5,#1
        0x00000d0e:    b2ed        ..      UXTB     r5,r5
        0x00000d10:    2d80        .-      CMP      r5,#0x80
        0x00000d12:    d3f5        ..      BCC      0xd00 ; OLED_Refresh_Gram + 36
        0x00000d14:    1c64        d.      ADDS     r4,r4,#1
        0x00000d16:    b2e4        ..      UXTB     r4,r4
        0x00000d18:    2c08        .,      CMP      r4,#8
        0x00000d1a:    d3e2        ..      BCC      0xce2 ; OLED_Refresh_Gram + 6
;;;66                 OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
;;;67         }
;;;68     }
        0x00000d1c:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x00000d1e:    0000        ..      DCW    0
        0x00000d20:    20000099    ...     DCD    536871065
    $t
    i.OLED_ShowChar
    OLED_ShowChar
;;;69     
;;;70     
;;;71     void OLED_Refresh_GramPart(void)
;;;72     {
;;;73         uint8_t i, n;
;;;74         i = 0;
;;;75         OLED_WR_Byte(0xb0 + i, OLED_CMD);
;;;76         OLED_WR_Byte(0x00, OLED_CMD);
;;;77         OLED_WR_Byte(0x10, OLED_CMD);
;;;78         for (n = 0; n < 128; n++)
;;;79             OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
;;;80     }
;;;81     
;;;82     /**
;;;83      * @brief turn on the OLED
;;;84      * @param[in] <none>
;;;85      * @return none
;;;86      */
;;;87     void OLED_Display_On(void)
;;;88     {
;;;89         OLED_WR_Byte(0X8D, OLED_CMD);
;;;90         OLED_WR_Byte(0X14, OLED_CMD);
;;;91         OLED_WR_Byte(0XAF, OLED_CMD);
;;;92     }
;;;93     
;;;94     /**
;;;95      * @brief turn off the OLED
;;;96      * @param[in] <none>
;;;97      * @return none
;;;98      */
;;;99     void OLED_Display_Off(void)
;;;100    {
;;;101        OLED_WR_Byte(0X8D, OLED_CMD);
;;;102        OLED_WR_Byte(0X10, OLED_CMD);
;;;103        OLED_WR_Byte(0XAE, OLED_CMD);
;;;104    }
;;;105    
;;;106    /**
;;;107     * @brief clear the OLED configuration to initialize
;;;108     * @param[in] <none>
;;;109     * @return none
;;;110     after clear the OLED will be black
;;;111     */
;;;112    void OLED_Clear(void)
;;;113    {
;;;114        uint8_t i, n;
;;;115        for (i = 0; i < 8; i++)
;;;116            for (n = 0; n < 128; n++)
;;;117                OLED_GRAM[n][i] = 0x00;
;;;118        OLED_Refresh_Gram();
;;;119    }
;;;120    
;;;121    /**
;;;122     * @brief weight memory
;;;123     * @param[in] <x> abscissa axis
;;;124     * @param[in] <y> vertical axis
;;;125     * @param[in] <t> 1:point 0:no point
;;;126     * @return none
;;;127     */
;;;128    void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
;;;129    {
;;;130        uint8_t pos, bx, temp = 0;
;;;131        if (x > 127 || y > 63)
;;;132            return;
;;;133        pos = 7 - y / 8;
;;;134        bx = y % 8;
;;;135        temp = 1 << (7 - bx);
;;;136        if (t)
;;;137            OLED_GRAM[x][pos] |= temp;
;;;138        else
;;;139            OLED_GRAM[x][pos] &= ~temp;
;;;140    }
;;;141    
;;;142    void OLED_ReversePoint(uint8_t x, uint8_t y)
;;;143    {
;;;144        uint8_t pos, bx, temp = 0;
;;;145        if (x > 127 || y > 63)
;;;146            return;
;;;147        pos = 7 - y / 8;
;;;148        bx = y % 8;
;;;149        temp = 1 << (7 - bx);
;;;150    //    uint8_t t;
;;;151        if (OLED_GRAM[x][pos] & temp)
;;;152            OLED_GRAM[x][pos] &= ~temp;
;;;153        else
;;;154            OLED_GRAM[x][pos] |= temp;
;;;155    
;;;156    }
;;;157    /**
;;;158     * @brief paint  area
;;;159     * @param[in] <x1> abscissa axis of left
;;;160     * @param[in] <y1> vertical axis of left
;;;161     * @param[in] <x2> abscissa axis of right
;;;162     * @param[in] <y2> vertical axis of right
;;;163     * @param[in] <dot> 1:point 0:no point
;;;164     * @return none
;;;165     */
;;;166    void OLED_Fill(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t dot)
;;;167    {
;;;168        uint8_t x, y;
;;;169        for (x = x1; x <= x2; x++)
;;;170        {
;;;171            for (y = y1; y <= y2; y++)
;;;172                OLED_DrawPoint(x, y, dot);
;;;173        }
;;;174        OLED_Refresh_Gram();
;;;175    }
;;;176    
;;;177    /**
;;;178     * @brief show a char on OLED
;;;179     * @param[in] <x> abscissa axis
;;;180     * @param[in] <y> vertical axis
;;;181     * @param[in] <char> char
;;;182     * @param[in] <size> size of word 12 0r 16 or 24
;;;183     * @param[in] <mode> show mode  0:with shadow 1:without shadow
;;;184     * @return result
;;;185     */
;;;186    void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode)
;;;187    {
        0x00000d24:    b5ff        ..      PUSH     {r0-r7,lr}
        0x00000d26:    b086        ..      SUB      sp,sp,#0x18
        0x00000d28:    460c        .F      MOV      r4,r1
        0x00000d2a:    08d8        ..      LSRS     r0,r3,#3
        0x00000d2c:    9104        ..      STR      r1,[sp,#0x10]
;;; ..\src\oled.c (187)
        0x00000d2e:    461d        .F      MOV      r5,r3
        0x00000d30:    0759        Y.      LSLS     r1,r3,#29
        0x00000d32:    d000        ..      BEQ      0xd36 ; OLED_ShowChar + 18
;;;188        uint8_t temp, t, t1;
;;;189        uint8_t y0 = y;
;;;190        uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);
        0x00000d34:    2101        .!      MOVS     r1,#1
        0x00000d36:    1840        @.      ADDS     r0,r0,r1
        0x00000d38:    0869        i.      LSRS     r1,r5,#1
        0x00000d3a:    4348        HC      MULS     r0,r1,r0
        0x00000d3c:    b2c0        ..      UXTB     r0,r0
        0x00000d3e:    3a20         :      SUBS     r2,r2,#0x20
;;;191        chr = chr - ' ';
        0x00000d40:    9001        ..      STR      r0,[sp,#4]
        0x00000d42:    b2d0        ..      UXTB     r0,r2
;;;192        for (t = 0; t < csize; t++)
        0x00000d44:    2600        .&      MOVS     r6,#0
        0x00000d46:    9008        ..      STR      r0,[sp,#0x20]
        0x00000d48:    e03a        :.      B        0xdc0 ; OLED_ShowChar + 156
;;;193        {
;;;194            if (size == 12)
        0x00000d4a:    2d0c        .-      CMP      r5,#0xc
        0x00000d4c:    d00f        ..      BEQ      0xd6e ; OLED_ShowChar + 74
;;;195                temp = asc2_1206[chr][t];
;;;196            else if (size == 16)
        0x00000d4e:    2d10        .-      CMP      r5,#0x10
        0x00000d50:    d012        ..      BEQ      0xd78 ; OLED_ShowChar + 84
;;;197                temp = asc2_1608[chr][t];
;;;198            else if (size == 24)
        0x00000d52:    2d18        .-      CMP      r5,#0x18
        0x00000d54:    d137        7.      BNE      0xdc6 ; OLED_ShowChar + 162
;;;199                temp = asc2_2412[chr][t];
        0x00000d56:    9808        ..      LDR      r0,[sp,#0x20]
        0x00000d58:    2124        $!      MOVS     r1,#0x24
        0x00000d5a:    4348        HC      MULS     r0,r1,r0
        0x00000d5c:    491b        .I      LDR      r1,[pc,#108] ; [0xdcc] = 0x3dac
        0x00000d5e:    1840        @.      ADDS     r0,r0,r1
        0x00000d60:    5d87        .]      LDRB     r7,[r0,r6]
;;;200            else
;;;201                return;
;;;202            for (t1 = 0; t1 < 8; t1++)
        0x00000d62:    2000        .       MOVS     r0,#0
        0x00000d64:    9003        ..      STR      r0,[sp,#0xc]
        0x00000d66:    0638        8.      LSLS     r0,r7,#24
        0x00000d68:    d50a        ..      BPL      0xd80 ; OLED_ShowChar + 92
        0x00000d6a:    9a0f        ..      LDR      r2,[sp,#0x3c]
        0x00000d6c:    e00c        ..      B        0xd88 ; OLED_ShowChar + 100
        0x00000d6e:    9808        ..      LDR      r0,[sp,#0x20]
        0x00000d70:    210c        .!      MOVS     r1,#0xc
        0x00000d72:    4348        HC      MULS     r0,r1,r0
        0x00000d74:    4916        .I      LDR      r1,[pc,#88] ; [0xdd0] = 0x3348
        0x00000d76:    e7f2        ..      B        0xd5e ; OLED_ShowChar + 58
        0x00000d78:    9808        ..      LDR      r0,[sp,#0x20]
        0x00000d7a:    4916        .I      LDR      r1,[pc,#88] ; [0xdd4] = 0x37bc
        0x00000d7c:    0100        ..      LSLS     r0,r0,#4
        0x00000d7e:    e7ee        ..      B        0xd5e ; OLED_ShowChar + 58
        0x00000d80:    980f        ..      LDR      r0,[sp,#0x3c]
        0x00000d82:    2800        .(      CMP      r0,#0
        0x00000d84:    d012        ..      BEQ      0xdac ; OLED_ShowChar + 136
        0x00000d86:    2200        ."      MOVS     r2,#0
        0x00000d88:    4621        !F      MOV      r1,r4
        0x00000d8a:    9806        ..      LDR      r0,[sp,#0x18]
        0x00000d8c:    f7ffff10    ....    BL       OLED_DrawPoint ; 0xbb0
        0x00000d90:    0678        x.      LSLS     r0,r7,#25
        0x00000d92:    0e07        ..      LSRS     r7,r0,#24
        0x00000d94:    1c64        d.      ADDS     r4,r4,#1
        0x00000d96:    9804        ..      LDR      r0,[sp,#0x10]
        0x00000d98:    b2e4        ..      UXTB     r4,r4
        0x00000d9a:    1a20         .      SUBS     r0,r4,r0
        0x00000d9c:    42a8        .B      CMP      r0,r5
        0x00000d9e:    d107        ..      BNE      0xdb0 ; OLED_ShowChar + 140
        0x00000da0:    9806        ..      LDR      r0,[sp,#0x18]
        0x00000da2:    9c04        ..      LDR      r4,[sp,#0x10]
        0x00000da4:    1c40        @.      ADDS     r0,r0,#1
        0x00000da6:    b2c0        ..      UXTB     r0,r0
        0x00000da8:    9006        ..      STR      r0,[sp,#0x18]
        0x00000daa:    e007        ..      B        0xdbc ; OLED_ShowChar + 152
        0x00000dac:    2201        ."      MOVS     r2,#1
        0x00000dae:    e7eb        ..      B        0xd88 ; OLED_ShowChar + 100
        0x00000db0:    9803        ..      LDR      r0,[sp,#0xc]
        0x00000db2:    1c40        @.      ADDS     r0,r0,#1
        0x00000db4:    b2c0        ..      UXTB     r0,r0
        0x00000db6:    9003        ..      STR      r0,[sp,#0xc]
        0x00000db8:    2808        .(      CMP      r0,#8
        0x00000dba:    d3d4        ..      BCC      0xd66 ; OLED_ShowChar + 66
        0x00000dbc:    1c76        v.      ADDS     r6,r6,#1
        0x00000dbe:    b2f6        ..      UXTB     r6,r6
        0x00000dc0:    9801        ..      LDR      r0,[sp,#4]
        0x00000dc2:    4286        .B      CMP      r6,r0
        0x00000dc4:    d3c1        ..      BCC      0xd4a ; OLED_ShowChar + 38
;;;203            {
;;;204                if (temp & 0x80)
;;;205                    OLED_DrawPoint(x, y, mode);
;;;206                else
;;;207                    OLED_DrawPoint(x, y, !mode);
;;;208                temp <<= 1;
;;;209                y++;
;;;210                if ((y - y0) == size)
;;;211                {
;;;212                    y = y0;
;;;213                    x++;
;;;214                    break;
;;;215                }
;;;216            }
;;;217        }
;;;218    }
        0x00000dc6:    b00a        ..      ADD      sp,sp,#0x28
        0x00000dc8:    bdf0        ..      POP      {r4-r7,pc}
    $d
        0x00000dca:    0000        ..      DCW    0
        0x00000dcc:    00003dac    .=..    DCD    15788
        0x00000dd0:    00003348    H3..    DCD    13128
        0x00000dd4:    000037bc    .7..    DCD    14268
    $t
    i.OLED_ShowString
    OLED_ShowString
;;;219    
;;;220    /**
;;;221     * @brief calculate m^n
;;;222     * @param[in] <m>
;;;223     * @param[in] <n>
;;;224     * @return result
;;;225     */
;;;226    uint32_t mypow(uint8_t m, uint8_t n)
;;;227    {
;;;228        uint32_t result = 1;
;;;229        while (n--)
;;;230            result *= m;
;;;231        return result;
;;;232    }
;;;233    
;;;234    /**
;;;235     * @brief show number on OLED
;;;236     * @param[in] <x> abscissa axis
;;;237     * @param[in] <y> vertical axis
;;;238     * @param[in] <num> number (0~4294967295)
;;;239     * @param[in] <len> length of number
;;;240     * @param[in] <size> size of word 16 0r 12
;;;241     * @return result
;;;242     */
;;;243    void OLED_ShowNum(uint8_t x, uint8_t y, uint32_t num, uint8_t len, uint8_t size)
;;;244    {
;;;245        uint8_t t, temp;
;;;246        uint8_t enshow = 0;
;;;247        for (t = 0; t < len; t++)
;;;248        {
;;;249            temp = (num / mypow(10, len - t - 1)) % 10;
;;;250            if (enshow == 0 && t < (len - 1))
;;;251            {
;;;252                if (temp == 0)
;;;253                {
;;;254                    OLED_ShowChar(x + (size / 2) * t, y, '0', size, 1);
;;;255                    continue;
;;;256                }
;;;257                else
;;;258                    enshow = 1;
;;;259            }
;;;260            OLED_ShowChar(x + (size / 2) * t, y, temp + '0', size, 1);
;;;261        }
;;;262    }
;;;263    
;;;264    /**
;;;265     * @brief show string on OLED
;;;266     * @param[in] <x> abscissa axis
;;;267     * @param[in] <y> vertical axis
;;;268     * @param[in] <p> string
;;;269     * @param[in] <size> size of word 16 0r 12
;;;270     * @return result
;;;271     */
;;;272    void OLED_ShowString(uint8_t x, uint8_t y, char *p, uint8_t size)
;;;273    {
        0x00000dd8:    b5ff        ..      PUSH     {r0-r7,lr}
        0x00000dda:    b083        ..      SUB      sp,sp,#0xc
        0x00000ddc:    4604        .F      MOV      r4,r0
        0x00000dde:    9806        ..      LDR      r0,[sp,#0x18]
;;; ..\src\oled.c (273)
        0x00000de0:    460d        .F      MOV      r5,r1
        0x00000de2:    0847        G.      LSRS     r7,r0,#1
        0x00000de4:    2080        .       MOVS     r0,#0x80
        0x00000de6:    1bc0        ..      SUBS     r0,r0,r7
        0x00000de8:    9002        ..      STR      r0,[sp,#8]
        0x00000dea:    9806        ..      LDR      r0,[sp,#0x18]
        0x00000dec:    2140        @!      MOVS     r1,#0x40
        0x00000dee:    1a08        ..      SUBS     r0,r1,r0
        0x00000df0:    4616        .F      MOV      r6,r2
        0x00000df2:    9001        ..      STR      r0,[sp,#4]
        0x00000df4:    e018        ..      B        0xe28 ; OLED_ShowString + 80
;;;274        while ((*p <= '~') && (*p >= ' '))
;;;275        {
;;;276            if (x > (128 - (size / 2)))
        0x00000df6:    9802        ..      LDR      r0,[sp,#8]
        0x00000df8:    42a0        .B      CMP      r0,r4
        0x00000dfa:    d203        ..      BCS      0xe04 ; OLED_ShowString + 44
        0x00000dfc:    9806        ..      LDR      r0,[sp,#0x18]
;;;277            {
;;;278                x = 0;
        0x00000dfe:    2400        .$      MOVS     r4,#0
;;;279                y += size;
        0x00000e00:    1828        (.      ADDS     r0,r5,r0
        0x00000e02:    b2c5        ..      UXTB     r5,r0
;;;280            }
;;;281            if (y > (64 - size))
        0x00000e04:    9801        ..      LDR      r0,[sp,#4]
        0x00000e06:    42a8        .B      CMP      r0,r5
        0x00000e08:    da03        ..      BGE      0xe12 ; OLED_ShowString + 58
;;;282            {
;;;283                y = x = 0;
        0x00000e0a:    2400        .$      MOVS     r4,#0
        0x00000e0c:    4625        %F      MOV      r5,r4
;;;284                OLED_Clear();
        0x00000e0e:    f7fffeb9    ....    BL       OLED_Clear ; 0xb84
;;;285            }
;;;286            OLED_ShowChar(x, y, *p, size, 1);
        0x00000e12:    2001        .       MOVS     r0,#1
        0x00000e14:    9000        ..      STR      r0,[sp,#0]
        0x00000e16:    7832        2x      LDRB     r2,[r6,#0]
        0x00000e18:    4629        )F      MOV      r1,r5
        0x00000e1a:    4620         F      MOV      r0,r4
        0x00000e1c:    9b06        ..      LDR      r3,[sp,#0x18]
        0x00000e1e:    f7ffff81    ....    BL       OLED_ShowChar ; 0xd24
;;;287            x += size / 2;
        0x00000e22:    1938        8.      ADDS     r0,r7,r4
        0x00000e24:    b2c4        ..      UXTB     r4,r0
        0x00000e26:    1c76        v.      ADDS     r6,r6,#1
        0x00000e28:    7830        0x      LDRB     r0,[r6,#0]
        0x00000e2a:    3820         8      SUBS     r0,r0,#0x20
        0x00000e2c:    285e        ^(      CMP      r0,#0x5e
        0x00000e2e:    d9e2        ..      BLS      0xdf6 ; OLED_ShowString + 30
;;;288            p++;
;;;289        }
;;;290    }
        0x00000e30:    b007        ..      ADD      sp,sp,#0x1c
        0x00000e32:    bdf0        ..      POP      {r4-r7,pc}
    i.OLED_WR_Byte
    OLED_WR_Byte
        0x00000e34:    b530        0.      PUSH     {r4,r5,lr}
;;; ..\src\oled.c (35)
        0x00000e36:    4a0b        .J      LDR      r2,[pc,#44] ; [0xe64] = 0x40020240
        0x00000e38:    6091        .`      STR      r1,[r2,#8]
;;;36     
;;;37         OLED_CS(Disable);
        0x00000e3a:    2100        .!      MOVS     r1,#0
        0x00000e3c:    6011        .`      STR      r1,[r2,#0]
;;;38         for (i = 0; i < 8; i++)
        0x00000e3e:    460b        .F      MOV      r3,r1
        0x00000e40:    2401        .$      MOVS     r4,#1
;;;39         {
;;;40             OLED_SCLK(Disable);
        0x00000e42:    6051        Q`      STR      r1,[r2,#4]
;;;41             if (dat & 0x80)
        0x00000e44:    0605        ..      LSLS     r5,r0,#24
        0x00000e46:    d501        ..      BPL      0xe4c ; OLED_WR_Byte + 24
;;;42                 OLED_SDIN(Enable);
        0x00000e48:    60d4        .`      STR      r4,[r2,#0xc]
        0x00000e4a:    e000        ..      B        0xe4e ; OLED_WR_Byte + 26
;;;43             else
;;;44                 OLED_SDIN(Disable);
        0x00000e4c:    60d1        .`      STR      r1,[r2,#0xc]
;;;45             OLED_SCLK(Enable);
        0x00000e4e:    6054        T`      STR      r4,[r2,#4]
;;;46             dat <<= 1;
        0x00000e50:    0640        @.      LSLS     r0,r0,#25
        0x00000e52:    1c5b        [.      ADDS     r3,r3,#1
        0x00000e54:    0e00        ..      LSRS     r0,r0,#24
        0x00000e56:    b2db        ..      UXTB     r3,r3
        0x00000e58:    2b08        .+      CMP      r3,#8
        0x00000e5a:    d3f2        ..      BCC      0xe42 ; OLED_WR_Byte + 14
;;;47         }
;;;48         OLED_CS(Enable);
        0x00000e5c:    6014        .`      STR      r4,[r2,#0]
;;;49         OLED_DC(Enable);
        0x00000e5e:    6094        .`      STR      r4,[r2,#8]
;;;50     }
        0x00000e60:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x00000e62:    0000        ..      DCW    0
        0x00000e64:    40020240    @..@    DCD    1073873472
    $t
    i.PAN216_Calibration
    PAN216_Calibration
;;; ..\..\..\..\radio\pan216.c
;;;169    {
        0x00000e68:    b510        ..      PUSH     {r4,lr}
;;;170        /* Set Page 1 */
;;;171        PAN216_WriteReg(0x00, 0x01);
        0x00000e6a:    2101        .!      MOVS     r1,#1
        0x00000e6c:    2000        .       MOVS     r0,#0
        0x00000e6e:    f000fe27    ..'.    BL       PAN216_WriteReg ; 0x1ac0
;;;172        /* Start VCO calibration */
;;;173        PAN216_WriteReg(0x1b, BIT3);
        0x00000e72:    2108        .!      MOVS     r1,#8
        0x00000e74:    201b        .       MOVS     r0,#0x1b
        0x00000e76:    f000fe23    ..#.    BL       PAN216_WriteReg ; 0x1ac0
;;;174        /* Wait for VCO calibration to complete, 30 (32M Crystal)/ 48 (16M Crystal) us minimum */
;;;175        Pan216_Funs.delayus(300);
        0x00000e7a:    4c15        .L      LDR      r4,[pc,#84] ; [0xed0] = 0x20000010
        0x00000e7c:    20ff        .       MOVS     r0,#0xff
        0x00000e7e:    6921        !i      LDR      r1,[r4,#0x10]
        0x00000e80:    302d        -0      ADDS     r0,r0,#0x2d
        0x00000e82:    4788        .G      BLX      r1
;;;176        // while (((PAN216_ReadReg(0x70) & BIT6) != BIT6))
;;;177        //     ;
;;;178        /* Start TP calibration */
;;;179        PAN216_WriteReg(0x1b, BIT4);
        0x00000e84:    2110        .!      MOVS     r1,#0x10
        0x00000e86:    201b        .       MOVS     r0,#0x1b
        0x00000e88:    f000fe1a    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;180        /* Wait for TP calibration to complete, 44 ms minimum */
;;;181        Pan216_Funs.delayms(55);
        0x00000e8c:    6961        ai      LDR      r1,[r4,#0x14]
        0x00000e8e:    2037        7       MOVS     r0,#0x37
        0x00000e90:    4788        .G      BLX      r1
;;;182        /* Enter RX mode */
;;;183        PAN216_WriteReg(0x02, 0x76);
        0x00000e92:    2176        v!      MOVS     r1,#0x76
        0x00000e94:    2002        .       MOVS     r0,#2
        0x00000e96:    f000fe13    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;184        Pan216_Funs.delayus(200);
        0x00000e9a:    6921        !i      LDR      r1,[r4,#0x10]
        0x00000e9c:    20c8        .       MOVS     r0,#0xc8
        0x00000e9e:    4788        .G      BLX      r1
;;;185        /* Start Offset calibration */
;;;186        PAN216_WriteReg(0x1b, BIT5);
        0x00000ea0:    2120         !      MOVS     r1,#0x20
        0x00000ea2:    201b        .       MOVS     r0,#0x1b
        0x00000ea4:    f000fe0c    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;187        /* Wait for Offset calibration to complete, 370 (32M Crystal)/ 590 (16M Crystal) us minimum */
;;;188        Pan216_Funs.delayus(700);
        0x00000ea8:    20af        .       MOVS     r0,#0xaf
        0x00000eaa:    6921        !i      LDR      r1,[r4,#0x10]
        0x00000eac:    0080        ..      LSLS     r0,r0,#2
        0x00000eae:    4788        .G      BLX      r1
;;;189        // while (((PAN216_ReadReg(0x7f) & BIT7) != BIT7));
;;;190        /* Start BW calibration */
;;;191        PAN216_WriteReg(0x1b, BIT6);
        0x00000eb0:    2140        @!      MOVS     r1,#0x40
        0x00000eb2:    201b        .       MOVS     r0,#0x1b
        0x00000eb4:    f000fe04    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;192        /* Wait for BW calibration to complete, 340 us minimum */
;;;193        Pan216_Funs.delayus(400);
        0x00000eb8:    20ff        .       MOVS     r0,#0xff
        0x00000eba:    6921        !i      LDR      r1,[r4,#0x10]
        0x00000ebc:    3091        .0      ADDS     r0,r0,#0x91
        0x00000ebe:    4788        .G      BLX      r1
;;;194        // while (((PAN216_ReadReg(0x6d) & BIT7) != BIT7))
;;;195        //     ;
;;;196        /* Start DCOC calibration */
;;;197        PAN216_WriteReg(0x1b, BIT7);
        0x00000ec0:    2180        .!      MOVS     r1,#0x80
        0x00000ec2:    201b        .       MOVS     r0,#0x1b
        0x00000ec4:    f000fdfc    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;198        /* Wait for DCOC calibration to complete, 1030 us minimum */
;;;199        Pan216_Funs.delayus(1100);
        0x00000ec8:    6921        !i      LDR      r1,[r4,#0x10]
        0x00000eca:    4802        .H      LDR      r0,[pc,#8] ; [0xed4] = 0x44c
        0x00000ecc:    4788        .G      BLX      r1
;;;200        // while (((PAN216_ReadReg(0x7f) & BIT7) != BIT7))
;;;201        //  ;
;;;202    }
        0x00000ece:    bd10        ..      POP      {r4,pc}
    $d
        0x00000ed0:    20000010    ...     DCD    536870928
        0x00000ed4:    0000044c    L...    DCD    1100
    $t
    i.PAN216_ClearIRQFlags
    PAN216_ClearIRQFlags
;;;203    
;;;204    void PAN216_FinishCalibration(void)
;;;205    {
;;;206        /* Stop DCOC calibration */
;;;207        PAN216_WriteReg(0x1b, 0x00);
;;;208    
;;;209        /* Enter STB3 mode */
;;;210        PAN216_WriteReg(0x02, 0x74);
;;;211        /* Set Page 0 */
;;;212        PAN216_WriteReg(0x00, 0x00);
;;;213    }
;;;214    
;;;215    /**
;;;216     * @brief Enter Sleep Mode from Standby Mode
;;;217     *
;;;218     * @return PAN216_Err_t
;;;219     */
;;;220    PAN216_Err_t PAN216_EnterSleep(void)
;;;221    {
;;;222        P_ASSERT(PAN216_WriteReg(0x02, 0x74));
;;;223    #if INTERFACE_MODE == USE_I2C
;;;224        P_ASSERT(PAN216_WriteReg(0x02, 0x71));
;;;225    #else
;;;226        P_ASSERT(PAN216_WriteReg(0x02, 0x21));
;;;227    #endif
;;;228    
;;;229        return PAN216_OK;
;;;230    }
;;;231    
;;;232    /**
;;;233     * @brief Exit Sleep Mode and enter Standby Mode
;;;234     *
;;;235     * @return PAN216_Err_t
;;;236     */
;;;237    PAN216_Err_t PAN216_ExitSleep(void)
;;;238    {
;;;239        P_ASSERT(PAN216_WriteReg(0x02, 0x22)); // stb1
;;;240        P_ASSERT(PAN216_WriteReg(0x02, 0x74)); // stb3
;;;241        Pan216_Funs.delayus(500);              // waiting for CLKRDY, 440us(32M)
;;;242    
;;;243        return PAN216_OK;
;;;244    }
;;;245    
;;;246    /**
;;;247     * @brief Exit the TX state and enter standby mode. Make sure IRQ is cleared before calling this
;;;248     * function
;;;249     *
;;;250     * @param None
;;;251     *
;;;252     * @return Result of the operation
;;;253     *         - PAN216_OK
;;;254     *         - PAN216_ERR
;;;255     */
;;;256    PAN216_Err_t PAN216_ExitTxMode(void)
;;;257    {
;;;258        P_ASSERT(PAN216_WriteReg(0x02, 0x74));
;;;259    
;;;260        return PAN216_OK;
;;;261    }
;;;262    
;;;263    /**
;;;264     * @brief Exit the RX mode and enter standby mode. Make sure IRQ is cleared before calling this
;;;265     * function
;;;266     *
;;;267     * @param None
;;;268     *
;;;269     * @return Result of the operation
;;;270     *         - PAN216_OK
;;;271     *         - PAN216_ERR
;;;272     */
;;;273    PAN216_Err_t PAN216_ExitRxMode(void)
;;;274    {
;;;275        P_ASSERT(PAN216_WriteReg(0x02, 0x74));
;;;276    
;;;277        return PAN216_OK;
;;;278    }
;;;279    
;;;280    /**
;;;281     * @brief Prepares the PAN216 transceiver to enter TX or RX mode.
;;;282     *
;;;283     * This function configures the transceiver to switch between TX and RX modes. It sets the
;;;284     * appropriate registers to ensure the transceiver is ready for transmission or reception.
;;;285     * If the transceiver is already in the desired mode, this function does nothing.
;;;286     *
;;;287     * @param mode The desired mode to set, either PAN216_TX or PAN216_RX.
;;;288     *
;;;289     * @return PAN216_Err_t Result of the operation
;;;290     *         - PAN216_OK: Operation was successful
;;;291     *         - PAN216_ERR: Operation failed
;;;292     */
;;;293    PAN216_Err_t PAN216_PrepareTRxWithAck(PAN216_TRXMode_t Mode, bool EnAck)
;;;294    {
;;;295        if (EnAck == true)
;;;296        {
;;;297            /* Uses Tx confiruration if ACK is enabled */
;;;298            Mode = PAN216_TX;
;;;299        }
;;;300    
;;;301        if (Mode == PAN216_TX)
;;;302        {
;;;303            PAN216_WriteReg(0x00, 0x01);
;;;304            PAN216_WriteReg(0x42, 0xa4);
;;;305            PAN216_WriteReg(0x00, 0x00);
;;;306        }
;;;307        else if (Mode == PAN216_RX)
;;;308        {
;;;309            PAN216_WriteReg(0x00, 0x01);
;;;310            PAN216_WriteReg(0x42, 0xa0);
;;;311            PAN216_WriteReg(0x00, 0x00);
;;;312        }
;;;313    
;;;314        return PAN216_OK;
;;;315    }
;;;316    
;;;317    /**
;;;318     * @brief Exit the RX mode and enter standby mode. Make sure IRQ is cleared before calling this
;;;319     * function
;;;320     *
;;;321     * @return PAN216_Err_t
;;;322     */
;;;323    PAN216_Err_t PAN216_TxStart(void)
;;;324    {
;;;325        P_ASSERT(PAN216_WriteReg(0x02, 0x74));
;;;326        P_ASSERT(PAN216_WriteReg(0x02, 0x75));
;;;327    
;;;328        return PAN216_OK;
;;;329    }
;;;330    
;;;331    /**
;;;332     * @brief Exit the RX mode and enter standby mode. Make sure IRQ is cleared before calling this
;;;333     function
;;;334    
;;;335     *
;;;336     * @return PAN216_Err_t
;;;337     */
;;;338    PAN216_Err_t PAN216_RxStart(void)
;;;339    {
;;;340        P_ASSERT(PAN216_WriteReg(0x02, 0x74));
;;;341        P_ASSERT(PAN216_WriteReg(0x02, 0x76));
;;;342    
;;;343        return PAN216_OK;
;;;344    }
;;;345    
;;;346    /**
;;;347     * @brief Sets the frequency channel of the PAN216 transceiver
;;;348     *
;;;349     * @param Channel The desired radio frequency channel, as a value from 0 to 83
;;;350     *
;;;351     * @note The actual frequency will be (2400 + Channel)MHz
;;;352     * @note The PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
;;;353     *
;;;354     * @return uint8_t Result of the operation
;;;355     *         - PAN216_OK
;;;356     *         - PAN216_ERR
;;;357     */
;;;358    PAN216_Err_t PAN216_SetChannel(uint8_t Channel)
;;;359    {
;;;360        return PAN216_WriteReg(REG_P0_0X39, Channel);
;;;361    }
;;;362    
;;;363    /**
;;;364     * @brief Sets the address width of the PAN216 transceiver
;;;365     *
;;;366     * This function is used to set the RX/TX address field width of the PAN216 transceiver.
;;;367     * The address width is specified as a value between 3 and 5.
;;;368     *
;;;369     * @param AddrWidth The desired address width, as a value from 3 to 5
;;;370     *          - 00 2bytes
;;;371     *          - 01 3bytes
;;;372     *          - 10 4bytes
;;;373     *          - 11 5bytes
;;;374     * @return uint8_t Result of the operation
;;;375     *         - PAN216_OK
;;;376     *         - PAN216_ERR
;;;377     */
;;;378    PAN216_Err_t PAN216_SetAddrWidth(PAN216_AddrWidth_t AddrWidth)
;;;379    {
;;;380        P_ASSERT(PAN216_WriteRegBits(WMODE_CFG1, AddrWidth - 2, WMODE_CFG1_ADDR_BYTE_LENGTH));
;;;381    
;;;382        return PAN216_OK;
;;;383    }
;;;384    
;;;385    /**
;;;386     * @brief Set static RX address for a specified pipe
;;;387     *
;;;388     * @param Pipe - pipe to configure address, one of PAN216_Pipe_t values
;;;389     * @param Addr - pointer to the buffer with address
;;;390     * @param len - length of address
;;;391     * @note Pipe can be a number from 0 to 5 (RX pipes)
;;;392     * @note Buffer length must be equal to current address width of transceiver
;;;393     * @note For pipes[2..5] only the first byte of address will be written because other bytes of
;;;394     * address equals to pipe1
;;;395     * @note For pipes[2..5] only the first byte of address will be written because pipes 1-5 share the
;;;396     * four most significant address bytes
;;;397     * @return uint8_t Result of the operation
;;;398     *         - PAN216_OK
;;;399     *         - PAN216_ERR
;;;400     */
;;;401    PAN216_Err_t PAN216_SetRxAddr(PAN216_Pipe_t Pipe, uint8_t *Addr, uint8_t len)
;;;402    {
;;;403    
;;;404        switch (Pipe)
;;;405        {
;;;406        case PAN216_PIPE0:
;;;407            P_ASSERT(PAN216_WriteRegs(PIPE0_RXADDR0_CFG, Addr, len));
;;;408            break;
;;;409        case PAN216_PIPE1:
;;;410            P_ASSERT(PAN216_WriteRegs(PIPE1_RXADDR0_CFG, Addr, len));
;;;411            break;
;;;412        case PAN216_PIPE2:
;;;413            P_ASSERT(PAN216_WriteReg(PIPE2_RXADDR0_CFG, Addr[0]));
;;;414            break;
;;;415        case PAN216_PIPE3:
;;;416            P_ASSERT(PAN216_WriteReg(PIPE3_RXADDR0_CFG, Addr[0]));
;;;417            break;
;;;418        case PAN216_PIPE4:
;;;419            P_ASSERT(PAN216_WriteReg(PIPE4_RXADDR0_CFG, Addr[0]));
;;;420            break;
;;;421        case PAN216_PIPE5:
;;;422            P_ASSERT(PAN216_WriteReg(PIPE5_RXADDR0_CFG, Addr[0]));
;;;423            break;
;;;424        default:
;;;425            return PAN216_ERR;
;;;426        }
;;;427    
;;;428        return PAN216_OK;
;;;429    }
;;;430    
;;;431    /**
;;;432     * @brief Set static TX address for the transceiver
;;;433     *
;;;434     * @param Addr Pointer to the buffer with address
;;;435     * @param AddrWidth TX address field width, value from 3 to 5
;;;436     * @return uint8_t Result of the operation
;;;437     *         - PAN216_OK
;;;438     *         - PAN216_ERR
;;;439     */
;;;440    PAN216_Err_t PAN216_SetTxAddr(uint8_t *Addr, uint8_t len)
;;;441    {
;;;442        return PAN216_WriteRegs(TXADDR0_CFG, Addr, len);
;;;443    }
;;;444    
;;;445    /**
;;;446     * @brief Get the pipe number for the payload available for reading from RX FIFO
;;;447     *
;;;448     * @return uint8_t Pipe number or 0xFF if the RX FIFO is empty
;;;449     *         - 0x00: Pipe 0
;;;450     *         - 0x01: Pipe 1
;;;451     *         - 0x02: Pipe 2
;;;452     *         - 0x03: Pipe 3
;;;453     *         - 0x04: Pipe 4
;;;454     *         - 0x05: Pipe 5
;;;455     * @return uint8_t Result of the operation
;;;456     *         - PAN216_OK
;;;457     *         - PAN216_ERR
;;;458     */
;;;459    PAN216_Pipe_t PAN216_GetRxPipeNum(void)
;;;460    {
;;;461        uint8_t pipeNum = (PAN216_ReadReg(STATUS0) >> 4) & 0x07;
;;;462    
;;;463        return (PAN216_Pipe_t)pipeNum;
;;;464    }
;;;465    
;;;466    /**
;;;467     * @brief Get pending IRQ flags
;;;468     *
;;;469     * @return Current status of RX_DONE, TX_DONE, RX_TIMEOUT, and MAX_RT bits of the STATUS register
;;;470     */
;;;471    uint8_t PAN216_GetIRQFlags(void)
;;;472    {
;;;473        return PAN216_ReadReg(RFIRQFLG);
;;;474    }
;;;475    
;;;476    /**
;;;477     * @brief Clears any pending IRQ flags of the PAN216 transceiver
;;;478     *
;;;479     * This function clears any pending IRQ flags of the PAN216 transceiver.
;;;480     *         - RF_IT_TX_IRQ
;;;481     *         - RF_IT_MAX_RT_IRQ
;;;482     *         - RF_IT_ADDR_ERR_IRQ
;;;483     *         - RF_IT_CRC_ERR_IRQ
;;;484     *         - RF_IT_LEN_ERR_IRQ
;;;485     *         - RF_IT_PID_ERR_IRQ
;;;486     *         - RF_IT_RX_TIMEOUT_IRQ
;;;487     *         - RF_IT_RX_IRQ
;;;488     * @return Result of the operation
;;;489     *         - PAN216_OK
;;;490     *         - PAN216_ERR
;;;491     */
;;;492    PAN216_Err_t PAN216_ClearIRQFlags(uint8_t flags)
;;;493    {
        0x00000ed8:    b510        ..      PUSH     {r4,lr}
;;;494        return PAN216_WriteRegUnchecked(RFIRQFLG, flags);
        0x00000eda:    4601        .F      MOV      r1,r0
        0x00000edc:    2073        s       MOVS     r0,#0x73
        0x00000ede:    f000fe4f    ..O.    BL       PAN216_WriteRegUnchecked ; 0x1b80
;;;495    }
        0x00000ee2:    bd10        ..      POP      {r4,pc}
    i.PAN216_ConfigIT
    PAN216_ConfigIT
;;;496    
;;;497    /**
;;;498     * @brief  This function is used to enable or disable RF interrupts
;;;499     * @param  NewState: which can be ENABLE or DISABLE
;;;500     * @param  RF_IT: Which can be
;;;501     *         - RF_IT_TX_IRQ
;;;502     *         - RF_IT_MAX_RT_IRQ
;;;503     *         - RF_IT_ADDR_ERR_IRQ
;;;504     *         - RF_IT_CRC_ERR_IRQ
;;;505     *         - RF_IT_LEN_ERR_IRQ
;;;506     *         - RF_IT_PID_ERR_IRQ
;;;507     *         - RF_IT_RX_TIMEOUT_IRQ
;;;508     *         - RF_IT_RX_IRQ
;;;509     * @return Result of the operation:
;;;510     *         - PAN216_OK
;;;511     *         - PAN216_ERR
;;;512     */
;;;513    PAN216_Err_t PAN216_ConfigIT(uint8_t RF_IT)
;;;514    {
;;;515        return PAN216_WriteReg(RFIRQ_CFG, ~RF_IT);
        0x00000ee4:    43c0        .C      MVNS     r0,r0
;;; ..\..\..\..\radio\pan216.c (514)
        0x00000ee6:    b510        ..      PUSH     {r4,lr}
;;;515        return PAN216_WriteReg(RFIRQ_CFG, ~RF_IT);
        0x00000ee8:    b2c1        ..      UXTB     r1,r0
        0x00000eea:    200b        .       MOVS     r0,#0xb
        0x00000eec:    f000fde8    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;516    }
        0x00000ef0:    bd10        ..      POP      {r4,pc}
    i.PAN216_CrcSkipAddr
    PAN216_CrcSkipAddr
;;; ..\..\..\..\radio\pan216_ext.c
;;;667    {
        0x00000ef2:    b510        ..      PUSH     {r4,lr}
        0x00000ef4:    2800        .(      CMP      r0,#0
        0x00000ef6:    d005        ..      BEQ      0xf04 ; PAN216_CrcSkipAddr + 18
;;;668        if (exclude)
;;;669        {
;;;670            return PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_ACCADDR_CRC_DIS);
        0x00000ef8:    2204        ."      MOVS     r2,#4
        0x00000efa:    2107        .!      MOVS     r1,#7
        0x00000efc:    2000        .       MOVS     r0,#0
        0x00000efe:    f000fbf2    ....    BL       PAN216_SetRegBits ; 0x16e6
        0x00000f02:    bd10        ..      POP      {r4,pc}
;;;671        }
;;;672        else
;;;673        {
;;;674            return PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_ACCADDR_CRC_DIS);
        0x00000f04:    2204        ."      MOVS     r2,#4
        0x00000f06:    2107        .!      MOVS     r1,#7
        0x00000f08:    2000        .       MOVS     r0,#0
        0x00000f0a:    f000fab5    ....    BL       PAN216_ResetRegBits ; 0x1478
;;;675        }
;;;676    }
        0x00000f0e:    bd10        ..      POP      {r4,pc}
    i.PAN216_DRModConfig
    PAN216_DRModConfig
;;; ..\..\..\..\radio\pan216_ext.c (225)
        0x00000f10:    b510        ..      PUSH     {r4,lr}
        0x00000f12:    4832        2H      LDR      r0,[pc,#200] ; [0xfdc] = 0x20000028
        0x00000f14:    7840        @x      LDRB     r0,[r0,#1]
        0x00000f16:    2800        .(      CMP      r0,#0
;;; ..\..\..\..\radio\pan216_ext.c (225)
        0x00000f18:    d004        ..      BEQ      0xf24 ; PAN216_DRModConfig + 20
;;;226        switch (_gDataRate)
        0x00000f1a:    2801        .(      CMP      r0,#1
        0x00000f1c:    d03d        =.      BEQ      0xf9a ; PAN216_DRModConfig + 138
        0x00000f1e:    2802        .(      CMP      r0,#2
        0x00000f20:    d139        9.      BNE      0xf96 ; PAN216_DRModConfig + 134
        0x00000f22:    e014        ..      B        0xf4e ; PAN216_DRModConfig + 62
;;;227        {
;;;228        case PAN216_DR_1Mbps:
;;;229            PAN216_WritePageRegBits(PAN216_PAGE0, 0x43, 0, BIT2);
        0x00000f24:    2200        ."      MOVS     r2,#0
        0x00000f26:    2304        .#      MOVS     r3,#4
        0x00000f28:    2143        C!      MOVS     r1,#0x43
        0x00000f2a:    4610        .F      MOV      r0,r2
        0x00000f2c:    f000fd96    ....    BL       PAN216_WritePageRegBits ; 0x1a5c
;;;230            PAN216_WritePageRegBits(PAN216_PAGE0, 0x43, 2, BIT1 | BIT0);
        0x00000f30:    2303        .#      MOVS     r3,#3
        0x00000f32:    2202        ."      MOVS     r2,#2
        0x00000f34:    2143        C!      MOVS     r1,#0x43
        0x00000f36:    2000        .       MOVS     r0,#0
        0x00000f38:    f000fd90    ....    BL       PAN216_WritePageRegBits ; 0x1a5c
;;;231            PAN216_WritePageRegBits(PAN216_PAGE1, 0x3A, 0, BIT7 | BIT6);
        0x00000f3c:    23c0        .#      MOVS     r3,#0xc0
        0x00000f3e:    2200        ."      MOVS     r2,#0
        0x00000f40:    213a        :!      MOVS     r1,#0x3a
        0x00000f42:    2001        .       MOVS     r0,#1
        0x00000f44:    f000fd8a    ....    BL       PAN216_WritePageRegBits ; 0x1a5c
;;;232            PAN216_WritePageRegBits(PAN216_PAGE1, 0x49, 1, BIT7);
        0x00000f48:    2380        .#      MOVS     r3,#0x80
        0x00000f4a:    2201        ."      MOVS     r2,#1
;;;233            PAN216_WritePageRegBits(PAN216_PAGE1, 0x49, 4, BIT6 | BIT5 | BIT4);
;;;234            PAN216_WritePageRegBits(PAN216_PAGE1, 0x4C, 0, BIT5);
;;;235            break;
        0x00000f4c:    e013        ..      B        0xf76 ; PAN216_DRModConfig + 102
;;;236        case PAN216_DR_250Kbps:
;;;237            PAN216_WritePageRegBits(PAN216_PAGE0, 0x43, 0, BIT2);
        0x00000f4e:    2200        ."      MOVS     r2,#0
        0x00000f50:    2304        .#      MOVS     r3,#4
        0x00000f52:    2143        C!      MOVS     r1,#0x43
        0x00000f54:    4610        .F      MOV      r0,r2
        0x00000f56:    f000fd81    ....    BL       PAN216_WritePageRegBits ; 0x1a5c
;;;238            PAN216_WritePageRegBits(PAN216_PAGE0, 0x43, 3, BIT1 | BIT0);
        0x00000f5a:    2303        .#      MOVS     r3,#3
        0x00000f5c:    461a        .F      MOV      r2,r3
        0x00000f5e:    2143        C!      MOVS     r1,#0x43
        0x00000f60:    2000        .       MOVS     r0,#0
        0x00000f62:    f000fd7b    ..{.    BL       PAN216_WritePageRegBits ; 0x1a5c
;;;239            PAN216_WritePageRegBits(PAN216_PAGE1, 0x3A, 1, BIT7 | BIT6);
        0x00000f66:    2201        ."      MOVS     r2,#1
        0x00000f68:    23c0        .#      MOVS     r3,#0xc0
        0x00000f6a:    213a        :!      MOVS     r1,#0x3a
        0x00000f6c:    4610        .F      MOV      r0,r2
        0x00000f6e:    f000fd75    ..u.    BL       PAN216_WritePageRegBits ; 0x1a5c
;;;240            PAN216_WritePageRegBits(PAN216_PAGE1, 0x49, 0, BIT7);
        0x00000f72:    2380        .#      MOVS     r3,#0x80
        0x00000f74:    2200        ."      MOVS     r2,#0
        0x00000f76:    2149        I!      MOVS     r1,#0x49
        0x00000f78:    2001        .       MOVS     r0,#1
        0x00000f7a:    f000fd6f    ..o.    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x00000f7e:    2370        p#      MOVS     r3,#0x70
        0x00000f80:    2204        ."      MOVS     r2,#4
        0x00000f82:    2149        I!      MOVS     r1,#0x49
        0x00000f84:    2001        .       MOVS     r0,#1
        0x00000f86:    f000fd69    ..i.    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x00000f8a:    2320         #      MOVS     r3,#0x20
        0x00000f8c:    2200        ."      MOVS     r2,#0
        0x00000f8e:    214c        L!      MOVS     r1,#0x4c
        0x00000f90:    2001        .       MOVS     r0,#1
        0x00000f92:    f000fd63    ..c.    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x00000f96:    2000        .       MOVS     r0,#0
        0x00000f98:    bd10        ..      POP      {r4,pc}
;;;241            PAN216_WritePageRegBits(PAN216_PAGE1, 0x49, 4, BIT6 | BIT5 | BIT4);
;;;242            PAN216_WritePageRegBits(PAN216_PAGE1, 0x4C, 0, BIT5);
;;;243            break;
;;;244        case PAN216_DR_2Mbps:
;;;245            PAN216_WritePageRegBits(PAN216_PAGE0, 0x43, 1, BIT2);
        0x00000f9a:    2304        .#      MOVS     r3,#4
        0x00000f9c:    2201        ."      MOVS     r2,#1
        0x00000f9e:    2143        C!      MOVS     r1,#0x43
        0x00000fa0:    2000        .       MOVS     r0,#0
        0x00000fa2:    f000fd5b    ..[.    BL       PAN216_WritePageRegBits ; 0x1a5c
;;;246            PAN216_WritePageRegBits(PAN216_PAGE0, 0x43, 2, BIT1 | BIT0);
        0x00000fa6:    2303        .#      MOVS     r3,#3
        0x00000fa8:    2202        ."      MOVS     r2,#2
        0x00000faa:    2143        C!      MOVS     r1,#0x43
        0x00000fac:    2000        .       MOVS     r0,#0
        0x00000fae:    f000fd55    ..U.    BL       PAN216_WritePageRegBits ; 0x1a5c
;;;247            PAN216_WritePageRegBits(PAN216_PAGE1, 0x3A, 0, BIT7 | BIT6);
        0x00000fb2:    23c0        .#      MOVS     r3,#0xc0
        0x00000fb4:    2200        ."      MOVS     r2,#0
        0x00000fb6:    213a        :!      MOVS     r1,#0x3a
        0x00000fb8:    2001        .       MOVS     r0,#1
        0x00000fba:    f000fd4f    ..O.    BL       PAN216_WritePageRegBits ; 0x1a5c
;;;248            PAN216_WritePageRegBits(PAN216_PAGE1, 0x49, 1, BIT7);
        0x00000fbe:    2201        ."      MOVS     r2,#1
        0x00000fc0:    2380        .#      MOVS     r3,#0x80
        0x00000fc2:    2149        I!      MOVS     r1,#0x49
        0x00000fc4:    4610        .F      MOV      r0,r2
        0x00000fc6:    f000fd49    ..I.    BL       PAN216_WritePageRegBits ; 0x1a5c
;;;249            PAN216_WritePageRegBits(PAN216_PAGE1, 0x49, 4, BIT6 | BIT5 | BIT4);
        0x00000fca:    2370        p#      MOVS     r3,#0x70
        0x00000fcc:    2204        ."      MOVS     r2,#4
        0x00000fce:    2149        I!      MOVS     r1,#0x49
        0x00000fd0:    2001        .       MOVS     r0,#1
        0x00000fd2:    f000fd43    ..C.    BL       PAN216_WritePageRegBits ; 0x1a5c
;;;250            PAN216_WritePageRegBits(PAN216_PAGE1, 0x4C, 1, BIT5);
        0x00000fd6:    2320         #      MOVS     r3,#0x20
        0x00000fd8:    2201        ."      MOVS     r2,#1
;;;251            break;
        0x00000fda:    e7d8        ..      B        0xf8e ; PAN216_DRModConfig + 126
    $d
        0x00000fdc:    20000028    (..     DCD    536870952
    $t
    i.PAN216_DisableRxPipe
    PAN216_DisableRxPipe
;;;252        default:
;;;253            break;
;;;254        }
;;;255        return PAN216_OK;
;;;256    }
;;;257    
;;;258    PAN216_Err_t PAN216_EnableFifo128bytes(bool NewState)
;;;259    {
;;;260        if (NewState)
;;;261        {
;;;262            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG1, 1, WMODE_CFG1_FIFO_128_EN));
;;;263        }
;;;264        else
;;;265        {
;;;266            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG1, 0, WMODE_CFG1_FIFO_128_EN));
;;;267        }
;;;268    
;;;269        return PAN216_OK;
;;;270    }
;;;271    
;;;272    /**
;;;273     * @brief Set the transmit mode of PAN216 transceiver.
;;;274     *
;;;275     * @param TxMode The transmit mode to be set.
;;;276     *        - PAN216_TX_MODE_SINGLE: single transmission
;;;277     *        - PAN216_TX_MODE_CONTINOUS: continuous transmission
;;;278     *
;;;279     * @return Result of the operation
;;;280     *         - PAN216_OK
;;;281     *         - PAN216_ERR
;;;282     */
;;;283    PAN216_Err_t PAN216_SetTxMode(PAN216_TxMode_t TxMode)
;;;284    {
;;;285        switch (TxMode)
;;;286        {
;;;287        case PAN216_TX_MODE_SINGLE:
;;;288            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TRXMODE_CFG, PAN216_TX_MODE_SINGLE,
;;;289                                             TRXMODE_CFG_REG_TX_CFG_MODE));
;;;290            break;
;;;291        case PAN216_TX_MODE_CONTINOUS:
;;;292            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TRXMODE_CFG, PAN216_TX_MODE_CONTINOUS,
;;;293                                             TRXMODE_CFG_REG_TX_CFG_MODE));
;;;294            break;
;;;295        default:
;;;296            return PAN216_ERR;
;;;297        }
;;;298    
;;;299        return PAN216_OK;
;;;300    }
;;;301    
;;;302    /**
;;;303     * @brief Set the receive mode of PAN216 transceiver.It has to be initialized  as STB3 mode before
;;;304     * entering RX mode.
;;;305     *
;;;306     * @param TxMode The receive mode to be set.
;;;307     *        - PAN216_RX_MODE_SINGLE: single reception
;;;308     *        - PAN216_RX_MODE_SINGLE_WITH_TIMEOUT: single reception with timeout
;;;309     *        - PAN216_RX_MODE_CONTINOUS: continuous reception
;;;310     *
;;;311     * @return Result of the operation
;;;312     *         - PAN216_OK
;;;313     *         - PAN216_ERR
;;;314     */
;;;315    PAN216_Err_t PAN216_SetRxMode(PAN216_RxMode_t RxMode)
;;;316    {
;;;317        switch (RxMode)
;;;318        {
;;;319        case PAN216_RX_MODE_SINGLE:
;;;320            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TRXMODE_CFG, PAN216_RX_MODE_SINGLE,
;;;321                                             TRXMODE_CFG_REG_RX_CFG_MODE));
;;;322            break;
;;;323        case PAN216_RX_MODE_SINGLE_WITH_TIMEOUT:
;;;324            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TRXMODE_CFG,
;;;325                                             PAN216_RX_MODE_SINGLE_WITH_TIMEOUT,
;;;326                                             TRXMODE_CFG_REG_RX_CFG_MODE));
;;;327            break;
;;;328        case PAN216_RX_MODE_CONTINOUS:
;;;329            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TRXMODE_CFG, PAN216_RX_MODE_CONTINOUS,
;;;330                                             TRXMODE_CFG_REG_RX_CFG_MODE));
;;;331            break;
;;;332        default:
;;;333            break;
;;;334        }
;;;335    
;;;336        return PAN216_OK;
;;;337    }
;;;338    
;;;339    /**
;;;340     * @brief  Performs a soft reset of the PAN216 transceiver module.
;;;341     *
;;;342     * @param  None
;;;343     *
;;;344     * @return uint8_t Result of the operation
;;;345     *         - PAN216_OK
;;;346     *         - PAN216_ERR
;;;347     * @note This function is designed for general operations.
;;;348     */
;;;349    PAN216_Err_t PAN216_SoftReset(void)
;;;350    {
;;;351        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, STATE_CFG, 0, STATE_CFG_POR_NRSTL));
;;;352        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, SYS_CFG, 0, SYS_CFG_REG_SOFT_RSTL));
;;;353        Pan216_Funs.delayms(1);
;;;354        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, STATE_CFG, 1, STATE_CFG_POR_NRSTL));
;;;355        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, SYS_CFG, 1, SYS_CFG_REG_SOFT_RSTL));
;;;356    
;;;357        return PAN216_OK;
;;;358    }
;;;359    
;;;360    PAN216_State_t PAN216_GetState(void)
;;;361    {
;;;362        uint8_t idleFlag;
;;;363        PAN216_State_t State;
;;;364    
;;;365        idleFlag = PAN216_ReadReg(0x7D) >> 7; // bit7ä¸º1è¡¨ç¤ºmacå¤äºIDLE
;;;366        State = (PAN216_State_t)(PAN216_ReadReg(0x7F) >> 6);
;;;367    
;;;368        if (State == 0)
;;;369        {
;;;370            State = idleFlag > 0 ? PAN216_STATE_IDLE : PAN216_STATE_ARD_WAIT;
;;;371        }
;;;372    
;;;373        return State;
;;;374    }
;;;375    
;;;376    /**
;;;377     * @brief Writes the PAN216 transceiver's TX PID value of a enhanced shockburst packet
;;;378     *
;;;379     * @param Pid 0~3
;;;380     * @return PAN216_Err_t
;;;381     */
;;;382    PAN216_Err_t PAN216_WriteTxManualPid(uint8_t Pid)
;;;383    {
;;;384        PAN216_WriteRegBits(PID_CFG, Pid, PID_CFG_TX_PID_MANUAL);
;;;385    
;;;386        return PAN216_OK;
;;;387    }
;;;388    
;;;389    /**
;;;390     * @brief Writes the PAN216 transceiver's RX PID value of a enhanced shockburst packet
;;;391     *
;;;392     * @param Pid 0~3
;;;393     * @return PAN216_Err_t
;;;394     */
;;;395    PAN216_Err_t PAN216_WriteRxManualPid(uint8_t Pid)
;;;396    {
;;;397        PAN216_WriteRegBits(PID_CFG, Pid, PID_CFG_RX_PID_MANUAL);
;;;398    
;;;399        return PAN216_OK;
;;;400    }
;;;401    
;;;402    /**
;;;403     * @brief Sets the DynamicPayloadLength feature for all pipes of the PAN216 transceiver
;;;404     *
;;;405     * This function is used to enable or disable the DynamicPayloadLength feature for all
;;;406     * pipes of the PAN216 transceiver.
;;;407     *
;;;408     * @param NewState ENABLE to enable the feature, DISABLE to disable the feature
;;;409     *
;;;410     * @return uint8_t Result of the operation
;;;411     *         - PAN216_OK
;;;412     *         - PAN216_ERR
;;;413     */
;;;414    PAN216_Err_t PAN216_EnableDynamicPL(uint8_t NewState)
;;;415    {
;;;416        if (NewState)
;;;417        {
;;;418            P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_DPY_EN));
;;;419        }
;;;420        else
;;;421        {
;;;422            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_DPY_EN));
;;;423        }
;;;424    
;;;425        return PAN216_OK;
;;;426    }
;;;427    
;;;428    /**
;;;429     * @brief Configures the CRC scheme of the PAN216 transceiver
;;;430     *
;;;431     * This function is used to configure the CRC scheme of the PAN216 transceiver.
;;;432     *
;;;433     * @param Crc The desired CRC scheme, as a value of type PAN216_Crc_t
;;;434     *
;;;435     * @note The transceiver will forcibly turn on the CRC if auto-acknowledgment is enabled
;;;436     *       for at least one receive (RX) pipe
;;;437     *
;;;438     * @return uint8_t Result of the operation
;;;439     *         - PAN216_OK
;;;440     *         - PAN216_ERR
;;;441     */
;;;442    PAN216_Err_t PAN216_SetCrcScheme(PAN216_Crc_t Crc)
;;;443    {
;;;444        if (Crc > PAN216_CRC_3byte)
;;;445        {
;;;446            return PAN216_ERR;
;;;447        }
;;;448    
;;;449        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, Crc, WMODE_CFG0_CRC_MODE_1_0));
;;;450    
;;;451        return PAN216_OK;
;;;452    }
;;;453    
;;;454    /**
;;;455     * @brief Configures the data rate of the PAN216 transceiver
;;;456     *
;;;457     * This function is used to configure the data rate of the PAN216 transceiver. The
;;;458     * data rate is specified as one of the members of PAN216_DataRate_t.
;;;459     *
;;;460     * @param DataRate The desired data rate, as one of the members of PAN216_DataRate_t
;;;461     *
;;;462     * @return uint8_t Result of the operation
;;;463     *         - PAN216_OK
;;;464     *         - PAN216_ERR
;;;465     */
;;;466    PAN216_Err_t PAN216_SetDataRate(PAN216_DataRate_t DataRate)
;;;467    {
;;;468        uint8_t DataRateVal;
;;;469    
;;;470        if (DataRate >= PAN216_DR_Max)
;;;471        {
;;;472            return PAN216_ERR;
;;;473        }
;;;474    
;;;475        switch (DataRate)
;;;476        {
;;;477        case PAN216_DR_1Mbps:
;;;478            DataRateVal = 0x00;
;;;479            _gDataRate = PAN216_DR_1Mbps;
;;;480            break;
;;;481        case PAN216_DR_2Mbps:
;;;482            DataRateVal = 0x01;
;;;483            _gDataRate = PAN216_DR_2Mbps;
;;;484            break;
;;;485        case PAN216_DR_250Kbps:
;;;486            DataRateVal = 0x03;
;;;487            _gDataRate = PAN216_DR_250Kbps;
;;;488            break;
;;;489        default:
;;;490            return PAN216_ERR;
;;;491        }
;;;492    
;;;493        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, REG_P0_0X36, DataRateVal, REG_P0_0X36_BW_MODE));
;;;494    
;;;495        PAN216_DRModConfig();
;;;496        WriteTxDemodConfig();
;;;497        WriteRxDemodConfig();
;;;498        PAN216_Calibration();
;;;499    #if CALIBRATION_DEBUG_ON
;;;500        PAN216_ReadVCOCode();
;;;501        PAN216_ReadTpCode();
;;;502        ReadBWDcocCal(FILTER_OFFSET_CAL_MODE, 0);
;;;503        ReadBWDcocCal(FILTER_BW_CAL_MODE, 0);
;;;504        ReadBWDcocCal(FILTER_BW_CAL_MODE, 1);
;;;505        ReadBWDcocCal(FILTER_BW_CAL_MODE, 2);
;;;506        ReadBWDcocCal(FILTER_DCOC_CAL_MODE, 0);
;;;507    #endif
;;;508        PAN216_FinishCalibration();
;;;509        return PAN216_OK;
;;;510    }
;;;511    
;;;512    PAN216_Err_t PAN216_EnableRxPipe(PAN216_Pipe_t Pipe)
;;;513    {
;;;514        if (Pipe > PAN216_PIPE5)
;;;515        {
;;;516            return PAN216_ERR;
;;;517        }
;;;518    
;;;519        return PAN216_SetRegBits(PAN216_PAGE0, RXPIPE_CFG, 1 << Pipe);
;;;520    }
;;;521    
;;;522    PAN216_Err_t PAN216_DisableRxPipe(PAN216_Pipe_t Pipe)
;;;523    {
        0x00000fe0:    b510        ..      PUSH     {r4,lr}
        0x00000fe2:    2805        .(      CMP      r0,#5
;;; ..\..\..\..\radio\pan216_ext.c (523)
        0x00000fe4:    d901        ..      BLS      0xfea ; PAN216_DisableRxPipe + 10
;;;524        if (Pipe > PAN216_PIPE5)
;;;525        {
;;;526            return PAN216_ERR;
        0x00000fe6:    2001        .       MOVS     r0,#1
        0x00000fe8:    bd10        ..      POP      {r4,pc}
;;;527        }
;;;528    
;;;529        return PAN216_ResetRegBits(PAN216_PAGE0, RXPIPE_CFG, 1 << Pipe);
        0x00000fea:    2101        .!      MOVS     r1,#1
        0x00000fec:    4081        .@      LSLS     r1,r1,r0
        0x00000fee:    b2ca        ..      UXTB     r2,r1
        0x00000ff0:    211f        .!      MOVS     r1,#0x1f
        0x00000ff2:    2000        .       MOVS     r0,#0
        0x00000ff4:    f000fa40    ..@.    BL       PAN216_ResetRegBits ; 0x1478
;;;530    }
        0x00000ff8:    bd10        ..      POP      {r4,pc}
    i.PAN216_EnableDynamicPL
    PAN216_EnableDynamicPL
        0x00000ffa:    b510        ..      PUSH     {r4,lr}
        0x00000ffc:    2800        .(      CMP      r0,#0
;;; ..\..\..\..\radio\pan216_ext.c (415)
        0x00000ffe:    d005        ..      BEQ      0x100c ; PAN216_EnableDynamicPL + 18
;;;416        if (NewState)
;;;417        {
;;;418            P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_DPY_EN));
        0x00001000:    2210        ."      MOVS     r2,#0x10
        0x00001002:    2108        .!      MOVS     r1,#8
        0x00001004:    2000        .       MOVS     r0,#0
        0x00001006:    f000fb6e    ..n.    BL       PAN216_SetRegBits ; 0x16e6
        0x0000100a:    e004        ..      B        0x1016 ; PAN216_EnableDynamicPL + 28
        0x0000100c:    2210        ."      MOVS     r2,#0x10
        0x0000100e:    2108        .!      MOVS     r1,#8
        0x00001010:    2000        .       MOVS     r0,#0
        0x00001012:    f000fa31    ..1.    BL       PAN216_ResetRegBits ; 0x1478
        0x00001016:    2800        .(      CMP      r0,#0
        0x00001018:    d000        ..      BEQ      0x101c ; PAN216_EnableDynamicPL + 34
;;;419        }
;;;420        else
;;;421        {
;;;422            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_DPY_EN));
        0x0000101a:    2001        .       MOVS     r0,#1
;;;423        }
;;;424    
;;;425        return PAN216_OK;
;;;426    }
        0x0000101c:    bd10        ..      POP      {r4,pc}
    i.PAN216_EnableFifo128bytes
    PAN216_EnableFifo128bytes
;;; ..\..\..\..\radio\pan216_ext.c (259)
        0x0000101e:    b510        ..      PUSH     {r4,lr}
        0x00001020:    2800        .(      CMP      r0,#0
        0x00001022:    d002        ..      BEQ      0x102a ; PAN216_EnableFifo128bytes + 12
;;;260        if (NewState)
;;;261        {
;;;262            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG1, 1, WMODE_CFG1_FIFO_128_EN));
        0x00001024:    2320         #      MOVS     r3,#0x20
        0x00001026:    2201        ."      MOVS     r2,#1
        0x00001028:    e001        ..      B        0x102e ; PAN216_EnableFifo128bytes + 16
        0x0000102a:    2320         #      MOVS     r3,#0x20
        0x0000102c:    2200        ."      MOVS     r2,#0
        0x0000102e:    2108        .!      MOVS     r1,#8
        0x00001030:    2000        .       MOVS     r0,#0
        0x00001032:    f000fd13    ....    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x00001036:    2800        .(      CMP      r0,#0
        0x00001038:    d000        ..      BEQ      0x103c ; PAN216_EnableFifo128bytes + 30
;;;263        }
;;;264        else
;;;265        {
;;;266            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG1, 0, WMODE_CFG1_FIFO_128_EN));
        0x0000103a:    2001        .       MOVS     r0,#1
;;;267        }
;;;268    
;;;269        return PAN216_OK;
;;;270    }
        0x0000103c:    bd10        ..      POP      {r4,pc}
    i.PAN216_EnableInterfaceMuxIRQ
    PAN216_EnableInterfaceMuxIRQ
;;; ..\..\..\..\radio\pan216.c
;;;543        return PAN216_OK;
        0x0000103e:    2000        .       MOVS     r0,#0
;;;544    }
        0x00001040:    4770        pG      BX       lr
    i.PAN216_EnableRxPipe
    PAN216_EnableRxPipe
;;; ..\..\..\..\radio\pan216_ext.c
;;;513    {
        0x00001042:    b510        ..      PUSH     {r4,lr}
        0x00001044:    2805        .(      CMP      r0,#5
        0x00001046:    d901        ..      BLS      0x104c ; PAN216_EnableRxPipe + 10
;;;514        if (Pipe > PAN216_PIPE5)
;;;515        {
;;;516            return PAN216_ERR;
        0x00001048:    2001        .       MOVS     r0,#1
        0x0000104a:    bd10        ..      POP      {r4,pc}
;;;517        }
;;;518    
;;;519        return PAN216_SetRegBits(PAN216_PAGE0, RXPIPE_CFG, 1 << Pipe);
        0x0000104c:    2101        .!      MOVS     r1,#1
        0x0000104e:    4081        .@      LSLS     r1,r1,r0
        0x00001050:    b2ca        ..      UXTB     r2,r1
        0x00001052:    211f        .!      MOVS     r1,#0x1f
        0x00001054:    2000        .       MOVS     r0,#0
        0x00001056:    f000fb46    ..F.    BL       PAN216_SetRegBits ; 0x16e6
;;;520    }
        0x0000105a:    bd10        ..      POP      {r4,pc}
    i.PAN216_EnableTxNoAck
    PAN216_EnableTxNoAck
;;;521    
;;;522    PAN216_Err_t PAN216_DisableRxPipe(PAN216_Pipe_t Pipe)
;;;523    {
;;;524        if (Pipe > PAN216_PIPE5)
;;;525        {
;;;526            return PAN216_ERR;
;;;527        }
;;;528    
;;;529        return PAN216_ResetRegBits(PAN216_PAGE0, RXPIPE_CFG, 1 << Pipe);
;;;530    }
;;;531    
;;;532    /**
;;;533     * @brief Configure a specified RX pipe
;;;534     *
;;;535     * @param Pipe        Number of the RX pipe, value from 0 to 6
;;;536     * @param PayloadLen  Payload length in bytes
;;;537     *
;;;538     * @return Result of the operation
;;;539     *         - PAN216_OK
;;;540     *         - PAN216_ERR
;;;541     */
;;;542    PAN216_Err_t PAN216_SetRxPayloadLen(uint8_t PayloadLen)
;;;543    {
;;;544        return PAN216_WritePageReg(PAN216_PAGE0, RXPLLEN_CFG, PayloadLen);
;;;545    }
;;;546    
;;;547    PAN216_Err_t PAN216_SetTxPayloadLen(uint8_t PayloadLen)
;;;548    {
;;;549        P_ASSERT(PAN216_WritePageReg(PAN216_PAGE0, TXPLLEN_CFG, PayloadLen));
;;;550        return PAN216_OK;
;;;551    }
;;;552    
;;;553    /**
;;;554     * @brief Set enhanced shockburst mode for the PAN216 transceiver
;;;555     *
;;;556     * @param Mode Enhanced shockburst mode to set, one of PAN216_Mode_t values
;;;557     *
;;;558     * @return uint8_t Result of the operation
;;;559     *         - PAN216_OK
;;;560     *         - PAN216_ERR
;;;561     */
;;;562    PAN216_Err_t PAN216_SetWorkMode(PAN216_WorkMode_t Mode)
;;;563    {
;;;564    
;;;565        switch (Mode)
;;;566        {
;;;567        case PAN216_WORKMODE_NORMAL:
;;;568            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1,
;;;569                                         WMODE_CFG1_NORMAL_M1 | WMODE_CFG1_ENHANCE));
;;;570            break;
;;;571        case PAN216_WORKMODE_ENHANCE:
;;;572            P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_ENHANCE));
;;;573            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;574            break;
;;;575        default:
;;;576            return PAN216_ERR;
;;;577        }
;;;578    
;;;579        return PAN216_OK;
;;;580    }
;;;581    
;;;582    PAN216_Err_t PAN216_GetChipMode(PAN216_ChipMode_t *chipMode)
;;;583    {
;;;584        *chipMode = (PAN216_ChipMode_t)_gChipMode;
;;;585        return PAN216_OK;
;;;586    }
;;;587    
;;;588    /**
;;;589     * @brief  This function set noack for tx
;;;590     * @param  NewState: ENABLE/DISABLE
;;;591     * @return Result of the operation
;;;592     *         - PAN216_OK
;;;593     *         - PAN216_ERR
;;;594     * @note  This function is called after PAN216_SetWorkMode
;;;595     */
;;;596    PAN216_Err_t PAN216_EnableTxNoAck(uint8_t NewState)
;;;597    {
        0x0000105c:    b510        ..      PUSH     {r4,lr}
        0x0000105e:    4604        .F      MOV      r4,r0
;;;598        uint8_t modeCfg1 = PAN216_ReadPageReg(PAN216_PAGE0, WMODE_CFG1);
        0x00001060:    2108        .!      MOVS     r1,#8
        0x00001062:    2000        .       MOVS     r0,#0
        0x00001064:    f000f9e4    ....    BL       PAN216_ReadPageReg ; 0x1430
;;;599    
;;;600        if (modeCfg1 & WMODE_CFG1_ENHANCE)
        0x00001068:    0700        ..      LSLS     r0,r0,#28
        0x0000106a:    d511        ..      BPL      0x1090 ; PAN216_EnableTxNoAck + 52
;;;601        {
;;;602            if (NewState)
        0x0000106c:    2c00        .,      CMP      r4,#0
        0x0000106e:    d005        ..      BEQ      0x107c ; PAN216_EnableTxNoAck + 32
;;;603            {
;;;604                P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_TX_NOACK_EN));
        0x00001070:    2202        ."      MOVS     r2,#2
        0x00001072:    2107        .!      MOVS     r1,#7
        0x00001074:    2000        .       MOVS     r0,#0
        0x00001076:    f000fb36    ..6.    BL       PAN216_SetRegBits ; 0x16e6
        0x0000107a:    e004        ..      B        0x1086 ; PAN216_EnableTxNoAck + 42
;;;605            }
;;;606            else
;;;607            {
;;;608                P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_TX_NOACK_EN));
        0x0000107c:    2202        ."      MOVS     r2,#2
        0x0000107e:    2107        .!      MOVS     r1,#7
        0x00001080:    2000        .       MOVS     r0,#0
        0x00001082:    f000f9f9    ....    BL       PAN216_ResetRegBits ; 0x1478
        0x00001086:    2800        .(      CMP      r0,#0
        0x00001088:    d118        ..      BNE      0x10bc ; PAN216_EnableTxNoAck + 96
;;;609            }
;;;610            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
        0x0000108a:    2204        ."      MOVS     r2,#4
        0x0000108c:    2108        .!      MOVS     r1,#8
        0x0000108e:    e010        ..      B        0x10b2 ; PAN216_EnableTxNoAck + 86
;;;611        }
;;;612        else
;;;613        {
;;;614            if (NewState)
        0x00001090:    2c00        .,      CMP      r4,#0
        0x00001092:    d005        ..      BEQ      0x10a0 ; PAN216_EnableTxNoAck + 68
;;;615            {
;;;616                P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
        0x00001094:    2204        ."      MOVS     r2,#4
        0x00001096:    2108        .!      MOVS     r1,#8
        0x00001098:    2000        .       MOVS     r0,#0
        0x0000109a:    f000f9ed    ....    BL       PAN216_ResetRegBits ; 0x1478
        0x0000109e:    e004        ..      B        0x10aa ; PAN216_EnableTxNoAck + 78
;;;617            }
;;;618            else
;;;619            {
;;;620                P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
        0x000010a0:    2204        ."      MOVS     r2,#4
        0x000010a2:    2108        .!      MOVS     r1,#8
        0x000010a4:    2000        .       MOVS     r0,#0
        0x000010a6:    f000fb1e    ....    BL       PAN216_SetRegBits ; 0x16e6
        0x000010aa:    2800        .(      CMP      r0,#0
        0x000010ac:    d106        ..      BNE      0x10bc ; PAN216_EnableTxNoAck + 96
;;;621            }
;;;622            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_TX_NOACK_EN));
        0x000010ae:    2202        ."      MOVS     r2,#2
        0x000010b0:    2107        .!      MOVS     r1,#7
        0x000010b2:    2000        .       MOVS     r0,#0
        0x000010b4:    f000f9e0    ....    BL       PAN216_ResetRegBits ; 0x1478
        0x000010b8:    2800        .(      CMP      r0,#0
        0x000010ba:    d000        ..      BEQ      0x10be ; PAN216_EnableTxNoAck + 98
        0x000010bc:    2001        .       MOVS     r0,#1
;;;623        }
;;;624    
;;;625        return PAN216_OK;
;;;626    }
        0x000010be:    bd10        ..      POP      {r4,pc}
    i.PAN216_EnableWhiten
    PAN216_EnableWhiten
;;;627    
;;;628    /**
;;;629     * @brief After receiving a packet, reads the TxNoack bit of a enhanced shockburst packet
;;;630     *
;;;631     * @return uint8_t  1 : rx need ack
;;;632     *                  0 : rx need no ack
;;;633     */
;;;634    uint8_t PAN216_ReadTxNoackBit(void)
;;;635    {
;;;636        return !(PAN216_ReadReg(0x7D) & BIT6);
;;;637    }
;;;638    
;;;639    PAN216_Err_t PAN216_SetAckPipe(uint8_t pipe)
;;;640    {
;;;641        if (pipe > 5)
;;;642        {
;;;643            return PAN216_ERR;
;;;644        }
;;;645    
;;;646        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, 0x6F, pipe, 0x07));
;;;647    
;;;648        return PAN216_OK;
;;;649    }
;;;650    
;;;651    /**
;;;652     * @brief Enable CRC calculation for address field in PAN216.
;;;653     *
;;;654     * This function allows enabling or disabling
;;;655     *  CRC calculation for the address field in PAN216.
;;;656     *
;;;657     * @note By default, address field is not included in CRC calculation.
;;;658     *
;;;659     * @param[in] NewState Boolean value indicating whether to enable or disable CRC calculation for
;;;660     * address field.
;;;661     *
;;;662     * @return Result of the operation:
;;;663     *         - PAN216_OK
;;;664     *         - PAN216_ERR
;;;665     */
;;;666    PAN216_Err_t PAN216_CrcSkipAddr(bool exclude)
;;;667    {
;;;668        if (exclude)
;;;669        {
;;;670            return PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_ACCADDR_CRC_DIS);
;;;671        }
;;;672        else
;;;673        {
;;;674            return PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_ACCADDR_CRC_DIS);
;;;675        }
;;;676    }
;;;677    
;;;678    /**
;;;679     * @brief whiten(scramble) configurations
;;;680     * @param addr_excluded  whiten exclude access address(already include header, payload, crc)
;;;681     * @param initital_phase initital whiten phase
;;;682     *        - channel 37: 0x53
;;;683              - channel 38: 0x33
;;;684              - channel 39: 0x73
;;;685     * @return PAN216_Err_t
;;;686     */
;;;687    PAN216_Err_t PAN216_WhiteSkipAddr(bool addr_excluded)
;;;688    {
;;;689        PAN216_Err_t ret;
;;;690    
;;;691        if (addr_excluded)
;;;692        {
;;;693            ret = PAN216_SetRegBits(PAN216_PAGE0, SCR_CFG, SCR_CFG_ACCADDR_SCR_DIS);
;;;694        }
;;;695        else
;;;696        {
;;;697            ret = PAN216_ResetRegBits(PAN216_PAGE0, SCR_CFG, SCR_CFG_ACCADDR_SCR_DIS);
;;;698        }
;;;699    
;;;700        return ret;
;;;701    }
;;;702    
;;;703    /**
;;;704     * @brief
;;;705     *
;;;706     * @param Endian
;;;707     * @return uint8_t
;;;708     */
;;;709    PAN216_Err_t PAN216_SetEndian(PAN216_Endian_t Endian)
;;;710    {
;;;711    
;;;712        if (Endian == PAN216_ENDIAN_LITTLE)
;;;713        {
;;;714            PAN216_WritePageRegBits(PAN216_PAGE0, 0x6F, 1,
;;;715                                    BIT4); // é»è®¤ä¸º0ï¼pidå¨ä¸­é´ï¼éç½®ä¸º1æ¶ï¼pidå¨æä½ä¸¤ä½
;;;716        }
;;;717        else
;;;718        {
;;;719            PAN216_WritePageRegBits(PAN216_PAGE0, 0x6F, 0,
;;;720                                    BIT4); // é»è®¤ä¸º0ï¼pidå¨ä¸­é´ï¼éç½®ä¸º1æ¶ï¼pidå¨æä½ä¸¤ä½
;;;721        }
;;;722    
;;;723        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, Endian, WMODE_CFG0_ENDIAN));
;;;724    
;;;725        return PAN216_OK;
;;;726    }
;;;727    
;;;728    PAN216_Err_t PAN216_EnableWhiten(bool NewState)
;;;729    {
        0x000010c0:    b510        ..      PUSH     {r4,lr}
        0x000010c2:    2800        .(      CMP      r0,#0
;;; ..\..\..\..\radio\pan216_ext.c (729)
        0x000010c4:    d005        ..      BEQ      0x10d2 ; PAN216_EnableWhiten + 18
;;;730        if (NewState)
;;;731        {
;;;732            P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_SCR_ENABLE));
        0x000010c6:    2208        ."      MOVS     r2,#8
        0x000010c8:    2107        .!      MOVS     r1,#7
        0x000010ca:    2000        .       MOVS     r0,#0
        0x000010cc:    f000fb0b    ....    BL       PAN216_SetRegBits ; 0x16e6
        0x000010d0:    e004        ..      B        0x10dc ; PAN216_EnableWhiten + 28
        0x000010d2:    2208        ."      MOVS     r2,#8
        0x000010d4:    2107        .!      MOVS     r1,#7
        0x000010d6:    2000        .       MOVS     r0,#0
        0x000010d8:    f000f9ce    ....    BL       PAN216_ResetRegBits ; 0x1478
        0x000010dc:    2800        .(      CMP      r0,#0
        0x000010de:    d000        ..      BEQ      0x10e2 ; PAN216_EnableWhiten + 34
;;;733        }
;;;734        else
;;;735        {
;;;736            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_SCR_ENABLE));
        0x000010e0:    2001        .       MOVS     r0,#1
;;;737        }
;;;738    
;;;739        return PAN216_OK;
;;;740    }
        0x000010e2:    bd10        ..      POP      {r4,pc}
    i.PAN216_FactoryCalibration
    PAN216_FactoryCalibration
;;; ..\..\..\..\radio\pan216.c
;;;18     {
        0x000010e4:    b57c        |.      PUSH     {r2-r6,lr}
;;;19         uint8_t val[6] = {0};
        0x000010e6:    2000        .       MOVS     r0,#0
        0x000010e8:    9000        ..      STR      r0,[sp,#0]
;;;20     
;;;21         PAN216_WriteRegUnchecked(0x73, 0x01);
        0x000010ea:    9001        ..      STR      r0,[sp,#4]
        0x000010ec:    2101        .!      MOVS     r1,#1
        0x000010ee:    2073        s       MOVS     r0,#0x73
        0x000010f0:    f000fd46    ..F.    BL       PAN216_WriteRegUnchecked ; 0x1b80
;;;22         val[2] = Factory_Read(0x02);
        0x000010f4:    2002        .       MOVS     r0,#2
        0x000010f6:    f7fffcb7    ....    BL       Factory_Read ; 0xa68
        0x000010fa:    4669        iF      MOV      r1,sp
        0x000010fc:    7088        .p      STRB     r0,[r1,#2]
        0x000010fe:    4604        .F      MOV      r4,r0
;;;23         val[5] = Factory_Read(0x05);
        0x00001100:    2005        .       MOVS     r0,#5
        0x00001102:    f7fffcb1    ....    BL       Factory_Read ; 0xa68
        0x00001106:    4669        iF      MOV      r1,sp
        0x00001108:    7148        Hq      STRB     r0,[r1,#5]
;;;24     if ((val[5] >> 6) != 2 || (val[2] & 0x0F) != 5)
        0x0000110a:    0980        ..      LSRS     r0,r0,#6
        0x0000110c:    2802        .(      CMP      r0,#2
        0x0000110e:    d103        ..      BNE      0x1118 ; PAN216_FactoryCalibration + 52
        0x00001110:    0720         .      LSLS     r0,r4,#28
        0x00001112:    0f00        ..      LSRS     r0,r0,#28
        0x00001114:    2805        .(      CMP      r0,#5
        0x00001116:    d00b        ..      BEQ      0x1130 ; PAN216_FactoryCalibration + 76
;;;25         {
;;;26             PAN216_SetPage(1);
        0x00001118:    2001        .       MOVS     r0,#1
        0x0000111a:    f000fadb    ....    BL       PAN216_SetPage ; 0x16d4
;;;27             PAN216_WriteReg(0x05, 0x01);
        0x0000111e:    2101        .!      MOVS     r1,#1
        0x00001120:    2005        .       MOVS     r0,#5
        0x00001122:    f000fccd    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;28             PAN216_SetPage(0);
        0x00001126:    2000        .       MOVS     r0,#0
        0x00001128:    f000fad4    ....    BL       PAN216_SetPage ; 0x16d4
;;;29             return PAN216_ERR;
        0x0000112c:    2001        .       MOVS     r0,#1
        0x0000112e:    bd7c        |.      POP      {r2-r6,pc}
;;;30         }
;;;31     
;;;32         val[1] = Factory_Read(0x01);
        0x00001130:    2001        .       MOVS     r0,#1
        0x00001132:    f7fffc99    ....    BL       Factory_Read ; 0xa68
        0x00001136:    4669        iF      MOV      r1,sp
        0x00001138:    7048        Hp      STRB     r0,[r1,#1]
        0x0000113a:    4604        .F      MOV      r4,r0
;;;33         val[3] = Factory_Read(0x03);
        0x0000113c:    2003        .       MOVS     r0,#3
        0x0000113e:    f7fffc93    ....    BL       Factory_Read ; 0xa68
        0x00001142:    4669        iF      MOV      r1,sp
        0x00001144:    70c8        .p      STRB     r0,[r1,#3]
        0x00001146:    4605        .F      MOV      r5,r0
;;;34         val[4] = Factory_Read(0x04);
        0x00001148:    2004        .       MOVS     r0,#4
        0x0000114a:    f7fffc8d    ....    BL       Factory_Read ; 0xa68
        0x0000114e:    4669        iF      MOV      r1,sp
        0x00001150:    7108        .q      STRB     r0,[r1,#4]
;;;35     
;;;36         PAN216_SetPage(1);
        0x00001152:    2001        .       MOVS     r0,#1
        0x00001154:    f000fabe    ....    BL       PAN216_SetPage ; 0x16d4
;;;37         /* Recover cons_reg_en here */
;;;38         PAN216_WriteReg(0x05, 0x01);
        0x00001158:    2101        .!      MOVS     r1,#1
        0x0000115a:    2005        .       MOVS     r0,#5
        0x0000115c:    f000fcb0    ....    BL       PAN216_WriteReg ; 0x1ac0
        0x00001160:    4621        !F      MOV      r1,r4
;;;39         /* LDO_ANA_TRIM: 0x01[7:4]->P1 0x48[7:4] */
;;;40         /* LDO_RFFE_TRIM: 0x01[4:0]->P1 0x48[4:0] */
;;;41         PAN216_WriteReg(0x48, val[1]);
        0x00001162:    2048        H       MOVS     r0,#0x48
        0x00001164:    f000fcac    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;42         /* IPOLY_TRIM: 0x02[7:5]->P1 0x47[6:4] */
;;;43         PAN216_WriteRegBits(0x47, (val[2] >> 5) & 0x07, BITMASK_6_4);
        0x00001168:    4669        iF      MOV      r1,sp
        0x0000116a:    788c        .x      LDRB     r4,[r1,#2]
        0x0000116c:    2270        p"      MOVS     r2,#0x70
        0x0000116e:    0961        a.      LSRS     r1,r4,#5
        0x00001170:    2047        G       MOVS     r0,#0x47
        0x00001172:    f000fcd7    ....    BL       PAN216_WriteRegBits ; 0x1b24
;;;44         /* LDO_HP_TRIM[3:0]: 0x03[3:0] -> P1 0x4C[3:0] */
;;;45         PAN216_WriteRegBits(0x4c, val[3] & 0x0f, BITMASK_4_0);
        0x00001176:    0729        ).      LSLS     r1,r5,#28
        0x00001178:    0f09        ..      LSRS     r1,r1,#28
        0x0000117a:    221f        ."      MOVS     r2,#0x1f
        0x0000117c:    204c        L       MOVS     r0,#0x4c
        0x0000117e:    f000fcd1    ....    BL       PAN216_WriteRegBits ; 0x1b24
;;;46         /* FSYNVCO[4]*/
;;;47         if ((val[2] & BIT4) == 0)
        0x00001182:    06e0        ..      LSLS     r0,r4,#27
        0x00001184:    d401        ..      BMI      0x118a ; PAN216_FactoryCalibration + 166
;;;48         {
;;;49             PAN216_WriteReg(0x43, 0x11);
        0x00001186:    2111        .!      MOVS     r1,#0x11
        0x00001188:    e000        ..      B        0x118c ; PAN216_FactoryCalibration + 168
;;;50         }
;;;51         else
;;;52         {
;;;53             PAN216_WriteReg(0x43, 0x10);
        0x0000118a:    2110        .!      MOVS     r1,#0x10
        0x0000118c:    2043        C       MOVS     r0,#0x43
        0x0000118e:    f000fc97    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;54         }
;;;55         PAN216_SetPage(0);
        0x00001192:    2000        .       MOVS     r0,#0
        0x00001194:    f000fa9e    ....    BL       PAN216_SetPage ; 0x16d4
;;;56         /* VBG_TRIM_3V: 0x04[7:4]->P0 0x05[3:0] */
;;;57         /* LP_VREF_TRIM[3:0]: 0x03[7:4] -> P0 0x05[7:4] */
;;;58         PAN216_WriteReg(0x05, (val[3] & 0xF0) | (val[4] >> 4) & 0x0F);
        0x00001198:    4668        hF      MOV      r0,sp
        0x0000119a:    78c0        .x      LDRB     r0,[r0,#3]
        0x0000119c:    0901        ..      LSRS     r1,r0,#4
        0x0000119e:    4668        hF      MOV      r0,sp
        0x000011a0:    7900        .y      LDRB     r0,[r0,#4]
        0x000011a2:    0109        ..      LSLS     r1,r1,#4
        0x000011a4:    0900        ..      LSRS     r0,r0,#4
        0x000011a6:    4301        .C      ORRS     r1,r1,r0
        0x000011a8:    2005        .       MOVS     r0,#5
        0x000011aa:    f000fc89    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;59         return PAN216_OK;
        0x000011ae:    2000        .       MOVS     r0,#0
;;;60     }
        0x000011b0:    bd7c        |.      POP      {r2-r6,pc}
    i.PAN216_FinishCalibration
    PAN216_FinishCalibration
;;;61     
;;;62     /**
;;;63      * @brief Initialize the PAN216 transceiver from Deep Sleep Mode to STB3 Mode.
;;;64      *
;;;65      * @return PAN216_Err_t
;;;66      */
;;;67     PAN216_Err_t PAN216_Init(void)
;;;68     {
;;;69         PAN216_Err_t ret = PAN216_OK;
;;;70         const uint8_t gPAN216Page0Table[][2] = {PAN216_PAGE0TABLE};
;;;71         const uint8_t gPAN216Page1Table[][2] = {PAN216_PAGE1TABLE};
;;;72     
;;;73         /* Set Page 0 */
;;;74         PAN216_WriteRegUnchecked(0x00, 0x00);
;;;75     
;;;76         /* Initialize the SPI/IIC interface */
;;;77     #if (INTERFACE_MODE == USE_SPI_3LINE)
;;;78         PAN216_WriteRegUnchecked(SPI_CFG, 0x83);
;;;79         PAN216_WriteRegUnchecked(SYS_CFG, 0x02);
;;;80     #elif (INTERFACE_MODE == USE_I2C)
;;;81         /* Reset IIC in case of SDA of PAN216 is stuck at low */
;;;82         Pan216_Funs.i2c_reset();
;;;83     #endif
;;;84     #if INTERFACE_MODE == USE_SPI_4LINE
;;;85         PAN216_WriteRegUnchecked(SPI_CFG, 0x03);
;;;86         PAN216_WriteRegUnchecked(SYS_CFG, 0x03);
;;;87     #endif
;;;88         /* Enter STB1 Mode */
;;;89         P_ASSERT(PAN216_WriteReg(0x02, 0x02));
;;;90     
;;;91         /* Turn on EN_LS, POR_NRSTL, iso_to_0*/
;;;92         P_ASSERT(PAN216_WriteReg(0x02, 0x72));
;;;93     
;;;94         /* Wait for LDO to be stable*/
;;;95         Pan216_Funs.delayus(200);
;;;96     
;;;97     #if (XTAL_FREQ == XTAL_FREQ_16M)
;;;98         /* Set 16M crystal */
;;;99         PAN216_WriteReg(0x37, 0xE0); // This register is also configured in PAN216_SetDataRate()
;;;100        PAN216_SetPage(1);
;;;101        // PAN216_WriteReg(0x3f, 0xd4); // bit3:0 -> 4 default
;;;102        // PAN216_WriteReg(0x40, 0x28); // bit3 -> 1 default
;;;103        PAN216_WriteReg(0x41, 0xA6); // bit2 -> 1
;;;104    #else
;;;105        /* Set 32M crystal by default */
;;;106        PAN216_SetPage(1);
;;;107        PAN216_WriteReg(0x3f, 0xD2);
;;;108        PAN216_WriteReg(0x40, 0x20);
;;;109        PAN216_WriteReg(0x41, 0xA2);
;;;110    #endif
;;;111    
;;;112        /* Enter STB2 Mode */
;;;113        P_ASSERT(PAN216_WriteReg(0x02, 0x73));
;;;114    
;;;115        /* Wait for FSYNXO_CLKRDY, then turn off FSYNXO_STARTUP_FAST */
;;;116        while ((PAN216_ReadReg(0x6f) & BIT7) != BIT7)
;;;117            ;
;;;118        PAN216_WriteReg(0x4c, 0x68);
;;;119        
;;;120        /* Reset cons_reg_en, recover it later in PAN216_FactoryCalibration() */
;;;121        PAN216_WriteReg(0x05, 0x00);
;;;122    
;;;123        /* Enter STB3 Mode */
;;;124        P_ASSERT(PAN216_WriteReg(0x02, 0x74));
;;;125    
;;;126        /* Write preconfigured registers on Page 1 */
;;;127        for (int i = 0; i < (sizeof(gPAN216Page1Table) / sizeof(gPAN216Page1Table[0])); i++)
;;;128        {
;;;129            PAN216_WriteReg(gPAN216Page1Table[i][0], gPAN216Page1Table[i][1]);
;;;130        }
;;;131    
;;;132        PAN216_SetPage(0);
;;;133        /* Write preconfigured registers on Page 0 */
;;;134        for (int i = 0; i < (sizeof(gPAN216Page0Table) / sizeof(gPAN216Page0Table[0])); i++)
;;;135        {
;;;136            PAN216_WriteReg(gPAN216Page0Table[i][0], gPAN216Page0Table[i][1]);
;;;137        }
;;;138    
;;;139        P_ASSERT(PAN216_FactoryCalibration());
;;;140    
;;;141    #if EASY_RF
;;;142        PAN216_Calibration();
;;;143        PAN216_FinishCalibration();
;;;144        if (EASY_RF_TxPower == PAN216_TXPWR_0dBm_LOWPWR || EASY_RF_TxPower == PAN216_TXPWR_n4dBm)
;;;145        {
;;;146            PAN216_SetPage(1);
;;;147            uint8_t tmp = PAN216_ReadReg(0x48);
;;;148            PAN216_WriteReg(0x48, (tmp & 0xF0) | 0x0C);
;;;149            PAN216_SetPage(0);
;;;150        }
;;;151    #else
;;;152        /* If EASY_RF is not defined, the user should call PAN216_SetUpConfig() to set the
;;;153         * configuration. PAN216_Calibration() will be called inside PAN216_SetUpConfig() to make
;;;154         * sure PAN216 works properly. Refer to PAN216_SetDataRate() for more details.
;;;155         */
;;;156    #endif
;;;157        return ret;
;;;158    }
;;;159    
;;;160    
;;;161    
;;;162    /**
;;;163     * @brief This function is used to calibrate the PAN216 transceiver after the ChipMode and DataRate
;;;164     * are set. The calibration process includes VCO, TP, BW, and DCOC calibration.
;;;165     * @note It should be called every time the transceiver is powered up from deep sleep mode. Going to
;;;166     *      Sleep Mode and waking up does not require calibration.
;;;167     */
;;;168    void PAN216_Calibration(void)
;;;169    {
;;;170        /* Set Page 1 */
;;;171        PAN216_WriteReg(0x00, 0x01);
;;;172        /* Start VCO calibration */
;;;173        PAN216_WriteReg(0x1b, BIT3);
;;;174        /* Wait for VCO calibration to complete, 30 (32M Crystal)/ 48 (16M Crystal) us minimum */
;;;175        Pan216_Funs.delayus(300);
;;;176        // while (((PAN216_ReadReg(0x70) & BIT6) != BIT6))
;;;177        //     ;
;;;178        /* Start TP calibration */
;;;179        PAN216_WriteReg(0x1b, BIT4);
;;;180        /* Wait for TP calibration to complete, 44 ms minimum */
;;;181        Pan216_Funs.delayms(55);
;;;182        /* Enter RX mode */
;;;183        PAN216_WriteReg(0x02, 0x76);
;;;184        Pan216_Funs.delayus(200);
;;;185        /* Start Offset calibration */
;;;186        PAN216_WriteReg(0x1b, BIT5);
;;;187        /* Wait for Offset calibration to complete, 370 (32M Crystal)/ 590 (16M Crystal) us minimum */
;;;188        Pan216_Funs.delayus(700);
;;;189        // while (((PAN216_ReadReg(0x7f) & BIT7) != BIT7));
;;;190        /* Start BW calibration */
;;;191        PAN216_WriteReg(0x1b, BIT6);
;;;192        /* Wait for BW calibration to complete, 340 us minimum */
;;;193        Pan216_Funs.delayus(400);
;;;194        // while (((PAN216_ReadReg(0x6d) & BIT7) != BIT7))
;;;195        //     ;
;;;196        /* Start DCOC calibration */
;;;197        PAN216_WriteReg(0x1b, BIT7);
;;;198        /* Wait for DCOC calibration to complete, 1030 us minimum */
;;;199        Pan216_Funs.delayus(1100);
;;;200        // while (((PAN216_ReadReg(0x7f) & BIT7) != BIT7))
;;;201        //  ;
;;;202    }
;;;203    
;;;204    void PAN216_FinishCalibration(void)
;;;205    {
        0x000011b2:    b510        ..      PUSH     {r4,lr}
;;;206        /* Stop DCOC calibration */
;;;207        PAN216_WriteReg(0x1b, 0x00);
        0x000011b4:    2100        .!      MOVS     r1,#0
        0x000011b6:    201b        .       MOVS     r0,#0x1b
        0x000011b8:    f000fc82    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;208    
;;;209        /* Enter STB3 mode */
;;;210        PAN216_WriteReg(0x02, 0x74);
        0x000011bc:    2174        t!      MOVS     r1,#0x74
        0x000011be:    2002        .       MOVS     r0,#2
        0x000011c0:    f000fc7e    ..~.    BL       PAN216_WriteReg ; 0x1ac0
;;;211        /* Set Page 0 */
;;;212        PAN216_WriteReg(0x00, 0x00);
        0x000011c4:    2100        .!      MOVS     r1,#0
        0x000011c6:    4608        .F      MOV      r0,r1
        0x000011c8:    f000fc7a    ..z.    BL       PAN216_WriteReg ; 0x1ac0
;;;213    }
        0x000011cc:    bd10        ..      POP      {r4,pc}
    i.PAN216_GetIRQFlags
    PAN216_GetIRQFlags
;;;214    
;;;215    /**
;;;216     * @brief Enter Sleep Mode from Standby Mode
;;;217     *
;;;218     * @return PAN216_Err_t
;;;219     */
;;;220    PAN216_Err_t PAN216_EnterSleep(void)
;;;221    {
;;;222        P_ASSERT(PAN216_WriteReg(0x02, 0x74));
;;;223    #if INTERFACE_MODE == USE_I2C
;;;224        P_ASSERT(PAN216_WriteReg(0x02, 0x71));
;;;225    #else
;;;226        P_ASSERT(PAN216_WriteReg(0x02, 0x21));
;;;227    #endif
;;;228    
;;;229        return PAN216_OK;
;;;230    }
;;;231    
;;;232    /**
;;;233     * @brief Exit Sleep Mode and enter Standby Mode
;;;234     *
;;;235     * @return PAN216_Err_t
;;;236     */
;;;237    PAN216_Err_t PAN216_ExitSleep(void)
;;;238    {
;;;239        P_ASSERT(PAN216_WriteReg(0x02, 0x22)); // stb1
;;;240        P_ASSERT(PAN216_WriteReg(0x02, 0x74)); // stb3
;;;241        Pan216_Funs.delayus(500);              // waiting for CLKRDY, 440us(32M)
;;;242    
;;;243        return PAN216_OK;
;;;244    }
;;;245    
;;;246    /**
;;;247     * @brief Exit the TX state and enter standby mode. Make sure IRQ is cleared before calling this
;;;248     * function
;;;249     *
;;;250     * @param None
;;;251     *
;;;252     * @return Result of the operation
;;;253     *         - PAN216_OK
;;;254     *         - PAN216_ERR
;;;255     */
;;;256    PAN216_Err_t PAN216_ExitTxMode(void)
;;;257    {
;;;258        P_ASSERT(PAN216_WriteReg(0x02, 0x74));
;;;259    
;;;260        return PAN216_OK;
;;;261    }
;;;262    
;;;263    /**
;;;264     * @brief Exit the RX mode and enter standby mode. Make sure IRQ is cleared before calling this
;;;265     * function
;;;266     *
;;;267     * @param None
;;;268     *
;;;269     * @return Result of the operation
;;;270     *         - PAN216_OK
;;;271     *         - PAN216_ERR
;;;272     */
;;;273    PAN216_Err_t PAN216_ExitRxMode(void)
;;;274    {
;;;275        P_ASSERT(PAN216_WriteReg(0x02, 0x74));
;;;276    
;;;277        return PAN216_OK;
;;;278    }
;;;279    
;;;280    /**
;;;281     * @brief Prepares the PAN216 transceiver to enter TX or RX mode.
;;;282     *
;;;283     * This function configures the transceiver to switch between TX and RX modes. It sets the
;;;284     * appropriate registers to ensure the transceiver is ready for transmission or reception.
;;;285     * If the transceiver is already in the desired mode, this function does nothing.
;;;286     *
;;;287     * @param mode The desired mode to set, either PAN216_TX or PAN216_RX.
;;;288     *
;;;289     * @return PAN216_Err_t Result of the operation
;;;290     *         - PAN216_OK: Operation was successful
;;;291     *         - PAN216_ERR: Operation failed
;;;292     */
;;;293    PAN216_Err_t PAN216_PrepareTRxWithAck(PAN216_TRXMode_t Mode, bool EnAck)
;;;294    {
;;;295        if (EnAck == true)
;;;296        {
;;;297            /* Uses Tx confiruration if ACK is enabled */
;;;298            Mode = PAN216_TX;
;;;299        }
;;;300    
;;;301        if (Mode == PAN216_TX)
;;;302        {
;;;303            PAN216_WriteReg(0x00, 0x01);
;;;304            PAN216_WriteReg(0x42, 0xa4);
;;;305            PAN216_WriteReg(0x00, 0x00);
;;;306        }
;;;307        else if (Mode == PAN216_RX)
;;;308        {
;;;309            PAN216_WriteReg(0x00, 0x01);
;;;310            PAN216_WriteReg(0x42, 0xa0);
;;;311            PAN216_WriteReg(0x00, 0x00);
;;;312        }
;;;313    
;;;314        return PAN216_OK;
;;;315    }
;;;316    
;;;317    /**
;;;318     * @brief Exit the RX mode and enter standby mode. Make sure IRQ is cleared before calling this
;;;319     * function
;;;320     *
;;;321     * @return PAN216_Err_t
;;;322     */
;;;323    PAN216_Err_t PAN216_TxStart(void)
;;;324    {
;;;325        P_ASSERT(PAN216_WriteReg(0x02, 0x74));
;;;326        P_ASSERT(PAN216_WriteReg(0x02, 0x75));
;;;327    
;;;328        return PAN216_OK;
;;;329    }
;;;330    
;;;331    /**
;;;332     * @brief Exit the RX mode and enter standby mode. Make sure IRQ is cleared before calling this
;;;333     function
;;;334    
;;;335     *
;;;336     * @return PAN216_Err_t
;;;337     */
;;;338    PAN216_Err_t PAN216_RxStart(void)
;;;339    {
;;;340        P_ASSERT(PAN216_WriteReg(0x02, 0x74));
;;;341        P_ASSERT(PAN216_WriteReg(0x02, 0x76));
;;;342    
;;;343        return PAN216_OK;
;;;344    }
;;;345    
;;;346    /**
;;;347     * @brief Sets the frequency channel of the PAN216 transceiver
;;;348     *
;;;349     * @param Channel The desired radio frequency channel, as a value from 0 to 83
;;;350     *
;;;351     * @note The actual frequency will be (2400 + Channel)MHz
;;;352     * @note The PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
;;;353     *
;;;354     * @return uint8_t Result of the operation
;;;355     *         - PAN216_OK
;;;356     *         - PAN216_ERR
;;;357     */
;;;358    PAN216_Err_t PAN216_SetChannel(uint8_t Channel)
;;;359    {
;;;360        return PAN216_WriteReg(REG_P0_0X39, Channel);
;;;361    }
;;;362    
;;;363    /**
;;;364     * @brief Sets the address width of the PAN216 transceiver
;;;365     *
;;;366     * This function is used to set the RX/TX address field width of the PAN216 transceiver.
;;;367     * The address width is specified as a value between 3 and 5.
;;;368     *
;;;369     * @param AddrWidth The desired address width, as a value from 3 to 5
;;;370     *          - 00 2bytes
;;;371     *          - 01 3bytes
;;;372     *          - 10 4bytes
;;;373     *          - 11 5bytes
;;;374     * @return uint8_t Result of the operation
;;;375     *         - PAN216_OK
;;;376     *         - PAN216_ERR
;;;377     */
;;;378    PAN216_Err_t PAN216_SetAddrWidth(PAN216_AddrWidth_t AddrWidth)
;;;379    {
;;;380        P_ASSERT(PAN216_WriteRegBits(WMODE_CFG1, AddrWidth - 2, WMODE_CFG1_ADDR_BYTE_LENGTH));
;;;381    
;;;382        return PAN216_OK;
;;;383    }
;;;384    
;;;385    /**
;;;386     * @brief Set static RX address for a specified pipe
;;;387     *
;;;388     * @param Pipe - pipe to configure address, one of PAN216_Pipe_t values
;;;389     * @param Addr - pointer to the buffer with address
;;;390     * @param len - length of address
;;;391     * @note Pipe can be a number from 0 to 5 (RX pipes)
;;;392     * @note Buffer length must be equal to current address width of transceiver
;;;393     * @note For pipes[2..5] only the first byte of address will be written because other bytes of
;;;394     * address equals to pipe1
;;;395     * @note For pipes[2..5] only the first byte of address will be written because pipes 1-5 share the
;;;396     * four most significant address bytes
;;;397     * @return uint8_t Result of the operation
;;;398     *         - PAN216_OK
;;;399     *         - PAN216_ERR
;;;400     */
;;;401    PAN216_Err_t PAN216_SetRxAddr(PAN216_Pipe_t Pipe, uint8_t *Addr, uint8_t len)
;;;402    {
;;;403    
;;;404        switch (Pipe)
;;;405        {
;;;406        case PAN216_PIPE0:
;;;407            P_ASSERT(PAN216_WriteRegs(PIPE0_RXADDR0_CFG, Addr, len));
;;;408            break;
;;;409        case PAN216_PIPE1:
;;;410            P_ASSERT(PAN216_WriteRegs(PIPE1_RXADDR0_CFG, Addr, len));
;;;411            break;
;;;412        case PAN216_PIPE2:
;;;413            P_ASSERT(PAN216_WriteReg(PIPE2_RXADDR0_CFG, Addr[0]));
;;;414            break;
;;;415        case PAN216_PIPE3:
;;;416            P_ASSERT(PAN216_WriteReg(PIPE3_RXADDR0_CFG, Addr[0]));
;;;417            break;
;;;418        case PAN216_PIPE4:
;;;419            P_ASSERT(PAN216_WriteReg(PIPE4_RXADDR0_CFG, Addr[0]));
;;;420            break;
;;;421        case PAN216_PIPE5:
;;;422            P_ASSERT(PAN216_WriteReg(PIPE5_RXADDR0_CFG, Addr[0]));
;;;423            break;
;;;424        default:
;;;425            return PAN216_ERR;
;;;426        }
;;;427    
;;;428        return PAN216_OK;
;;;429    }
;;;430    
;;;431    /**
;;;432     * @brief Set static TX address for the transceiver
;;;433     *
;;;434     * @param Addr Pointer to the buffer with address
;;;435     * @param AddrWidth TX address field width, value from 3 to 5
;;;436     * @return uint8_t Result of the operation
;;;437     *         - PAN216_OK
;;;438     *         - PAN216_ERR
;;;439     */
;;;440    PAN216_Err_t PAN216_SetTxAddr(uint8_t *Addr, uint8_t len)
;;;441    {
;;;442        return PAN216_WriteRegs(TXADDR0_CFG, Addr, len);
;;;443    }
;;;444    
;;;445    /**
;;;446     * @brief Get the pipe number for the payload available for reading from RX FIFO
;;;447     *
;;;448     * @return uint8_t Pipe number or 0xFF if the RX FIFO is empty
;;;449     *         - 0x00: Pipe 0
;;;450     *         - 0x01: Pipe 1
;;;451     *         - 0x02: Pipe 2
;;;452     *         - 0x03: Pipe 3
;;;453     *         - 0x04: Pipe 4
;;;454     *         - 0x05: Pipe 5
;;;455     * @return uint8_t Result of the operation
;;;456     *         - PAN216_OK
;;;457     *         - PAN216_ERR
;;;458     */
;;;459    PAN216_Pipe_t PAN216_GetRxPipeNum(void)
;;;460    {
;;;461        uint8_t pipeNum = (PAN216_ReadReg(STATUS0) >> 4) & 0x07;
;;;462    
;;;463        return (PAN216_Pipe_t)pipeNum;
;;;464    }
;;;465    
;;;466    /**
;;;467     * @brief Get pending IRQ flags
;;;468     *
;;;469     * @return Current status of RX_DONE, TX_DONE, RX_TIMEOUT, and MAX_RT bits of the STATUS register
;;;470     */
;;;471    uint8_t PAN216_GetIRQFlags(void)
;;;472    {
        0x000011ce:    b510        ..      PUSH     {r4,lr}
;;;473        return PAN216_ReadReg(RFIRQFLG);
        0x000011d0:    2073        s       MOVS     r0,#0x73
        0x000011d2:    f000f944    ..D.    BL       PAN216_ReadReg ; 0x145e
;;;474    }
        0x000011d6:    bd10        ..      POP      {r4,pc}
    i.PAN216_GetRecvLen
    PAN216_GetRecvLen
;;;475    
;;;476    /**
;;;477     * @brief Clears any pending IRQ flags of the PAN216 transceiver
;;;478     *
;;;479     * This function clears any pending IRQ flags of the PAN216 transceiver.
;;;480     *         - RF_IT_TX_IRQ
;;;481     *         - RF_IT_MAX_RT_IRQ
;;;482     *         - RF_IT_ADDR_ERR_IRQ
;;;483     *         - RF_IT_CRC_ERR_IRQ
;;;484     *         - RF_IT_LEN_ERR_IRQ
;;;485     *         - RF_IT_PID_ERR_IRQ
;;;486     *         - RF_IT_RX_TIMEOUT_IRQ
;;;487     *         - RF_IT_RX_IRQ
;;;488     * @return Result of the operation
;;;489     *         - PAN216_OK
;;;490     *         - PAN216_ERR
;;;491     */
;;;492    PAN216_Err_t PAN216_ClearIRQFlags(uint8_t flags)
;;;493    {
;;;494        return PAN216_WriteRegUnchecked(RFIRQFLG, flags);
;;;495    }
;;;496    
;;;497    /**
;;;498     * @brief  This function is used to enable or disable RF interrupts
;;;499     * @param  NewState: which can be ENABLE or DISABLE
;;;500     * @param  RF_IT: Which can be
;;;501     *         - RF_IT_TX_IRQ
;;;502     *         - RF_IT_MAX_RT_IRQ
;;;503     *         - RF_IT_ADDR_ERR_IRQ
;;;504     *         - RF_IT_CRC_ERR_IRQ
;;;505     *         - RF_IT_LEN_ERR_IRQ
;;;506     *         - RF_IT_PID_ERR_IRQ
;;;507     *         - RF_IT_RX_TIMEOUT_IRQ
;;;508     *         - RF_IT_RX_IRQ
;;;509     * @return Result of the operation:
;;;510     *         - PAN216_OK
;;;511     *         - PAN216_ERR
;;;512     */
;;;513    PAN216_Err_t PAN216_ConfigIT(uint8_t RF_IT)
;;;514    {
;;;515        return PAN216_WriteReg(RFIRQ_CFG, ~RF_IT);
;;;516    }
;;;517    
;;;518    PAN216_Err_t PAN216_EnableInterfaceMuxIRQ(bool NewState)
;;;519    {
;;;520        if (NewState)
;;;521        {
;;;522    #if INTERFACE_MODE == USE_SPI_3LINE
;;;523            // P_ASSERT(PAN216_WriteReg(SYS_CFG, 0x06));
;;;524            // P_ASSERT(PAN216_WriteReg(LP_CFG, 0x05));
;;;525            P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, SYS_CFG, SYS_CFG_IRQ_MOSI_MUX_EN));
;;;526            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, LP_CFG, LP_CFG_IRQ_I2C_MUX_EN));
;;;527    #elif INTERFACE_MODE == USE_I2C
;;;528            P_ASSERT(PAN216_WriteReg(SYS_CFG, 0x03));
;;;529            P_ASSERT(PAN216_WriteReg(LP_CFG, 0x0D));
;;;530    #endif
;;;531        }
;;;532        else
;;;533        {
;;;534    #if INTERFACE_MODE == USE_SPI_3LINE
;;;535            P_ASSERT(PAN216_WriteReg(SYS_CFG, 0x03));
;;;536            P_ASSERT(PAN216_WriteReg(LP_CFG, 0x05));
;;;537    #elif INTERFACE_MODE == USE_I2C
;;;538            P_ASSERT(PAN216_WriteReg(SYS_CFG, 0x03));
;;;539            P_ASSERT(PAN216_WriteReg(LP_CFG, 0x05));
;;;540    #endif
;;;541        }
;;;542    
;;;543        return PAN216_OK;
;;;544    }
;;;545    /**
;;;546     * @brief Writes TX payload.
;;;547     *
;;;548     * @param pBuf Pointer to the buffer with payload data.
;;;549     * @param Length: Payload length in bytes.
;;;550     *
;;;551     * @return Result of the operation:
;;;552     *         - PAN216_OK
;;;553     *         - PAN216_ERR
;;;554     */
;;;555    PAN216_Err_t PAN216_WritePayload(uint8_t *pBuf, uint8_t Length)
;;;556    {
;;;557        P_ASSERT(PAN216_WriteFifo(TRX_FIFO, pBuf, Length));
;;;558        return PAN216_OK;
;;;559    }
;;;560    
;;;561    PAN216_Err_t PAN216_SendPacket(uint8_t *pBuf, uint8_t Length)
;;;562    {
;;;563        P_ASSERT(PAN216_WritePayload(pBuf, Length));
;;;564        P_ASSERT(PAN216_TxStart());
;;;565        return PAN216_OK;
;;;566    }
;;;567    
;;;568    PAN216_Err_t PAN216_SendPacketContinuous(uint8_t *pBuf, uint8_t Length)
;;;569    {
;;;570        P_ASSERT(PAN216_WritePayload(pBuf, Length));
;;;571    
;;;572        // if tx_en is 0, trigger tx
;;;573        if ((PAN216_ReadReg(STATE_CFG) & STATE_CFG_REG_OPERATE_MODE) != STATE_CMD_TX)
;;;574        {
;;;575            PAN216_TxStart();
;;;576        }
;;;577        P_ASSERT(PAN216_WriteReg(STATE_CFG, 0x75));
;;;578        P_ASSERT(PAN216_WriteReg(STATE_CFG, 0xf5));
;;;579    
;;;580        return PAN216_OK;
;;;581    }
;;;582    
;;;583    /**
;;;584     * @brief This function reads the length of the payload
;;;585     *
;;;586     * @return the length of the payload
;;;587     */
;;;588    uint8_t PAN216_GetRecvLen(void)
;;;589    {
        0x000011d8:    b510        ..      PUSH     {r4,lr}
;;;590        return PAN216_ReadReg(STATUS3);
        0x000011da:    2077        w       MOVS     r0,#0x77
        0x000011dc:    f000f93f    ..?.    BL       PAN216_ReadReg ; 0x145e
;;;591    }
        0x000011e0:    bd10        ..      POP      {r4,pc}
        0x000011e2:    0000        ..      MOVS     r0,r0
    i.PAN216_GetRssiCode
    PAN216_GetRssiCode
;;;592    
;;;593    PAN216_Err_t PAN216_ReadNordicPktHeader(uint8_t *Header0, uint8_t *Header1, uint8_t *Length)
;;;594    {
;;;595        if (Header0 != NULL)
;;;596        {
;;;597            *Header0 = PAN216_ReadReg(STATUS1);
;;;598        }
;;;599    
;;;600        if (Header1 != NULL)
;;;601        {
;;;602            *Header1 = PAN216_ReadReg(STATUS2);
;;;603        }
;;;604    
;;;605        if (Length != NULL)
;;;606        {
;;;607            *Length = PAN216_ReadReg(STATUS3);
;;;608        }
;;;609    
;;;610        return PAN216_OK;
;;;611    }
;;;612    
;;;613    PAN216_Err_t PAN216_SetWhiteInitVal(uint8_t val)
;;;614    {
;;;615        return PAN216_WriteRegBits(SCR_CFG, val, SCR_CFG_SCR_INI);
;;;616    }
;;;617    
;;;618    /**
;;;619     * @brief Get the current RSSI code
;;;620     *
;;;621     * @param None
;;;622     *
;;;623     * @return RSSI code
;;;624     */
;;;625    u16 PAN216_GetRssiCode(void)
;;;626    {
        0x000011e4:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000011e6:    b087        ..      SUB      sp,sp,#0x1c
;;;627        u16 CurrCode;
;;;628        int codedBm;
;;;629        u8 RssiCode[2];
;;;630        float th1 = PAN216_ReadReg(0x55) - 256 + 7.5f;
        0x000011e8:    2055        U       MOVS     r0,#0x55
        0x000011ea:    f000f938    ..8.    BL       PAN216_ReadReg ; 0x145e
        0x000011ee:    38ff        .8      SUBS     r0,r0,#0xff
        0x000011f0:    3801        .8      SUBS     r0,#1
        0x000011f2:    f7fff87b    ..{.    BL       __aeabi_i2f ; 0x2ec
        0x000011f6:    4c2b        +L      LDR      r4,[pc,#172] ; [0x12a4] = 0x40f00000
        0x000011f8:    4621        !F      MOV      r1,r4
        0x000011fa:    f7fff81e    ....    BL       __aeabi_fadd ; 0x23a
;;;631        float th2 = PAN216_ReadReg(0x56) - 256 + 7.5f;
        0x000011fe:    9002        ..      STR      r0,[sp,#8]
        0x00001200:    2056        V       MOVS     r0,#0x56
        0x00001202:    f000f92c    ..,.    BL       PAN216_ReadReg ; 0x145e
        0x00001206:    38ff        .8      SUBS     r0,r0,#0xff
        0x00001208:    3801        .8      SUBS     r0,#1
        0x0000120a:    f7fff86f    ..o.    BL       __aeabi_i2f ; 0x2ec
        0x0000120e:    4621        !F      MOV      r1,r4
        0x00001210:    f7fff813    ....    BL       __aeabi_fadd ; 0x23a
;;;632        float th3 = PAN216_ReadReg(0x57) - 256 + 7.5f;
        0x00001214:    9001        ..      STR      r0,[sp,#4]
        0x00001216:    2057        W       MOVS     r0,#0x57
        0x00001218:    f000f921    ..!.    BL       PAN216_ReadReg ; 0x145e
        0x0000121c:    38ff        .8      SUBS     r0,r0,#0xff
        0x0000121e:    3801        .8      SUBS     r0,#1
        0x00001220:    f7fff864    ..d.    BL       __aeabi_i2f ; 0x2ec
        0x00001224:    4621        !F      MOV      r1,r4
        0x00001226:    f7fff808    ....    BL       __aeabi_fadd ; 0x23a
;;;633        static u16 lastCode = 0;
;;;634        P_ASSERT(PAN216_ReadRegs(0x7A, RssiCode, 2));
        0x0000122a:    9000        ..      STR      r0,[sp,#0]
        0x0000122c:    2202        ."      MOVS     r2,#2
        0x0000122e:    a905        ..      ADD      r1,sp,#0x14
        0x00001230:    207a        z       MOVS     r0,#0x7a
        0x00001232:    f000f91c    ....    BL       PAN216_ReadRegs ; 0x146e
        0x00001236:    4e1c        .N      LDR      r6,[pc,#112] ; [0x12a8] = 0x2000000c
        0x00001238:    2800        .(      CMP      r0,#0
        0x0000123a:    d002        ..      BEQ      0x1242 ; PAN216_GetRssiCode + 94
        0x0000123c:    2001        .       MOVS     r0,#1
        0x0000123e:    b007        ..      ADD      sp,sp,#0x1c
        0x00001240:    bdf0        ..      POP      {r4-r7,pc}
;;;635        CurrCode = ((RssiCode[0] + ((u16)RssiCode[1] << 8)) & 0x3FFF); // get origin packet rssi code
        0x00001242:    4668        hF      MOV      r0,sp
        0x00001244:    7d01        .}      LDRB     r1,[r0,#0x14]
        0x00001246:    7d40        @}      LDRB     r0,[r0,#0x15]
        0x00001248:    0200        ..      LSLS     r0,r0,#8
        0x0000124a:    1808        ..      ADDS     r0,r1,r0
        0x0000124c:    0485        ..      LSLS     r5,r0,#18
        0x0000124e:    2001        .       MOVS     r0,#1
        0x00001250:    0cad        ..      LSRS     r5,r5,#18
;;;636        codedBm = (int)(CurrCode - 16384) / 4;
        0x00001252:    0380        ..      LSLS     r0,r0,#14
        0x00001254:    1a28        (.      SUBS     r0,r5,r0
        0x00001256:    17c1        ..      ASRS     r1,r0,#31
        0x00001258:    0f89        ..      LSRS     r1,r1,#30
        0x0000125a:    1808        ..      ADDS     r0,r1,r0
        0x0000125c:    1087        ..      ASRS     r7,r0,#2
;;;637        u8 index = ((PAN216_ReadReg(0x79) & (BIT4 | BIT5)) >> 4);
        0x0000125e:    2079        y       MOVS     r0,#0x79
        0x00001260:    f000f8fd    ....    BL       PAN216_ReadReg ; 0x145e
        0x00001264:    0680        ..      LSLS     r0,r0,#26
        0x00001266:    0f84        ..      LSRS     r4,r0,#30
;;;638        if ((codedBm >= th3 && index == 3) || (codedBm >= th2 && index == 2) || (codedBm >= th1 &&
        0x00001268:    4638        8F      MOV      r0,r7
        0x0000126a:    f7fff83f    ..?.    BL       __aeabi_i2f ; 0x2ec
        0x0000126e:    4607        .F      MOV      r7,r0
        0x00001270:    9900        ..      LDR      r1,[sp,#0]
        0x00001272:    f7fff847    ..G.    BL       __aeabi_cfrcmple ; 0x304
        0x00001276:    d801        ..      BHI      0x127c ; PAN216_GetRssiCode + 152
        0x00001278:    2c03        .,      CMP      r4,#3
        0x0000127a:    d010        ..      BEQ      0x129e ; PAN216_GetRssiCode + 186
        0x0000127c:    4638        8F      MOV      r0,r7
        0x0000127e:    9901        ..      LDR      r1,[sp,#4]
        0x00001280:    f7fff840    ..@.    BL       __aeabi_cfrcmple ; 0x304
        0x00001284:    d801        ..      BHI      0x128a ; PAN216_GetRssiCode + 166
        0x00001286:    2c02        .,      CMP      r4,#2
        0x00001288:    d009        ..      BEQ      0x129e ; PAN216_GetRssiCode + 186
        0x0000128a:    4638        8F      MOV      r0,r7
        0x0000128c:    9902        ..      LDR      r1,[sp,#8]
        0x0000128e:    f7fff839    ..9.    BL       __aeabi_cfrcmple ; 0x304
        0x00001292:    d801        ..      BHI      0x1298 ; PAN216_GetRssiCode + 180
;;;639        index == 1))
        0x00001294:    2c01        .,      CMP      r4,#1
        0x00001296:    d002        ..      BEQ      0x129e ; PAN216_GetRssiCode + 186
;;;640        {
;;;641            return lastCode;
;;;642        }
;;;643    
;;;644       lastCode = CurrCode;
        0x00001298:    8035        5.      STRH     r5,[r6,#0]
;;;645    
;;;646       return CurrCode;
        0x0000129a:    4628        (F      MOV      r0,r5
;;;647    }
        0x0000129c:    e7cf        ..      B        0x123e ; PAN216_GetRssiCode + 90
        0x0000129e:    8830        0.      LDRH     r0,[r6,#0]
        0x000012a0:    e7cd        ..      B        0x123e ; PAN216_GetRssiCode + 90
    $d
        0x000012a2:    0000        ..      DCW    0
        0x000012a4:    40f00000    ...@    DCD    1089470464
        0x000012a8:    2000000c    ...     DCD    536870924
    $t
    i.PAN216_GetRssiDBm
    PAN216_GetRssiDBm
;;;648    
;;;649    /**
;;;650     * @brief Get the Packet RSSI code in dBm.
;;;651     *
;;;652     * @param None
;;;653     *
;;;654     * @return dBm
;;;655     */
;;;656    int PAN216_GetRssiDBm(void)
;;;657    {
        0x000012ac:    b510        ..      PUSH     {r4,lr}
        0x000012ae:    f7ffff99    ....    BL       PAN216_GetRssiCode ; 0x11e4
        0x000012b2:    2101        .!      MOVS     r1,#1
        0x000012b4:    0389        ..      LSLS     r1,r1,#14
        0x000012b6:    1a40        @.      SUBS     r0,r0,r1
        0x000012b8:    17c1        ..      ASRS     r1,r0,#31
        0x000012ba:    0f89        ..      LSRS     r1,r1,#30
        0x000012bc:    1808        ..      ADDS     r0,r1,r0
        0x000012be:    1080        ..      ASRS     r0,r0,#2
        0x000012c0:    bd10        ..      POP      {r4,pc}
    i.PAN216_GetRxPipeNum
    PAN216_GetRxPipeNum
;;; ..\..\..\..\radio\pan216.c (460)
        0x000012c2:    b510        ..      PUSH     {r4,lr}
;;;461        uint8_t pipeNum = (PAN216_ReadReg(STATUS0) >> 4) & 0x07;
        0x000012c4:    2074        t       MOVS     r0,#0x74
        0x000012c6:    f000f8ca    ....    BL       PAN216_ReadReg ; 0x145e
        0x000012ca:    0640        @.      LSLS     r0,r0,#25
        0x000012cc:    0f40        @.      LSRS     r0,r0,#29
;;;462    
;;;463        return (PAN216_Pipe_t)pipeNum;
;;;464    }
        0x000012ce:    bd10        ..      POP      {r4,pc}
    i.PAN216_Init
    PAN216_Init
;;; ..\..\..\..\radio\pan216.c (68)
        0x000012d0:    b570        p.      PUSH     {r4-r6,lr}
        0x000012d2:    b08c        ..      SUB      sp,sp,#0x30
;;;69         PAN216_Err_t ret = PAN216_OK;
        0x000012d4:    2600        .&      MOVS     r6,#0
;;;70         const uint8_t gPAN216Page0Table[][2] = {PAN216_PAGE0TABLE};
        0x000012d6:    2224        $"      MOVS     r2,#0x24
        0x000012d8:    4937        7I      LDR      r1,[pc,#220] ; [0x13b8] = 0x2e3c
        0x000012da:    4668        hF      MOV      r0,sp
        0x000012dc:    f7feff9b    ....    BL       __aeabi_memcpy ; 0x216
;;;71         const uint8_t gPAN216Page1Table[][2] = {PAN216_PAGE1TABLE};
        0x000012e0:    4935        5I      LDR      r1,[pc,#212] ; [0x13b8] = 0x2e3c
        0x000012e2:    3908        .9      SUBS     r1,r1,#8
        0x000012e4:    c903        ..      LDM      r1,{r0,r1}
;;;72     
;;;73         /* Set Page 0 */
;;;74         PAN216_WriteRegUnchecked(0x00, 0x00);
        0x000012e6:    910a        ..      STR      r1,[sp,#0x28]
        0x000012e8:    9009        ..      STR      r0,[sp,#0x24]
        0x000012ea:    2100        .!      MOVS     r1,#0
        0x000012ec:    4608        .F      MOV      r0,r1
        0x000012ee:    f000fc47    ..G.    BL       PAN216_WriteRegUnchecked ; 0x1b80
;;;75     
;;;76         /* Initialize the SPI/IIC interface */
;;;77     #if (INTERFACE_MODE == USE_SPI_3LINE)
;;;78         PAN216_WriteRegUnchecked(SPI_CFG, 0x83);
;;;79         PAN216_WriteRegUnchecked(SYS_CFG, 0x02);
;;;80     #elif (INTERFACE_MODE == USE_I2C)
;;;81         /* Reset IIC in case of SDA of PAN216 is stuck at low */
;;;82         Pan216_Funs.i2c_reset();
;;;83     #endif
;;;84     #if INTERFACE_MODE == USE_SPI_4LINE
;;;85         PAN216_WriteRegUnchecked(SPI_CFG, 0x03);
        0x000012f2:    2103        .!      MOVS     r1,#3
        0x000012f4:    2004        .       MOVS     r0,#4
        0x000012f6:    f000fc43    ..C.    BL       PAN216_WriteRegUnchecked ; 0x1b80
;;;86         PAN216_WriteRegUnchecked(SYS_CFG, 0x03);
        0x000012fa:    2103        .!      MOVS     r1,#3
        0x000012fc:    4608        .F      MOV      r0,r1
        0x000012fe:    f000fc3f    ..?.    BL       PAN216_WriteRegUnchecked ; 0x1b80
;;;87     #endif
;;;88         /* Enter STB1 Mode */
;;;89         P_ASSERT(PAN216_WriteReg(0x02, 0x02));
        0x00001302:    2102        .!      MOVS     r1,#2
        0x00001304:    4608        .F      MOV      r0,r1
        0x00001306:    f000fbdb    ....    BL       PAN216_WriteReg ; 0x1ac0
        0x0000130a:    2800        .(      CMP      r0,#0
        0x0000130c:    d14e        N.      BNE      0x13ac ; PAN216_Init + 220
;;;90     
;;;91         /* Turn on EN_LS, POR_NRSTL, iso_to_0*/
;;;92         P_ASSERT(PAN216_WriteReg(0x02, 0x72));
        0x0000130e:    2172        r!      MOVS     r1,#0x72
        0x00001310:    2002        .       MOVS     r0,#2
        0x00001312:    f000fbd5    ....    BL       PAN216_WriteReg ; 0x1ac0
        0x00001316:    2800        .(      CMP      r0,#0
        0x00001318:    d148        H.      BNE      0x13ac ; PAN216_Init + 220
;;;93     
;;;94         /* Wait for LDO to be stable*/
;;;95         Pan216_Funs.delayus(200);
        0x0000131a:    4828        (H      LDR      r0,[pc,#160] ; [0x13bc] = 0x20000010
        0x0000131c:    6901        .i      LDR      r1,[r0,#0x10]
        0x0000131e:    20c8        .       MOVS     r0,#0xc8
        0x00001320:    4788        .G      BLX      r1
;;;96     
;;;97     #if (XTAL_FREQ == XTAL_FREQ_16M)
;;;98         /* Set 16M crystal */
;;;99         PAN216_WriteReg(0x37, 0xE0); // This register is also configured in PAN216_SetDataRate()
;;;100        PAN216_SetPage(1);
;;;101        // PAN216_WriteReg(0x3f, 0xd4); // bit3:0 -> 4 default
;;;102        // PAN216_WriteReg(0x40, 0x28); // bit3 -> 1 default
;;;103        PAN216_WriteReg(0x41, 0xA6); // bit2 -> 1
;;;104    #else
;;;105        /* Set 32M crystal by default */
;;;106        PAN216_SetPage(1);
        0x00001322:    2001        .       MOVS     r0,#1
        0x00001324:    f000f9d6    ....    BL       PAN216_SetPage ; 0x16d4
;;;107        PAN216_WriteReg(0x3f, 0xD2);
        0x00001328:    21d2        .!      MOVS     r1,#0xd2
        0x0000132a:    203f        ?       MOVS     r0,#0x3f
        0x0000132c:    f000fbc8    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;108        PAN216_WriteReg(0x40, 0x20);
        0x00001330:    2120         !      MOVS     r1,#0x20
        0x00001332:    2040        @       MOVS     r0,#0x40
        0x00001334:    f000fbc4    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;109        PAN216_WriteReg(0x41, 0xA2);
        0x00001338:    21a2        .!      MOVS     r1,#0xa2
        0x0000133a:    2041        A       MOVS     r0,#0x41
        0x0000133c:    f000fbc0    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;110    #endif
;;;111    
;;;112        /* Enter STB2 Mode */
;;;113        P_ASSERT(PAN216_WriteReg(0x02, 0x73));
        0x00001340:    2173        s!      MOVS     r1,#0x73
        0x00001342:    2002        .       MOVS     r0,#2
        0x00001344:    f000fbbc    ....    BL       PAN216_WriteReg ; 0x1ac0
        0x00001348:    2800        .(      CMP      r0,#0
        0x0000134a:    d12f        /.      BNE      0x13ac ; PAN216_Init + 220
;;;114    
;;;115        /* Wait for FSYNXO_CLKRDY, then turn off FSYNXO_STARTUP_FAST */
;;;116        while ((PAN216_ReadReg(0x6f) & BIT7) != BIT7)
        0x0000134c:    206f        o       MOVS     r0,#0x6f
        0x0000134e:    f000f886    ....    BL       PAN216_ReadReg ; 0x145e
        0x00001352:    09c0        ..      LSRS     r0,r0,#7
        0x00001354:    d0fa        ..      BEQ      0x134c ; PAN216_Init + 124
;;;117            ;
;;;118        PAN216_WriteReg(0x4c, 0x68);
        0x00001356:    2168        h!      MOVS     r1,#0x68
        0x00001358:    204c        L       MOVS     r0,#0x4c
        0x0000135a:    f000fbb1    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;119        
;;;120        /* Reset cons_reg_en, recover it later in PAN216_FactoryCalibration() */
;;;121        PAN216_WriteReg(0x05, 0x00);
        0x0000135e:    2100        .!      MOVS     r1,#0
        0x00001360:    2005        .       MOVS     r0,#5
        0x00001362:    f000fbad    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;122    
;;;123        /* Enter STB3 Mode */
;;;124        P_ASSERT(PAN216_WriteReg(0x02, 0x74));
        0x00001366:    2174        t!      MOVS     r1,#0x74
        0x00001368:    2002        .       MOVS     r0,#2
        0x0000136a:    f000fba9    ....    BL       PAN216_WriteReg ; 0x1ac0
        0x0000136e:    2800        .(      CMP      r0,#0
        0x00001370:    d11c        ..      BNE      0x13ac ; PAN216_Init + 220
;;;125    
;;;126        /* Write preconfigured registers on Page 1 */
;;;127        for (int i = 0; i < (sizeof(gPAN216Page1Table) / sizeof(gPAN216Page1Table[0])); i++)
        0x00001372:    2400        .$      MOVS     r4,#0
        0x00001374:    ad09        ..      ADD      r5,sp,#0x24
        0x00001376:    0060        `.      LSLS     r0,r4,#1
        0x00001378:    1941        A.      ADDS     r1,r0,r5
        0x0000137a:    7849        Ix      LDRB     r1,[r1,#1]
        0x0000137c:    5c28        (\      LDRB     r0,[r5,r0]
        0x0000137e:    f000fb9f    ....    BL       PAN216_WriteReg ; 0x1ac0
        0x00001382:    1c64        d.      ADDS     r4,r4,#1
        0x00001384:    2c03        .,      CMP      r4,#3
        0x00001386:    d3f6        ..      BCC      0x1376 ; PAN216_Init + 166
;;;128        {
;;;129            PAN216_WriteReg(gPAN216Page1Table[i][0], gPAN216Page1Table[i][1]);
;;;130        }
;;;131    
;;;132        PAN216_SetPage(0);
        0x00001388:    2000        .       MOVS     r0,#0
        0x0000138a:    f000f9a3    ....    BL       PAN216_SetPage ; 0x16d4
;;;133        /* Write preconfigured registers on Page 0 */
;;;134        for (int i = 0; i < (sizeof(gPAN216Page0Table) / sizeof(gPAN216Page0Table[0])); i++)
        0x0000138e:    2400        .$      MOVS     r4,#0
        0x00001390:    466d        mF      MOV      r5,sp
        0x00001392:    0060        `.      LSLS     r0,r4,#1
        0x00001394:    1941        A.      ADDS     r1,r0,r5
        0x00001396:    7849        Ix      LDRB     r1,[r1,#1]
        0x00001398:    5c28        (\      LDRB     r0,[r5,r0]
        0x0000139a:    f000fb91    ....    BL       PAN216_WriteReg ; 0x1ac0
        0x0000139e:    1c64        d.      ADDS     r4,r4,#1
        0x000013a0:    2c12        .,      CMP      r4,#0x12
        0x000013a2:    d3f6        ..      BCC      0x1392 ; PAN216_Init + 194
;;;135        {
;;;136            PAN216_WriteReg(gPAN216Page0Table[i][0], gPAN216Page0Table[i][1]);
;;;137        }
;;;138    
;;;139        P_ASSERT(PAN216_FactoryCalibration());
        0x000013a4:    f7fffe9e    ....    BL       PAN216_FactoryCalibration ; 0x10e4
        0x000013a8:    2800        .(      CMP      r0,#0
        0x000013aa:    d002        ..      BEQ      0x13b2 ; PAN216_Init + 226
        0x000013ac:    2001        .       MOVS     r0,#1
        0x000013ae:    b00c        ..      ADD      sp,sp,#0x30
        0x000013b0:    bd70        p.      POP      {r4-r6,pc}
;;;140    
;;;141    #if EASY_RF
;;;142        PAN216_Calibration();
;;;143        PAN216_FinishCalibration();
;;;144        if (EASY_RF_TxPower == PAN216_TXPWR_0dBm_LOWPWR || EASY_RF_TxPower == PAN216_TXPWR_n4dBm)
;;;145        {
;;;146            PAN216_SetPage(1);
;;;147            uint8_t tmp = PAN216_ReadReg(0x48);
;;;148            PAN216_WriteReg(0x48, (tmp & 0xF0) | 0x0C);
;;;149            PAN216_SetPage(0);
;;;150        }
;;;151    #else
;;;152        /* If EASY_RF is not defined, the user should call PAN216_SetUpConfig() to set the
;;;153         * configuration. PAN216_Calibration() will be called inside PAN216_SetUpConfig() to make
;;;154         * sure PAN216 works properly. Refer to PAN216_SetDataRate() for more details.
;;;155         */
;;;156    #endif
;;;157        return ret;
        0x000013b2:    4630        0F      MOV      r0,r6
;;;158    }
        0x000013b4:    e7fb        ..      B        0x13ae ; PAN216_Init + 222
    $d
        0x000013b6:    0000        ..      DCW    0
        0x000013b8:    00002e3c    <...    DCD    11836
        0x000013bc:    20000010    ...     DCD    536870928
    $t
    i.PAN216_PrepareTRxWithAck
    PAN216_PrepareTRxWithAck
;;;159    
;;;160    
;;;161    
;;;162    /**
;;;163     * @brief This function is used to calibrate the PAN216 transceiver after the ChipMode and DataRate
;;;164     * are set. The calibration process includes VCO, TP, BW, and DCOC calibration.
;;;165     * @note It should be called every time the transceiver is powered up from deep sleep mode. Going to
;;;166     *      Sleep Mode and waking up does not require calibration.
;;;167     */
;;;168    void PAN216_Calibration(void)
;;;169    {
;;;170        /* Set Page 1 */
;;;171        PAN216_WriteReg(0x00, 0x01);
;;;172        /* Start VCO calibration */
;;;173        PAN216_WriteReg(0x1b, BIT3);
;;;174        /* Wait for VCO calibration to complete, 30 (32M Crystal)/ 48 (16M Crystal) us minimum */
;;;175        Pan216_Funs.delayus(300);
;;;176        // while (((PAN216_ReadReg(0x70) & BIT6) != BIT6))
;;;177        //     ;
;;;178        /* Start TP calibration */
;;;179        PAN216_WriteReg(0x1b, BIT4);
;;;180        /* Wait for TP calibration to complete, 44 ms minimum */
;;;181        Pan216_Funs.delayms(55);
;;;182        /* Enter RX mode */
;;;183        PAN216_WriteReg(0x02, 0x76);
;;;184        Pan216_Funs.delayus(200);
;;;185        /* Start Offset calibration */
;;;186        PAN216_WriteReg(0x1b, BIT5);
;;;187        /* Wait for Offset calibration to complete, 370 (32M Crystal)/ 590 (16M Crystal) us minimum */
;;;188        Pan216_Funs.delayus(700);
;;;189        // while (((PAN216_ReadReg(0x7f) & BIT7) != BIT7));
;;;190        /* Start BW calibration */
;;;191        PAN216_WriteReg(0x1b, BIT6);
;;;192        /* Wait for BW calibration to complete, 340 us minimum */
;;;193        Pan216_Funs.delayus(400);
;;;194        // while (((PAN216_ReadReg(0x6d) & BIT7) != BIT7))
;;;195        //     ;
;;;196        /* Start DCOC calibration */
;;;197        PAN216_WriteReg(0x1b, BIT7);
;;;198        /* Wait for DCOC calibration to complete, 1030 us minimum */
;;;199        Pan216_Funs.delayus(1100);
;;;200        // while (((PAN216_ReadReg(0x7f) & BIT7) != BIT7))
;;;201        //  ;
;;;202    }
;;;203    
;;;204    void PAN216_FinishCalibration(void)
;;;205    {
;;;206        /* Stop DCOC calibration */
;;;207        PAN216_WriteReg(0x1b, 0x00);
;;;208    
;;;209        /* Enter STB3 mode */
;;;210        PAN216_WriteReg(0x02, 0x74);
;;;211        /* Set Page 0 */
;;;212        PAN216_WriteReg(0x00, 0x00);
;;;213    }
;;;214    
;;;215    /**
;;;216     * @brief Enter Sleep Mode from Standby Mode
;;;217     *
;;;218     * @return PAN216_Err_t
;;;219     */
;;;220    PAN216_Err_t PAN216_EnterSleep(void)
;;;221    {
;;;222        P_ASSERT(PAN216_WriteReg(0x02, 0x74));
;;;223    #if INTERFACE_MODE == USE_I2C
;;;224        P_ASSERT(PAN216_WriteReg(0x02, 0x71));
;;;225    #else
;;;226        P_ASSERT(PAN216_WriteReg(0x02, 0x21));
;;;227    #endif
;;;228    
;;;229        return PAN216_OK;
;;;230    }
;;;231    
;;;232    /**
;;;233     * @brief Exit Sleep Mode and enter Standby Mode
;;;234     *
;;;235     * @return PAN216_Err_t
;;;236     */
;;;237    PAN216_Err_t PAN216_ExitSleep(void)
;;;238    {
;;;239        P_ASSERT(PAN216_WriteReg(0x02, 0x22)); // stb1
;;;240        P_ASSERT(PAN216_WriteReg(0x02, 0x74)); // stb3
;;;241        Pan216_Funs.delayus(500);              // waiting for CLKRDY, 440us(32M)
;;;242    
;;;243        return PAN216_OK;
;;;244    }
;;;245    
;;;246    /**
;;;247     * @brief Exit the TX state and enter standby mode. Make sure IRQ is cleared before calling this
;;;248     * function
;;;249     *
;;;250     * @param None
;;;251     *
;;;252     * @return Result of the operation
;;;253     *         - PAN216_OK
;;;254     *         - PAN216_ERR
;;;255     */
;;;256    PAN216_Err_t PAN216_ExitTxMode(void)
;;;257    {
;;;258        P_ASSERT(PAN216_WriteReg(0x02, 0x74));
;;;259    
;;;260        return PAN216_OK;
;;;261    }
;;;262    
;;;263    /**
;;;264     * @brief Exit the RX mode and enter standby mode. Make sure IRQ is cleared before calling this
;;;265     * function
;;;266     *
;;;267     * @param None
;;;268     *
;;;269     * @return Result of the operation
;;;270     *         - PAN216_OK
;;;271     *         - PAN216_ERR
;;;272     */
;;;273    PAN216_Err_t PAN216_ExitRxMode(void)
;;;274    {
;;;275        P_ASSERT(PAN216_WriteReg(0x02, 0x74));
;;;276    
;;;277        return PAN216_OK;
;;;278    }
;;;279    
;;;280    /**
;;;281     * @brief Prepares the PAN216 transceiver to enter TX or RX mode.
;;;282     *
;;;283     * This function configures the transceiver to switch between TX and RX modes. It sets the
;;;284     * appropriate registers to ensure the transceiver is ready for transmission or reception.
;;;285     * If the transceiver is already in the desired mode, this function does nothing.
;;;286     *
;;;287     * @param mode The desired mode to set, either PAN216_TX or PAN216_RX.
;;;288     *
;;;289     * @return PAN216_Err_t Result of the operation
;;;290     *         - PAN216_OK: Operation was successful
;;;291     *         - PAN216_ERR: Operation failed
;;;292     */
;;;293    PAN216_Err_t PAN216_PrepareTRxWithAck(PAN216_TRXMode_t Mode, bool EnAck)
;;;294    {
        0x000013c0:    b510        ..      PUSH     {r4,lr}
        0x000013c2:    2900        .)      CMP      r1,#0
;;; ..\..\..\..\radio\pan216.c (294)
        0x000013c4:    d104        ..      BNE      0x13d0 ; PAN216_PrepareTRxWithAck + 16
;;;295        if (EnAck == true)
;;;296        {
;;;297            /* Uses Tx confiruration if ACK is enabled */
;;;298            Mode = PAN216_TX;
;;;299        }
;;;300    
;;;301        if (Mode == PAN216_TX)
        0x000013c6:    2800        .(      CMP      r0,#0
        0x000013c8:    d002        ..      BEQ      0x13d0 ; PAN216_PrepareTRxWithAck + 16
        0x000013ca:    2801        .(      CMP      r0,#1
        0x000013cc:    d006        ..      BEQ      0x13dc ; PAN216_PrepareTRxWithAck + 28
        0x000013ce:    e011        ..      B        0x13f4 ; PAN216_PrepareTRxWithAck + 52
;;;302        {
;;;303            PAN216_WriteReg(0x00, 0x01);
        0x000013d0:    2101        .!      MOVS     r1,#1
        0x000013d2:    2000        .       MOVS     r0,#0
        0x000013d4:    f000fb74    ..t.    BL       PAN216_WriteReg ; 0x1ac0
;;;304            PAN216_WriteReg(0x42, 0xa4);
        0x000013d8:    21a4        .!      MOVS     r1,#0xa4
;;;305            PAN216_WriteReg(0x00, 0x00);
        0x000013da:    e004        ..      B        0x13e6 ; PAN216_PrepareTRxWithAck + 38
;;;306        }
;;;307        else if (Mode == PAN216_RX)
;;;308        {
;;;309            PAN216_WriteReg(0x00, 0x01);
        0x000013dc:    2101        .!      MOVS     r1,#1
        0x000013de:    2000        .       MOVS     r0,#0
        0x000013e0:    f000fb6e    ..n.    BL       PAN216_WriteReg ; 0x1ac0
;;;310            PAN216_WriteReg(0x42, 0xa0);
        0x000013e4:    21a0        .!      MOVS     r1,#0xa0
        0x000013e6:    2042        B       MOVS     r0,#0x42
        0x000013e8:    f000fb6a    ..j.    BL       PAN216_WriteReg ; 0x1ac0
;;;311            PAN216_WriteReg(0x00, 0x00);
        0x000013ec:    2100        .!      MOVS     r1,#0
        0x000013ee:    4608        .F      MOV      r0,r1
        0x000013f0:    f000fb66    ..f.    BL       PAN216_WriteReg ; 0x1ac0
;;;312        }
;;;313    
;;;314        return PAN216_OK;
        0x000013f4:    2000        .       MOVS     r0,#0
;;;315    }
        0x000013f6:    bd10        ..      POP      {r4,pc}
    i.PAN216_Read
    PAN216_Read
;;; ..\..\..\..\radio\pan216_reg.c
;;;35     {
        0x000013f8:    b5f8        ..      PUSH     {r3-r7,lr}
        0x000013fa:    4c0a        .L      LDR      r4,[pc,#40] ; [0x1424] = 0x20000010
;;; ..\..\..\..\radio\pan216_reg.c (35)
        0x000013fc:    4605        .F      MOV      r5,r0
        0x000013fe:    68e0        .h      LDR      r0,[r4,#0xc]
        0x00001400:    4616        .F      MOV      r6,r2
        0x00001402:    460f        .F      MOV      r7,r1
;;;36     #if INTERFACE_MODE == USE_I2C
;;;37         Pan216_Funs.i2c_read_buf(addr, buffer, (uint16_t)len);
;;;38     #else
;;;39         Pan216_Funs.spi_cs_low();
        0x00001404:    4780        .G      BLX      r0
;;;40         Pan216_Funs.spi_writebyte(addr << 1);
        0x00001406:    0668        h.      LSLS     r0,r5,#25
        0x00001408:    6821        !h      LDR      r1,[r4,#0]
        0x0000140a:    0e00        ..      LSRS     r0,r0,#24
        0x0000140c:    4788        .G      BLX      r1
;;;41         for (int i = 0; i < len; i++)
        0x0000140e:    2500        .%      MOVS     r5,#0
        0x00001410:    e003        ..      B        0x141a ; PAN216_Read + 34
        0x00001412:    6860        `h      LDR      r0,[r4,#4]
        0x00001414:    4780        .G      BLX      r0
        0x00001416:    5578        xU      STRB     r0,[r7,r5]
        0x00001418:    1c6d        m.      ADDS     r5,r5,#1
        0x0000141a:    42b5        .B      CMP      r5,r6
        0x0000141c:    dbf9        ..      BLT      0x1412 ; PAN216_Read + 26
;;;42         {
;;;43             buffer[i] = Pan216_Funs.spi_readbyte();
;;;44         }
;;;45         Pan216_Funs.spi_cs_high();
        0x0000141e:    68a0        .h      LDR      r0,[r4,#8]
        0x00001420:    4780        .G      BLX      r0
;;;46     #endif
;;;47     }
        0x00001422:    bdf8        ..      POP      {r3-r7,pc}
    $d
        0x00001424:    20000010    ...     DCD    536870928
    $t
    i.PAN216_ReadFifo
    PAN216_ReadFifo
;;;48     
;;;49     /**
;;;50      * @brief This function writes bytes to the register
;;;51      *
;;;52      * @param[in] addr Register address
;;;53      * @param[in] buffer Buffer provided for data to write to the register
;;;54      * @param[in] len Number of bytes to write
;;;55      * @return PAN216_Err_t
;;;56      */
;;;57     static void PAN216_Write(uint8_t addr, uint8_t *buffer, uint8_t len)
;;;58     {
;;;59     #if (INTERFACE_MODE == USE_I2C)
;;;60         Pan216_Funs.i2c_write_buf(addr, buffer, len);
;;;61     #else
;;;62         Pan216_Funs.spi_cs_low();
;;;63         Pan216_Funs.spi_writebyte(((addr << 1) | 0x01));
;;;64         for (int i = 0; i < len; i++)
;;;65         {
;;;66             Pan216_Funs.spi_writebyte(buffer[i]);
;;;67         }
;;;68         Pan216_Funs.spi_cs_high();
;;;69     #endif
;;;70     }
;;;71     
;;;72     /**************************************************************************/
;;;73     /*                         Basic Register Operation                       */
;;;74     /**************************************************************************/
;;;75     
;;;76     /**
;;;77      * @brief Read one byte from the register in the current page
;;;78      * @param[in] addr Register address to read
;;;79      * @return Value read from the register
;;;80      */
;;;81     uint8_t PAN216_ReadReg(uint8_t addr)
;;;82     {
;;;83         uint8_t tmp;
;;;84     
;;;85         PAN216_Read(addr, &tmp, 1);
;;;86     
;;;87         return tmp;
;;;88     }
;;;89     
;;;90     /**
;;;91      * @brief Write to the global register in the current page and check
;;;92      * @param[in] addr Register address to write
;;;93      * @param[in] value Value to write to the register
;;;94      * @return Result
;;;95      */
;;;96     PAN216_Err_t PAN216_WriteReg(uint8_t addr, uint8_t value)
;;;97     {
;;;98         PAN216_Write(addr, &value, 1);
;;;99     
;;;100    #if SPI_CHECK_WRITE
;;;101        uint8_t tmp;
;;;102        tmp = PAN216_ReadReg(addr);
;;;103        if (tmp != value)
;;;104        {
;;;105            printf("write reg [readback:0x%02x] writeval:0x%02x error \r\n ", tmp, value);
;;;106            return PAN216_ERR;
;;;107        }
;;;108    #endif
;;;109    
;;;110        return PAN216_OK;
;;;111    }
;;;112    
;;;113    /**
;;;114     * @brief Write to the global register in the current page without check
;;;115     * @param[in] addr Register address to write
;;;116     * @param[in] value Value to write to the register
;;;117     * @return Result
;;;118     */
;;;119    PAN216_Err_t PAN216_WriteRegUnchecked(uint8_t addr, uint8_t value)
;;;120    {
;;;121        PAN216_Write(addr, &value, 1);
;;;122        return PAN216_OK;
;;;123    }
;;;124    
;;;125    /**
;;;126     * @brief Write continuous register values (buffer) in a specific address page
;;;127     * @param[in] addr Register start address
;;;128     * @param[in] buffer Values to write
;;;129     * @param[in] len Buffer length
;;;130     * @return Result
;;;131     */
;;;132    PAN216_Err_t PAN216_WriteRegs(uint8_t addr, uint8_t *buffer, uint8_t len)
;;;133    {
;;;134        PAN216_Write(addr, buffer, len);
;;;135        return PAN216_OK;
;;;136    }
;;;137    
;;;138    /**
;;;139     * @brief This function reads more than one byte from the register
;;;140     *
;;;141     * @param addr Register address
;;;142     * @param buffer Buffer provided for data from the register
;;;143     * @param len Number of bytes to read
;;;144     * @return PAN216_Err_t
;;;145     */
;;;146    PAN216_Err_t PAN216_ReadRegs(uint8_t addr, uint8_t *buffer, uint8_t len)
;;;147    {
;;;148        PAN216_Read(addr, buffer, len);
;;;149        return PAN216_OK;
;;;150    }
;;;151    
;;;152    /**
;;;153     * @brief Transfer data to the data FIFO on the chip
;;;154     * @param[in] addr Register address to write
;;;155     * @param[in] buffer Buffer provided for data to write to the register
;;;156     * @param[in] size Number of bytes to write
;;;157     * @return Result
;;;158     */
;;;159    PAN216_Err_t PAN216_WriteFifo(uint8_t addr, uint8_t *buffer, uint8_t size)
;;;160    {
;;;161        return PAN216_WriteRegs(addr, buffer, size);
;;;162    }
;;;163    
;;;164    /**
;;;165     * @brief Read more than one byte from the register
;;;166     * @param[in] addr Register address to read
;;;167     * @param[in] buffer Buffer provided for data from the register
;;;168     * @param[in] size Number of bytes to read
;;;169     * @return Result
;;;170     */
;;;171    PAN216_Err_t PAN216_ReadFifo(uint8_t addr, uint8_t *buffer, uint8_t size)
;;;172    {
        0x00001428:    b510        ..      PUSH     {r4,lr}
;;;173        return PAN216_ReadRegs(addr, buffer, size);
        0x0000142a:    f000f820    .. .    BL       PAN216_ReadRegs ; 0x146e
;;;174    }
        0x0000142e:    bd10        ..      POP      {r4,pc}
    i.PAN216_ReadPageReg
    PAN216_ReadPageReg
;;;175    
;;;176    /**
;;;177     * @brief This function writes bits to the register by mask
;;;178     *
;;;179     * @param addr Register address
;;;180     * @param val Bits value
;;;181     * @param mask Bits mask
;;;182     * @return PAN216_Err_t
;;;183     */
;;;184    PAN216_Err_t PAN216_WriteRegBits(uint8_t addr, uint8_t val, uint8_t mask)
;;;185    {
;;;186        uint8_t tmp;
;;;187        PAN216_Err_t ret;
;;;188        uint8_t shift = GET_SHIFT(mask);
;;;189    
;;;190        val <<= shift;
;;;191        if (val & (~mask))
;;;192        {
;;;193            printf("val:0x%02x mask:0x%02x error \r\n", val, mask);
;;;194            return PAN216_ERR;
;;;195        }
;;;196        val &= mask;
;;;197    
;;;198        tmp = PAN216_ReadReg(addr);
;;;199        ret = PAN216_WriteReg(addr, (tmp & (~mask)) | val);
;;;200    
;;;201        return ret;
;;;202    }
;;;203    
;;;204    /**************************************************************************/
;;;205    /*                         Page Register Operation                        */
;;;206    /**************************************************************************/
;;;207    
;;;208    /**
;;;209     * @brief Switch page
;;;210     * @param[in] page Page to switch
;;;211     * @return Result
;;;212     */
;;;213    PAN216_Err_t PAN216_SetPage(uint8_t page)
;;;214    {
;;;215        if (PAN216_OK != PAN216_WriteReg(PAGE_CFG, page))
;;;216        {
;;;217            return PAN216_ERR;
;;;218        }
;;;219    
;;;220        return PAN216_OK;
;;;221    }
;;;222    
;;;223    /**
;;;224     * @brief This function writes a value to the register in a specific page
;;;225     * @param[in] page The page of the register
;;;226     * @param[in] addr Register address
;;;227     * @param[in] value Value to write
;;;228     * @return Result
;;;229     */
;;;230    PAN216_Err_t PAN216_WritePageReg(uint8_t page, uint8_t addr, uint8_t value)
;;;231    {
;;;232        uint8_t original_page;
;;;233    
;;;234        original_page = PAN216_ReadReg(PAGE_CFG);
;;;235        if (page != original_page)
;;;236        {
;;;237            P_ASSERT(PAN216_SetPage(page));
;;;238        }
;;;239        P_ASSERT(PAN216_WriteReg(addr, value));
;;;240        if (page != original_page)
;;;241        {
;;;242            P_ASSERT(PAN216_SetPage(original_page));
;;;243        }
;;;244    
;;;245        return PAN216_OK;
;;;246    }
;;;247    
;;;248    /**
;;;249     * @brief This function writes a value to the register in a specific page without check
;;;250     *
;;;251     * @param page Register page
;;;252     * @param addr Register address
;;;253     * @param value Register value
;;;254     * @return PAN216_Err_t
;;;255     */
;;;256    PAN216_Err_t PAN216_WritePageRegUnchecked(uint8_t page, uint8_t addr, uint8_t value)
;;;257    {
;;;258        uint8_t original_page;
;;;259    
;;;260        original_page = PAN216_ReadReg(PAGE_CFG);
;;;261        if (page != original_page)
;;;262        {
;;;263            PAN216_SetPage(page);
;;;264        }
;;;265        PAN216_Write(addr, &value, 1);
;;;266        if (page != original_page)
;;;267        {
;;;268            PAN216_SetPage(original_page);
;;;269        }
;;;270    
;;;271        return PAN216_OK;
;;;272    }
;;;273    
;;;274    /**
;;;275     * @brief Read a value from the register in a specific page
;;;276     * @param[in] page The page of the register
;;;277     * @param[in] addr Register address
;;;278     * @return Success (register value) or failure
;;;279     */
;;;280    uint8_t PAN216_ReadPageReg(uint8_t page, uint8_t addr)
;;;281    {
        0x00001430:    b570        p.      PUSH     {r4-r6,lr}
        0x00001432:    4605        .F      MOV      r5,r0
        0x00001434:    460e        .F      MOV      r6,r1
;;;282        uint8_t value;
;;;283        uint8_t original_page;
;;;284    
;;;285        original_page = PAN216_ReadReg(PAGE_CFG);
        0x00001436:    2000        .       MOVS     r0,#0
        0x00001438:    f000f811    ....    BL       PAN216_ReadReg ; 0x145e
        0x0000143c:    4604        .F      MOV      r4,r0
;;;286        if (page != original_page)
        0x0000143e:    42a5        .B      CMP      r5,r4
        0x00001440:    d002        ..      BEQ      0x1448 ; PAN216_ReadPageReg + 24
;;;287        {
;;;288            PAN216_SetPage(page);
        0x00001442:    4628        (F      MOV      r0,r5
        0x00001444:    f000f946    ..F.    BL       PAN216_SetPage ; 0x16d4
;;;289        }
;;;290        value = PAN216_ReadReg(addr);
        0x00001448:    4630        0F      MOV      r0,r6
        0x0000144a:    f000f808    ....    BL       PAN216_ReadReg ; 0x145e
        0x0000144e:    4606        .F      MOV      r6,r0
;;;291        if (page != original_page)
        0x00001450:    42a5        .B      CMP      r5,r4
        0x00001452:    d002        ..      BEQ      0x145a ; PAN216_ReadPageReg + 42
;;;292        {
;;;293            PAN216_SetPage(original_page);
        0x00001454:    4620         F      MOV      r0,r4
        0x00001456:    f000f93d    ..=.    BL       PAN216_SetPage ; 0x16d4
;;;294        }
;;;295    
;;;296        return value;
        0x0000145a:    4630        0F      MOV      r0,r6
;;;297    }
        0x0000145c:    bd70        p.      POP      {r4-r6,pc}
    i.PAN216_ReadReg
    PAN216_ReadReg
        0x0000145e:    b508        ..      PUSH     {r3,lr}
;;; ..\..\..\..\radio\pan216_reg.c (85)
        0x00001460:    2201        ."      MOVS     r2,#1
        0x00001462:    4669        iF      MOV      r1,sp
        0x00001464:    f7ffffc8    ....    BL       PAN216_Read ; 0x13f8
;;;86     
;;;87         return tmp;
        0x00001468:    4668        hF      MOV      r0,sp
        0x0000146a:    7800        .x      LDRB     r0,[r0,#0]
;;;88     }
        0x0000146c:    bd08        ..      POP      {r3,pc}
    i.PAN216_ReadRegs
    PAN216_ReadRegs
;;;89     
;;;90     /**
;;;91      * @brief Write to the global register in the current page and check
;;;92      * @param[in] addr Register address to write
;;;93      * @param[in] value Value to write to the register
;;;94      * @return Result
;;;95      */
;;;96     PAN216_Err_t PAN216_WriteReg(uint8_t addr, uint8_t value)
;;;97     {
;;;98         PAN216_Write(addr, &value, 1);
;;;99     
;;;100    #if SPI_CHECK_WRITE
;;;101        uint8_t tmp;
;;;102        tmp = PAN216_ReadReg(addr);
;;;103        if (tmp != value)
;;;104        {
;;;105            printf("write reg [readback:0x%02x] writeval:0x%02x error \r\n ", tmp, value);
;;;106            return PAN216_ERR;
;;;107        }
;;;108    #endif
;;;109    
;;;110        return PAN216_OK;
;;;111    }
;;;112    
;;;113    /**
;;;114     * @brief Write to the global register in the current page without check
;;;115     * @param[in] addr Register address to write
;;;116     * @param[in] value Value to write to the register
;;;117     * @return Result
;;;118     */
;;;119    PAN216_Err_t PAN216_WriteRegUnchecked(uint8_t addr, uint8_t value)
;;;120    {
;;;121        PAN216_Write(addr, &value, 1);
;;;122        return PAN216_OK;
;;;123    }
;;;124    
;;;125    /**
;;;126     * @brief Write continuous register values (buffer) in a specific address page
;;;127     * @param[in] addr Register start address
;;;128     * @param[in] buffer Values to write
;;;129     * @param[in] len Buffer length
;;;130     * @return Result
;;;131     */
;;;132    PAN216_Err_t PAN216_WriteRegs(uint8_t addr, uint8_t *buffer, uint8_t len)
;;;133    {
;;;134        PAN216_Write(addr, buffer, len);
;;;135        return PAN216_OK;
;;;136    }
;;;137    
;;;138    /**
;;;139     * @brief This function reads more than one byte from the register
;;;140     *
;;;141     * @param addr Register address
;;;142     * @param buffer Buffer provided for data from the register
;;;143     * @param len Number of bytes to read
;;;144     * @return PAN216_Err_t
;;;145     */
;;;146    PAN216_Err_t PAN216_ReadRegs(uint8_t addr, uint8_t *buffer, uint8_t len)
;;;147    {
        0x0000146e:    b510        ..      PUSH     {r4,lr}
;;;148        PAN216_Read(addr, buffer, len);
        0x00001470:    f7ffffc2    ....    BL       PAN216_Read ; 0x13f8
;;;149        return PAN216_OK;
        0x00001474:    2000        .       MOVS     r0,#0
;;;150    }
        0x00001476:    bd10        ..      POP      {r4,pc}
    i.PAN216_ResetRegBits
    PAN216_ResetRegBits
;;;151    
;;;152    /**
;;;153     * @brief Transfer data to the data FIFO on the chip
;;;154     * @param[in] addr Register address to write
;;;155     * @param[in] buffer Buffer provided for data to write to the register
;;;156     * @param[in] size Number of bytes to write
;;;157     * @return Result
;;;158     */
;;;159    PAN216_Err_t PAN216_WriteFifo(uint8_t addr, uint8_t *buffer, uint8_t size)
;;;160    {
;;;161        return PAN216_WriteRegs(addr, buffer, size);
;;;162    }
;;;163    
;;;164    /**
;;;165     * @brief Read more than one byte from the register
;;;166     * @param[in] addr Register address to read
;;;167     * @param[in] buffer Buffer provided for data from the register
;;;168     * @param[in] size Number of bytes to read
;;;169     * @return Result
;;;170     */
;;;171    PAN216_Err_t PAN216_ReadFifo(uint8_t addr, uint8_t *buffer, uint8_t size)
;;;172    {
;;;173        return PAN216_ReadRegs(addr, buffer, size);
;;;174    }
;;;175    
;;;176    /**
;;;177     * @brief This function writes bits to the register by mask
;;;178     *
;;;179     * @param addr Register address
;;;180     * @param val Bits value
;;;181     * @param mask Bits mask
;;;182     * @return PAN216_Err_t
;;;183     */
;;;184    PAN216_Err_t PAN216_WriteRegBits(uint8_t addr, uint8_t val, uint8_t mask)
;;;185    {
;;;186        uint8_t tmp;
;;;187        PAN216_Err_t ret;
;;;188        uint8_t shift = GET_SHIFT(mask);
;;;189    
;;;190        val <<= shift;
;;;191        if (val & (~mask))
;;;192        {
;;;193            printf("val:0x%02x mask:0x%02x error \r\n", val, mask);
;;;194            return PAN216_ERR;
;;;195        }
;;;196        val &= mask;
;;;197    
;;;198        tmp = PAN216_ReadReg(addr);
;;;199        ret = PAN216_WriteReg(addr, (tmp & (~mask)) | val);
;;;200    
;;;201        return ret;
;;;202    }
;;;203    
;;;204    /**************************************************************************/
;;;205    /*                         Page Register Operation                        */
;;;206    /**************************************************************************/
;;;207    
;;;208    /**
;;;209     * @brief Switch page
;;;210     * @param[in] page Page to switch
;;;211     * @return Result
;;;212     */
;;;213    PAN216_Err_t PAN216_SetPage(uint8_t page)
;;;214    {
;;;215        if (PAN216_OK != PAN216_WriteReg(PAGE_CFG, page))
;;;216        {
;;;217            return PAN216_ERR;
;;;218        }
;;;219    
;;;220        return PAN216_OK;
;;;221    }
;;;222    
;;;223    /**
;;;224     * @brief This function writes a value to the register in a specific page
;;;225     * @param[in] page The page of the register
;;;226     * @param[in] addr Register address
;;;227     * @param[in] value Value to write
;;;228     * @return Result
;;;229     */
;;;230    PAN216_Err_t PAN216_WritePageReg(uint8_t page, uint8_t addr, uint8_t value)
;;;231    {
;;;232        uint8_t original_page;
;;;233    
;;;234        original_page = PAN216_ReadReg(PAGE_CFG);
;;;235        if (page != original_page)
;;;236        {
;;;237            P_ASSERT(PAN216_SetPage(page));
;;;238        }
;;;239        P_ASSERT(PAN216_WriteReg(addr, value));
;;;240        if (page != original_page)
;;;241        {
;;;242            P_ASSERT(PAN216_SetPage(original_page));
;;;243        }
;;;244    
;;;245        return PAN216_OK;
;;;246    }
;;;247    
;;;248    /**
;;;249     * @brief This function writes a value to the register in a specific page without check
;;;250     *
;;;251     * @param page Register page
;;;252     * @param addr Register address
;;;253     * @param value Register value
;;;254     * @return PAN216_Err_t
;;;255     */
;;;256    PAN216_Err_t PAN216_WritePageRegUnchecked(uint8_t page, uint8_t addr, uint8_t value)
;;;257    {
;;;258        uint8_t original_page;
;;;259    
;;;260        original_page = PAN216_ReadReg(PAGE_CFG);
;;;261        if (page != original_page)
;;;262        {
;;;263            PAN216_SetPage(page);
;;;264        }
;;;265        PAN216_Write(addr, &value, 1);
;;;266        if (page != original_page)
;;;267        {
;;;268            PAN216_SetPage(original_page);
;;;269        }
;;;270    
;;;271        return PAN216_OK;
;;;272    }
;;;273    
;;;274    /**
;;;275     * @brief Read a value from the register in a specific page
;;;276     * @param[in] page The page of the register
;;;277     * @param[in] addr Register address
;;;278     * @return Success (register value) or failure
;;;279     */
;;;280    uint8_t PAN216_ReadPageReg(uint8_t page, uint8_t addr)
;;;281    {
;;;282        uint8_t value;
;;;283        uint8_t original_page;
;;;284    
;;;285        original_page = PAN216_ReadReg(PAGE_CFG);
;;;286        if (page != original_page)
;;;287        {
;;;288            PAN216_SetPage(page);
;;;289        }
;;;290        value = PAN216_ReadReg(addr);
;;;291        if (page != original_page)
;;;292        {
;;;293            PAN216_SetPage(original_page);
;;;294        }
;;;295    
;;;296        return value;
;;;297    }
;;;298    
;;;299    /**
;;;300     * @brief Write continuous register values (buffer) in a specific address page
;;;301     * @param[in] page The page of the register
;;;302     * @param[in] addr Register start address
;;;303     * @param[in] buffer Values to write
;;;304     * @param[in] len Buffer length
;;;305     * @return Result
;;;306     */
;;;307    PAN216_Err_t PAN216_WritePageRegs(uint8_t page, uint8_t addr, uint8_t *buffer, uint8_t len)
;;;308    {
;;;309        uint8_t original_page;
;;;310    
;;;311        original_page = PAN216_ReadReg(PAGE_CFG);
;;;312        if (page != original_page)
;;;313        {
;;;314            PAN216_SetPage(page);
;;;315        }
;;;316        PAN216_WriteRegs(addr, buffer, len);
;;;317        if (page != original_page)
;;;318        {
;;;319            PAN216_SetPage(original_page);
;;;320        }
;;;321    
;;;322        return PAN216_OK;
;;;323    }
;;;324    
;;;325    /**
;;;326     * @brief This function reads more than one byte from the register
;;;327     *
;;;328     * @param page Page of the register
;;;329     * @param addr Register address
;;;330     * @param buffer Buffer provided for data from the register
;;;331     * @param len Number of bytes to read
;;;332     * @return PAN216_Err_t
;;;333     */
;;;334    PAN216_Err_t PAN216_ReadPageRegs(uint8_t page, uint8_t addr, uint8_t *buffer, uint8_t len)
;;;335    {
;;;336        uint8_t original_page;
;;;337    
;;;338        original_page = PAN216_ReadReg(PAGE_CFG);
;;;339        if (page != original_page)
;;;340        {
;;;341            PAN216_SetPage(page);
;;;342        }
;;;343        PAN216_Read(addr, buffer, len);
;;;344        if (page != original_page)
;;;345        {
;;;346            PAN216_SetPage(original_page);
;;;347        }
;;;348    
;;;349        return PAN216_OK;
;;;350    }
;;;351    
;;;352    /**************************************************************************/
;;;353    /*                         Register Bit Operation                         */
;;;354    /**************************************************************************/
;;;355    /**
;;;356     * @brief Write bits to the register by mask
;;;357     * @param page Page of the register
;;;358     * @param addr Register address
;;;359     * @param mask Bits mask
;;;360     * @param value Bits value
;;;361     * @return PAN216_Err_t
;;;362     */
;;;363    PAN216_Err_t PAN216_WriteRegWithMask(uint8_t page, uint8_t addr, uint8_t mask, uint8_t value)
;;;364    {
;;;365        uint8_t tmp;
;;;366        PAN216_Err_t ret;
;;;367    
;;;368        value &= mask;
;;;369        tmp = PAN216_ReadPageReg(page, addr);
;;;370        ret = PAN216_WritePageReg(page, addr, (tmp & (~mask)) | value);
;;;371    
;;;372        return ret;
;;;373    }
;;;374    
;;;375    /**
;;;376     * @brief This function reads the register value with mask
;;;377     *
;;;378     * @param page Register page
;;;379     * @param addr Register address
;;;380     * @param mask Bits mask
;;;381     * @return uint8_t
;;;382     */
;;;383    uint8_t PAN216_ReadRegWithMask(uint8_t page, uint8_t addr, uint8_t mask)
;;;384    {
;;;385        uint8_t tmp;
;;;386    
;;;387        tmp = PAN216_ReadPageReg(page, addr);
;;;388    
;;;389        return tmp & mask;
;;;390    }
;;;391    
;;;392    /**
;;;393     * @brief Set bits to 1
;;;394     *
;;;395     * @param page Page of the register
;;;396     * @param addr Register address
;;;397     * @param mask Bits mask
;;;398     * @return PAN216_Err_t
;;;399     */
;;;400    PAN216_Err_t PAN216_SetRegBits(uint8_t page, uint8_t addr, uint8_t mask)
;;;401    {
;;;402        uint8_t tmp;
;;;403        PAN216_Err_t ret;
;;;404    
;;;405        tmp = PAN216_ReadPageReg(page, addr);
;;;406        ret = PAN216_WritePageReg(page, addr, tmp | mask);
;;;407    
;;;408        return ret;
;;;409    }
;;;410    
;;;411    /**
;;;412     * @brief Set bits to 0
;;;413     *
;;;414     * @param page Page of the register
;;;415     * @param addr Register address
;;;416     * @param mask Bits mask
;;;417     * @return PAN216_Err_t
;;;418     */
;;;419    PAN216_Err_t PAN216_ResetRegBits(uint8_t page, uint8_t addr, uint8_t mask)
;;;420    {
        0x00001478:    b570        p.      PUSH     {r4-r6,lr}
        0x0000147a:    4614        .F      MOV      r4,r2
        0x0000147c:    460d        .F      MOV      r5,r1
        0x0000147e:    4606        .F      MOV      r6,r0
;;;421        uint8_t tmp;
;;;422        PAN216_Err_t ret;
;;;423    
;;;424        tmp = PAN216_ReadPageReg(page, addr);
        0x00001480:    f7ffffd6    ....    BL       PAN216_ReadPageReg ; 0x1430
;;;425        ret = PAN216_WritePageReg(page, addr, tmp & (~mask));
        0x00001484:    43a0        .C      BICS     r0,r0,r4
        0x00001486:    4602        .F      MOV      r2,r0
        0x00001488:    4629        )F      MOV      r1,r5
        0x0000148a:    4630        0F      MOV      r0,r6
        0x0000148c:    f000fac6    ....    BL       PAN216_WritePageReg ; 0x1a1c
;;;426    
;;;427        return ret;
;;;428    }
        0x00001490:    bd70        p.      POP      {r4-r6,pc}
    i.PAN216_RxLengthLimit
    PAN216_RxLengthLimit
;;; ..\..\..\..\radio\pan216_ext.c
;;;877    {
        0x00001492:    b510        ..      PUSH     {r4,lr}
        0x00001494:    2800        .(      CMP      r0,#0
        0x00001496:    d005        ..      BEQ      0x14a4 ; PAN216_RxLengthLimit + 18
;;;878        if (NewState)
;;;879        {
;;;880            return PAN216_SetRegBits(PAN216_PAGE0, PKT_EXT_CFG, PKT_EXT_CFG_W_RX_MAX_CTRL_EN);
        0x00001498:    2280        ."      MOVS     r2,#0x80
        0x0000149a:    2119        .!      MOVS     r1,#0x19
        0x0000149c:    2000        .       MOVS     r0,#0
        0x0000149e:    f000f922    ..".    BL       PAN216_SetRegBits ; 0x16e6
        0x000014a2:    bd10        ..      POP      {r4,pc}
;;;881        }
;;;882        else
;;;883        {
;;;884            return PAN216_ResetRegBits(PAN216_PAGE0, PKT_EXT_CFG, PKT_EXT_CFG_W_RX_MAX_CTRL_EN);
        0x000014a4:    2280        ."      MOVS     r2,#0x80
        0x000014a6:    2119        .!      MOVS     r1,#0x19
        0x000014a8:    2000        .       MOVS     r0,#0
        0x000014aa:    f7ffffe5    ....    BL       PAN216_ResetRegBits ; 0x1478
;;;885        }
;;;886    }
        0x000014ae:    bd10        ..      POP      {r4,pc}
    i.PAN216_RxStart
    PAN216_RxStart
;;; ..\..\..\..\radio\pan216.c
;;;339    {
        0x000014b0:    b510        ..      PUSH     {r4,lr}
;;;340        P_ASSERT(PAN216_WriteReg(0x02, 0x74));
        0x000014b2:    2174        t!      MOVS     r1,#0x74
        0x000014b4:    2002        .       MOVS     r0,#2
        0x000014b6:    f000fb03    ....    BL       PAN216_WriteReg ; 0x1ac0
        0x000014ba:    2800        .(      CMP      r0,#0
        0x000014bc:    d105        ..      BNE      0x14ca ; PAN216_RxStart + 26
;;;341        P_ASSERT(PAN216_WriteReg(0x02, 0x76));
        0x000014be:    2176        v!      MOVS     r1,#0x76
        0x000014c0:    2002        .       MOVS     r0,#2
        0x000014c2:    f000fafd    ....    BL       PAN216_WriteReg ; 0x1ac0
        0x000014c6:    2800        .(      CMP      r0,#0
        0x000014c8:    d000        ..      BEQ      0x14cc ; PAN216_RxStart + 28
        0x000014ca:    2001        .       MOVS     r0,#1
;;;342    
;;;343        return PAN216_OK;
;;;344    }
        0x000014cc:    bd10        ..      POP      {r4,pc}
    i.PAN216_SetAddrWidth
    PAN216_SetAddrWidth
;;;345    
;;;346    /**
;;;347     * @brief Sets the frequency channel of the PAN216 transceiver
;;;348     *
;;;349     * @param Channel The desired radio frequency channel, as a value from 0 to 83
;;;350     *
;;;351     * @note The actual frequency will be (2400 + Channel)MHz
;;;352     * @note The PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
;;;353     *
;;;354     * @return uint8_t Result of the operation
;;;355     *         - PAN216_OK
;;;356     *         - PAN216_ERR
;;;357     */
;;;358    PAN216_Err_t PAN216_SetChannel(uint8_t Channel)
;;;359    {
;;;360        return PAN216_WriteReg(REG_P0_0X39, Channel);
;;;361    }
;;;362    
;;;363    /**
;;;364     * @brief Sets the address width of the PAN216 transceiver
;;;365     *
;;;366     * This function is used to set the RX/TX address field width of the PAN216 transceiver.
;;;367     * The address width is specified as a value between 3 and 5.
;;;368     *
;;;369     * @param AddrWidth The desired address width, as a value from 3 to 5
;;;370     *          - 00 2bytes
;;;371     *          - 01 3bytes
;;;372     *          - 10 4bytes
;;;373     *          - 11 5bytes
;;;374     * @return uint8_t Result of the operation
;;;375     *         - PAN216_OK
;;;376     *         - PAN216_ERR
;;;377     */
;;;378    PAN216_Err_t PAN216_SetAddrWidth(PAN216_AddrWidth_t AddrWidth)
;;;379    {
        0x000014ce:    1e80        ..      SUBS     r0,r0,#2
        0x000014d0:    b510        ..      PUSH     {r4,lr}
;;;380        P_ASSERT(PAN216_WriteRegBits(WMODE_CFG1, AddrWidth - 2, WMODE_CFG1_ADDR_BYTE_LENGTH));
        0x000014d2:    b2c1        ..      UXTB     r1,r0
        0x000014d4:    2203        ."      MOVS     r2,#3
        0x000014d6:    2008        .       MOVS     r0,#8
        0x000014d8:    f000fb24    ..$.    BL       PAN216_WriteRegBits ; 0x1b24
        0x000014dc:    2800        .(      CMP      r0,#0
        0x000014de:    d000        ..      BEQ      0x14e2 ; PAN216_SetAddrWidth + 20
        0x000014e0:    2001        .       MOVS     r0,#1
;;;381    
;;;382        return PAN216_OK;
;;;383    }
        0x000014e2:    bd10        ..      POP      {r4,pc}
    i.PAN216_SetAutoRetrans
    PAN216_SetAutoRetrans
;;; ..\..\..\..\radio\pan216_ext.c
;;;860    {
        0x000014e4:    b510        ..      PUSH     {r4,lr}
        0x000014e6:    460c        .F      MOV      r4,r1
        0x000014e8:    28fa        .(      CMP      r0,#0xfa
;;; ..\..\..\..\radio\pan216_ext.c (860)
        0x000014ea:    d200        ..      BCS      0x14ee ; PAN216_SetAutoRetrans + 10
;;;861        if (DelayUs < 250)
;;;862        {
;;;863            DelayUs = 250;
        0x000014ec:    20fa        .       MOVS     r0,#0xfa
;;;864        }
;;;865    
;;;866        DelayUs /= 250;
        0x000014ee:    21fa        .!      MOVS     r1,#0xfa
        0x000014f0:    f7fefe0e    ....    BL       __aeabi_uidiv ; 0x110
        0x000014f4:    1e40        @.      SUBS     r0,r0,#1
;;;867        DelayUs--;
;;;868    
;;;869        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TXAUTO_CFG, (uint8_t)DelayUs, TXAUTO_CFG_ARD));
        0x000014f6:    b2c2        ..      UXTB     r2,r0
        0x000014f8:    23f0        .#      MOVS     r3,#0xf0
        0x000014fa:    2129        )!      MOVS     r1,#0x29
        0x000014fc:    2000        .       MOVS     r0,#0
        0x000014fe:    f000faad    ....    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x00001502:    2800        .(      CMP      r0,#0
        0x00001504:    d106        ..      BNE      0x1514 ; PAN216_SetAutoRetrans + 48
;;;870        P_ASSERT(
        0x00001506:    230f        .#      MOVS     r3,#0xf
        0x00001508:    4622        "F      MOV      r2,r4
        0x0000150a:    2129        )!      MOVS     r1,#0x29
        0x0000150c:    f000faa6    ....    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x00001510:    2800        .(      CMP      r0,#0
        0x00001512:    d000        ..      BEQ      0x1516 ; PAN216_SetAutoRetrans + 50
        0x00001514:    2001        .       MOVS     r0,#1
;;;871            PAN216_WritePageRegBits(PAN216_PAGE0, TXAUTO_CFG, (uint8_t)MaxCnt, TXAUTO_CFG_ARC_3_0));
;;;872    
;;;873        return PAN216_OK;
;;;874    }
        0x00001516:    bd10        ..      POP      {r4,pc}
    i.PAN216_SetChannel
    PAN216_SetChannel
;;; ..\..\..\..\radio\pan216.c
;;;359    {
        0x00001518:    b510        ..      PUSH     {r4,lr}
;;;360        return PAN216_WriteReg(REG_P0_0X39, Channel);
        0x0000151a:    4601        .F      MOV      r1,r0
        0x0000151c:    2039        9       MOVS     r0,#0x39
        0x0000151e:    f000facf    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;361    }
        0x00001522:    bd10        ..      POP      {r4,pc}
    i.PAN216_SetChipMode
    PAN216_SetChipMode
;;; ..\..\..\..\radio\pan216_ext.c
;;;1070   {
        0x00001524:    b570        p.      PUSH     {r4-r6,lr}
        0x00001526:    460d        .F      MOV      r5,r1
        0x00001528:    4941        AI      LDR      r1,[pc,#260] ; [0x1630] = 0x20000028
;;; ..\..\..\..\radio\pan216_ext.c (1070)
        0x0000152a:    4614        .F      MOV      r4,r2
        0x0000152c:    7008        .p      STRB     r0,[r1,#0]
        0x0000152e:    2800        .(      CMP      r0,#0
        0x00001530:    d006        ..      BEQ      0x1540 ; PAN216_SetChipMode + 28
;;;1071       _gChipMode = chipMode;
;;;1072   
;;;1073       switch (chipMode)
        0x00001532:    2801        .(      CMP      r0,#1
        0x00001534:    d016        ..      BEQ      0x1564 ; PAN216_SetChipMode + 64
        0x00001536:    2802        .(      CMP      r0,#2
        0x00001538:    d02d        -.      BEQ      0x1596 ; PAN216_SetChipMode + 114
        0x0000153a:    2803        .(      CMP      r0,#3
        0x0000153c:    d175        u.      BNE      0x162a ; PAN216_SetChipMode + 262
        0x0000153e:    e050        P.      B        0x15e2 ; PAN216_SetChipMode + 190
;;;1074       {
;;;1075       case PAN216_CHIPMODE_XN297:
;;;1076           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, 0, WMODE_CFG0_CHIP_MODE));
        0x00001540:    2320         #      MOVS     r3,#0x20
        0x00001542:    2200        ."      MOVS     r2,#0
        0x00001544:    2107        .!      MOVS     r1,#7
        0x00001546:    e020         .      B        0x158a ; PAN216_SetChipMode + 102
;;;1077           P_ASSERT(PAN216_SetEndian(PAN216_ENDIAN_BIG));
        0x00001548:    2001        .       MOVS     r0,#1
        0x0000154a:    f000f8ad    ....    BL       PAN216_SetEndian ; 0x16a8
        0x0000154e:    2800        .(      CMP      r0,#0
        0x00001550:    d16b        k.      BNE      0x162a ; PAN216_SetChipMode + 262
;;;1078           P_ASSERT(PAN216_CrcSkipAddr(false));
        0x00001552:    f7fffcce    ....    BL       PAN216_CrcSkipAddr ; 0xef2
        0x00001556:    2800        .(      CMP      r0,#0
        0x00001558:    d167        g.      BNE      0x162a ; PAN216_SetChipMode + 262
;;;1079           P_ASSERT(PAN216_WhiteSkipAddr(false));
        0x0000155a:    e03d        =.      B        0x15d8 ; PAN216_SetChipMode + 180
;;;1080           P_ASSERT(PAN216_SetWhiteInitVal(0x7F));
        0x0000155c:    207f        .       MOVS     r0,#0x7f
        0x0000155e:    f000fa14    ....    BL       PAN216_SetWhiteInitVal ; 0x198a
        0x00001562:    e059        Y.      B        0x1618 ; PAN216_SetChipMode + 244
;;;1081           break;
;;;1082   
;;;1083   case PAN216_CHIPMODE_FS01:
;;;1084           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, 1, WMODE_CFG0_CHIP_MODE));
        0x00001564:    2320         #      MOVS     r3,#0x20
        0x00001566:    2201        ."      MOVS     r2,#1
        0x00001568:    2107        .!      MOVS     r1,#7
        0x0000156a:    2000        .       MOVS     r0,#0
        0x0000156c:    f000fa76    ..v.    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x00001570:    2800        .(      CMP      r0,#0
        0x00001572:    d15a        Z.      BNE      0x162a ; PAN216_SetChipMode + 262
;;;1085           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, 0, WMODE_CFG0_NORDIC_ENHANCE));
        0x00001574:    2200        ."      MOVS     r2,#0
        0x00001576:    2310        .#      MOVS     r3,#0x10
        0x00001578:    2107        .!      MOVS     r1,#7
        0x0000157a:    4610        .F      MOV      r0,r2
        0x0000157c:    f000fa6e    ..n.    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x00001580:    2800        .(      CMP      r0,#0
        0x00001582:    d152        R.      BNE      0x162a ; PAN216_SetChipMode + 262
;;;1086           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, REG_P0_0X6F, 0, REG_P0_0X6F_I_NDC_PREAMBLE_SEL)); 
        0x00001584:    2320         #      MOVS     r3,#0x20
        0x00001586:    2200        ."      MOVS     r2,#0
        0x00001588:    216f        o!      MOVS     r1,#0x6f
        0x0000158a:    2000        .       MOVS     r0,#0
        0x0000158c:    f000fa66    ..f.    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x00001590:    2800        .(      CMP      r0,#0
        0x00001592:    d14a        J.      BNE      0x162a ; PAN216_SetChipMode + 262
        0x00001594:    e7d8        ..      B        0x1548 ; PAN216_SetChipMode + 36
;;;1087           P_ASSERT(PAN216_SetEndian(PAN216_ENDIAN_BIG));
;;;1088           P_ASSERT(PAN216_CrcSkipAddr(false));
;;;1089           P_ASSERT(PAN216_WhiteSkipAddr(false));
;;;1090           P_ASSERT(PAN216_SetWhiteInitVal(0x7F));
;;;1091           break;
;;;1092   
;;;1093       case PAN216_CHIPMODE_FS32:
;;;1094           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, 1, WMODE_CFG0_CHIP_MODE));
        0x00001596:    2320         #      MOVS     r3,#0x20
        0x00001598:    2201        ."      MOVS     r2,#1
        0x0000159a:    2107        .!      MOVS     r1,#7
        0x0000159c:    2000        .       MOVS     r0,#0
        0x0000159e:    f000fa5d    ..].    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x000015a2:    2800        .(      CMP      r0,#0
        0x000015a4:    d141        A.      BNE      0x162a ; PAN216_SetChipMode + 262
;;;1095           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, 1, WMODE_CFG0_NORDIC_ENHANCE));
        0x000015a6:    2310        .#      MOVS     r3,#0x10
        0x000015a8:    2201        ."      MOVS     r2,#1
        0x000015aa:    2107        .!      MOVS     r1,#7
        0x000015ac:    f000fa56    ..V.    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x000015b0:    2800        .(      CMP      r0,#0
        0x000015b2:    d13a        :.      BNE      0x162a ; PAN216_SetChipMode + 262
;;;1096           P_ASSERT(PAN216_WritePageRegBits(
        0x000015b4:    2320         #      MOVS     r3,#0x20
        0x000015b6:    2201        ."      MOVS     r2,#1
        0x000015b8:    216f        o!      MOVS     r1,#0x6f
        0x000015ba:    f000fa4f    ..O.    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x000015be:    2800        .(      CMP      r0,#0
        0x000015c0:    d133        3.      BNE      0x162a ; PAN216_SetChipMode + 262
;;;1097               PAN216_PAGE0, REG_P0_0X6F, 1,
;;;1098               REG_P0_0X6F_I_NDC_PREAMBLE_SEL));
;;;1099           P_ASSERT(PAN216_SetEndian(endian));
        0x000015c2:    4628        (F      MOV      r0,r5
        0x000015c4:    f000f870    ..p.    BL       PAN216_SetEndian ; 0x16a8
        0x000015c8:    2800        .(      CMP      r0,#0
        0x000015ca:    d12e        ..      BNE      0x162a ; PAN216_SetChipMode + 262
;;;1100           P_ASSERT(PAN216_CrcSkipAddr(crcSkipAddr));
        0x000015cc:    4620         F      MOV      r0,r4
        0x000015ce:    f7fffc90    ....    BL       PAN216_CrcSkipAddr ; 0xef2
        0x000015d2:    2800        .(      CMP      r0,#0
        0x000015d4:    d129        ).      BNE      0x162a ; PAN216_SetChipMode + 262
;;;1101           P_ASSERT(PAN216_WhiteSkipAddr(true));
        0x000015d6:    2001        .       MOVS     r0,#1
        0x000015d8:    f000f9f6    ....    BL       PAN216_WhiteSkipAddr ; 0x19c8
        0x000015dc:    2800        .(      CMP      r0,#0
        0x000015de:    d124        $.      BNE      0x162a ; PAN216_SetChipMode + 262
        0x000015e0:    e7bc        ..      B        0x155c ; PAN216_SetChipMode + 56
;;;1102           P_ASSERT(PAN216_SetWhiteInitVal(0x7F));
;;;1103           break;
;;;1104       case PAN216_CHIPMODE_BLE:
;;;1105           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, 1, WMODE_CFG0_CHIP_MODE));
        0x000015e2:    2320         #      MOVS     r3,#0x20
        0x000015e4:    2201        ."      MOVS     r2,#1
        0x000015e6:    2107        .!      MOVS     r1,#7
        0x000015e8:    2000        .       MOVS     r0,#0
        0x000015ea:    f000fa37    ..7.    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x000015ee:    2800        .(      CMP      r0,#0
        0x000015f0:    d11b        ..      BNE      0x162a ; PAN216_SetChipMode + 262
;;;1106           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, 1,
        0x000015f2:    2310        .#      MOVS     r3,#0x10
        0x000015f4:    2201        ."      MOVS     r2,#1
        0x000015f6:    2107        .!      MOVS     r1,#7
        0x000015f8:    f000fa30    ..0.    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x000015fc:    2800        .(      CMP      r0,#0
        0x000015fe:    d114        ..      BNE      0x162a ; PAN216_SetChipMode + 262
;;;1107                                            WMODE_CFG0_NORDIC_ENHANCE));
;;;1108           P_ASSERT(PAN216_SetEndian(PAN216_ENDIAN_LITTLE));
        0x00001600:    f000f852    ..R.    BL       PAN216_SetEndian ; 0x16a8
        0x00001604:    2800        .(      CMP      r0,#0
        0x00001606:    d110        ..      BNE      0x162a ; PAN216_SetChipMode + 262
;;;1109           P_ASSERT(PAN216_CrcSkipAddr(true));
        0x00001608:    2001        .       MOVS     r0,#1
        0x0000160a:    f7fffc72    ..r.    BL       PAN216_CrcSkipAddr ; 0xef2
        0x0000160e:    2800        .(      CMP      r0,#0
        0x00001610:    d10b        ..      BNE      0x162a ; PAN216_SetChipMode + 262
;;;1110           P_ASSERT(PAN216_WhiteSkipAddr(true));
        0x00001612:    2001        .       MOVS     r0,#1
        0x00001614:    f000f9d8    ....    BL       PAN216_WhiteSkipAddr ; 0x19c8
        0x00001618:    2800        .(      CMP      r0,#0
        0x0000161a:    d106        ..      BNE      0x162a ; PAN216_SetChipMode + 262
;;;1111   
;;;1112           break;
;;;1113       default:
;;;1114           return PAN216_ERR;
;;;1115       }
;;;1116   
;;;1117       // when recv error occurs, the chip will enter rx mode automatically
;;;1118       P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG1, 1, WMODE_CFG1_RX_GOON));
        0x0000161c:    2380        .#      MOVS     r3,#0x80
        0x0000161e:    2201        ."      MOVS     r2,#1
        0x00001620:    2108        .!      MOVS     r1,#8
        0x00001622:    f000fa1b    ....    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x00001626:    2800        .(      CMP      r0,#0
        0x00001628:    d000        ..      BEQ      0x162c ; PAN216_SetChipMode + 264
        0x0000162a:    2001        .       MOVS     r0,#1
;;;1119   
;;;1120       return PAN216_OK;
;;;1121   }
        0x0000162c:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x0000162e:    0000        ..      DCW    0
        0x00001630:    20000028    (..     DCD    536870952
    $t
    i.PAN216_SetCrcScheme
    PAN216_SetCrcScheme
;;; ..\..\..\..\radio\pan216_ext.c (443)
        0x00001634:    b510        ..      PUSH     {r4,lr}
        0x00001636:    2803        .(      CMP      r0,#3
;;; ..\..\..\..\radio\pan216_ext.c (443)
        0x00001638:    d807        ..      BHI      0x164a ; PAN216_SetCrcScheme + 22
;;;444        if (Crc > PAN216_CRC_3byte)
;;;445        {
;;;446            return PAN216_ERR;
;;;447        }
;;;448    
;;;449        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, Crc, WMODE_CFG0_CRC_MODE_1_0));
        0x0000163a:    4602        .F      MOV      r2,r0
        0x0000163c:    23c0        .#      MOVS     r3,#0xc0
        0x0000163e:    2107        .!      MOVS     r1,#7
        0x00001640:    2000        .       MOVS     r0,#0
        0x00001642:    f000fa0b    ....    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x00001646:    2800        .(      CMP      r0,#0
        0x00001648:    d000        ..      BEQ      0x164c ; PAN216_SetCrcScheme + 24
        0x0000164a:    2001        .       MOVS     r0,#1
;;;450    
;;;451        return PAN216_OK;
;;;452    }
        0x0000164c:    bd10        ..      POP      {r4,pc}
        0x0000164e:    0000        ..      MOVS     r0,r0
    i.PAN216_SetDataRate
    PAN216_SetDataRate
;;;453    
;;;454    /**
;;;455     * @brief Configures the data rate of the PAN216 transceiver
;;;456     *
;;;457     * This function is used to configure the data rate of the PAN216 transceiver. The
;;;458     * data rate is specified as one of the members of PAN216_DataRate_t.
;;;459     *
;;;460     * @param DataRate The desired data rate, as one of the members of PAN216_DataRate_t
;;;461     *
;;;462     * @return uint8_t Result of the operation
;;;463     *         - PAN216_OK
;;;464     *         - PAN216_ERR
;;;465     */
;;;466    PAN216_Err_t PAN216_SetDataRate(PAN216_DataRate_t DataRate)
;;;467    {
        0x00001650:    b510        ..      PUSH     {r4,lr}
        0x00001652:    2803        .(      CMP      r0,#3
;;; ..\..\..\..\radio\pan216_ext.c (467)
        0x00001654:    d214        ..      BCS      0x1680 ; PAN216_SetDataRate + 48
        0x00001656:    4913        .I      LDR      r1,[pc,#76] ; [0x16a4] = 0x20000028
;;;468        uint8_t DataRateVal;
;;;469    
;;;470        if (DataRate >= PAN216_DR_Max)
;;;471        {
;;;472            return PAN216_ERR;
;;;473        }
;;;474    
;;;475        switch (DataRate)
        0x00001658:    2800        .(      CMP      r0,#0
        0x0000165a:    d004        ..      BEQ      0x1666 ; PAN216_SetDataRate + 22
        0x0000165c:    2801        .(      CMP      r0,#1
        0x0000165e:    d005        ..      BEQ      0x166c ; PAN216_SetDataRate + 28
        0x00001660:    2802        .(      CMP      r0,#2
        0x00001662:    d10d        ..      BNE      0x1680 ; PAN216_SetDataRate + 48
        0x00001664:    e00e        ..      B        0x1684 ; PAN216_SetDataRate + 52
;;;476        {
;;;477        case PAN216_DR_1Mbps:
;;;478            DataRateVal = 0x00;
        0x00001666:    2200        ."      MOVS     r2,#0
;;;479            _gDataRate = PAN216_DR_1Mbps;
        0x00001668:    4610        .F      MOV      r0,r2
;;;480            break;
        0x0000166a:    e001        ..      B        0x1670 ; PAN216_SetDataRate + 32
;;;481        case PAN216_DR_2Mbps:
;;;482            DataRateVal = 0x01;
        0x0000166c:    2201        ."      MOVS     r2,#1
;;;483            _gDataRate = PAN216_DR_2Mbps;
        0x0000166e:    4610        .F      MOV      r0,r2
        0x00001670:    7048        Hp      STRB     r0,[r1,#1]
        0x00001672:    2330        0#      MOVS     r3,#0x30
        0x00001674:    2136        6!      MOVS     r1,#0x36
        0x00001676:    2000        .       MOVS     r0,#0
        0x00001678:    f000f9f0    ....    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x0000167c:    2800        .(      CMP      r0,#0
        0x0000167e:    d004        ..      BEQ      0x168a ; PAN216_SetDataRate + 58
        0x00001680:    2001        .       MOVS     r0,#1
        0x00001682:    bd10        ..      POP      {r4,pc}
;;;484            break;
;;;485        case PAN216_DR_250Kbps:
;;;486            DataRateVal = 0x03;
        0x00001684:    2203        ."      MOVS     r2,#3
;;;487            _gDataRate = PAN216_DR_250Kbps;
        0x00001686:    2002        .       MOVS     r0,#2
;;;488            break;
        0x00001688:    e7f2        ..      B        0x1670 ; PAN216_SetDataRate + 32
;;;489        default:
;;;490            return PAN216_ERR;
;;;491        }
;;;492    
;;;493        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, REG_P0_0X36, DataRateVal, REG_P0_0X36_BW_MODE));
;;;494    
;;;495        PAN216_DRModConfig();
        0x0000168a:    f7fffc41    ..A.    BL       PAN216_DRModConfig ; 0xf10
;;;496        WriteTxDemodConfig();
        0x0000168e:    f000fb89    ....    BL       WriteTxDemodConfig ; 0x1da4
;;;497        WriteRxDemodConfig();
        0x00001692:    f000fb59    ..Y.    BL       WriteRxDemodConfig ; 0x1d48
;;;498        PAN216_Calibration();
        0x00001696:    f7fffbe7    ....    BL       PAN216_Calibration ; 0xe68
;;;499    #if CALIBRATION_DEBUG_ON
;;;500        PAN216_ReadVCOCode();
;;;501        PAN216_ReadTpCode();
;;;502        ReadBWDcocCal(FILTER_OFFSET_CAL_MODE, 0);
;;;503        ReadBWDcocCal(FILTER_BW_CAL_MODE, 0);
;;;504        ReadBWDcocCal(FILTER_BW_CAL_MODE, 1);
;;;505        ReadBWDcocCal(FILTER_BW_CAL_MODE, 2);
;;;506        ReadBWDcocCal(FILTER_DCOC_CAL_MODE, 0);
;;;507    #endif
;;;508        PAN216_FinishCalibration();
        0x0000169a:    f7fffd8a    ....    BL       PAN216_FinishCalibration ; 0x11b2
;;;509        return PAN216_OK;
        0x0000169e:    2000        .       MOVS     r0,#0
;;;510    }
        0x000016a0:    bd10        ..      POP      {r4,pc}
    $d
        0x000016a2:    0000        ..      DCW    0
        0x000016a4:    20000028    (..     DCD    536870952
    $t
    i.PAN216_SetEndian
    PAN216_SetEndian
;;;511    
;;;512    PAN216_Err_t PAN216_EnableRxPipe(PAN216_Pipe_t Pipe)
;;;513    {
;;;514        if (Pipe > PAN216_PIPE5)
;;;515        {
;;;516            return PAN216_ERR;
;;;517        }
;;;518    
;;;519        return PAN216_SetRegBits(PAN216_PAGE0, RXPIPE_CFG, 1 << Pipe);
;;;520    }
;;;521    
;;;522    PAN216_Err_t PAN216_DisableRxPipe(PAN216_Pipe_t Pipe)
;;;523    {
;;;524        if (Pipe > PAN216_PIPE5)
;;;525        {
;;;526            return PAN216_ERR;
;;;527        }
;;;528    
;;;529        return PAN216_ResetRegBits(PAN216_PAGE0, RXPIPE_CFG, 1 << Pipe);
;;;530    }
;;;531    
;;;532    /**
;;;533     * @brief Configure a specified RX pipe
;;;534     *
;;;535     * @param Pipe        Number of the RX pipe, value from 0 to 6
;;;536     * @param PayloadLen  Payload length in bytes
;;;537     *
;;;538     * @return Result of the operation
;;;539     *         - PAN216_OK
;;;540     *         - PAN216_ERR
;;;541     */
;;;542    PAN216_Err_t PAN216_SetRxPayloadLen(uint8_t PayloadLen)
;;;543    {
;;;544        return PAN216_WritePageReg(PAN216_PAGE0, RXPLLEN_CFG, PayloadLen);
;;;545    }
;;;546    
;;;547    PAN216_Err_t PAN216_SetTxPayloadLen(uint8_t PayloadLen)
;;;548    {
;;;549        P_ASSERT(PAN216_WritePageReg(PAN216_PAGE0, TXPLLEN_CFG, PayloadLen));
;;;550        return PAN216_OK;
;;;551    }
;;;552    
;;;553    /**
;;;554     * @brief Set enhanced shockburst mode for the PAN216 transceiver
;;;555     *
;;;556     * @param Mode Enhanced shockburst mode to set, one of PAN216_Mode_t values
;;;557     *
;;;558     * @return uint8_t Result of the operation
;;;559     *         - PAN216_OK
;;;560     *         - PAN216_ERR
;;;561     */
;;;562    PAN216_Err_t PAN216_SetWorkMode(PAN216_WorkMode_t Mode)
;;;563    {
;;;564    
;;;565        switch (Mode)
;;;566        {
;;;567        case PAN216_WORKMODE_NORMAL:
;;;568            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1,
;;;569                                         WMODE_CFG1_NORMAL_M1 | WMODE_CFG1_ENHANCE));
;;;570            break;
;;;571        case PAN216_WORKMODE_ENHANCE:
;;;572            P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_ENHANCE));
;;;573            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;574            break;
;;;575        default:
;;;576            return PAN216_ERR;
;;;577        }
;;;578    
;;;579        return PAN216_OK;
;;;580    }
;;;581    
;;;582    PAN216_Err_t PAN216_GetChipMode(PAN216_ChipMode_t *chipMode)
;;;583    {
;;;584        *chipMode = (PAN216_ChipMode_t)_gChipMode;
;;;585        return PAN216_OK;
;;;586    }
;;;587    
;;;588    /**
;;;589     * @brief  This function set noack for tx
;;;590     * @param  NewState: ENABLE/DISABLE
;;;591     * @return Result of the operation
;;;592     *         - PAN216_OK
;;;593     *         - PAN216_ERR
;;;594     * @note  This function is called after PAN216_SetWorkMode
;;;595     */
;;;596    PAN216_Err_t PAN216_EnableTxNoAck(uint8_t NewState)
;;;597    {
;;;598        uint8_t modeCfg1 = PAN216_ReadPageReg(PAN216_PAGE0, WMODE_CFG1);
;;;599    
;;;600        if (modeCfg1 & WMODE_CFG1_ENHANCE)
;;;601        {
;;;602            if (NewState)
;;;603            {
;;;604                P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_TX_NOACK_EN));
;;;605            }
;;;606            else
;;;607            {
;;;608                P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_TX_NOACK_EN));
;;;609            }
;;;610            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;611        }
;;;612        else
;;;613        {
;;;614            if (NewState)
;;;615            {
;;;616                P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;617            }
;;;618            else
;;;619            {
;;;620                P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;621            }
;;;622            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_TX_NOACK_EN));
;;;623        }
;;;624    
;;;625        return PAN216_OK;
;;;626    }
;;;627    
;;;628    /**
;;;629     * @brief After receiving a packet, reads the TxNoack bit of a enhanced shockburst packet
;;;630     *
;;;631     * @return uint8_t  1 : rx need ack
;;;632     *                  0 : rx need no ack
;;;633     */
;;;634    uint8_t PAN216_ReadTxNoackBit(void)
;;;635    {
;;;636        return !(PAN216_ReadReg(0x7D) & BIT6);
;;;637    }
;;;638    
;;;639    PAN216_Err_t PAN216_SetAckPipe(uint8_t pipe)
;;;640    {
;;;641        if (pipe > 5)
;;;642        {
;;;643            return PAN216_ERR;
;;;644        }
;;;645    
;;;646        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, 0x6F, pipe, 0x07));
;;;647    
;;;648        return PAN216_OK;
;;;649    }
;;;650    
;;;651    /**
;;;652     * @brief Enable CRC calculation for address field in PAN216.
;;;653     *
;;;654     * This function allows enabling or disabling
;;;655     *  CRC calculation for the address field in PAN216.
;;;656     *
;;;657     * @note By default, address field is not included in CRC calculation.
;;;658     *
;;;659     * @param[in] NewState Boolean value indicating whether to enable or disable CRC calculation for
;;;660     * address field.
;;;661     *
;;;662     * @return Result of the operation:
;;;663     *         - PAN216_OK
;;;664     *         - PAN216_ERR
;;;665     */
;;;666    PAN216_Err_t PAN216_CrcSkipAddr(bool exclude)
;;;667    {
;;;668        if (exclude)
;;;669        {
;;;670            return PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_ACCADDR_CRC_DIS);
;;;671        }
;;;672        else
;;;673        {
;;;674            return PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_ACCADDR_CRC_DIS);
;;;675        }
;;;676    }
;;;677    
;;;678    /**
;;;679     * @brief whiten(scramble) configurations
;;;680     * @param addr_excluded  whiten exclude access address(already include header, payload, crc)
;;;681     * @param initital_phase initital whiten phase
;;;682     *        - channel 37: 0x53
;;;683              - channel 38: 0x33
;;;684              - channel 39: 0x73
;;;685     * @return PAN216_Err_t
;;;686     */
;;;687    PAN216_Err_t PAN216_WhiteSkipAddr(bool addr_excluded)
;;;688    {
;;;689        PAN216_Err_t ret;
;;;690    
;;;691        if (addr_excluded)
;;;692        {
;;;693            ret = PAN216_SetRegBits(PAN216_PAGE0, SCR_CFG, SCR_CFG_ACCADDR_SCR_DIS);
;;;694        }
;;;695        else
;;;696        {
;;;697            ret = PAN216_ResetRegBits(PAN216_PAGE0, SCR_CFG, SCR_CFG_ACCADDR_SCR_DIS);
;;;698        }
;;;699    
;;;700        return ret;
;;;701    }
;;;702    
;;;703    /**
;;;704     * @brief
;;;705     *
;;;706     * @param Endian
;;;707     * @return uint8_t
;;;708     */
;;;709    PAN216_Err_t PAN216_SetEndian(PAN216_Endian_t Endian)
;;;710    {
        0x000016a8:    b510        ..      PUSH     {r4,lr}
        0x000016aa:    0004        ..      MOVS     r4,r0
        0x000016ac:    d00f        ..      BEQ      0x16ce ; PAN216_SetEndian + 38
;;;711    
;;;712        if (Endian == PAN216_ENDIAN_LITTLE)
;;;713        {
;;;714            PAN216_WritePageRegBits(PAN216_PAGE0, 0x6F, 1,
;;;715                                    BIT4); // é»è®¤ä¸º0ï¼pidå¨ä¸­é´ï¼éç½®ä¸º1æ¶ï¼pidå¨æä½ä¸¤ä½
;;;716        }
;;;717        else
;;;718        {
;;;719            PAN216_WritePageRegBits(PAN216_PAGE0, 0x6F, 0,
        0x000016ae:    2310        .#      MOVS     r3,#0x10
        0x000016b0:    2200        ."      MOVS     r2,#0
        0x000016b2:    216f        o!      MOVS     r1,#0x6f
        0x000016b4:    2000        .       MOVS     r0,#0
        0x000016b6:    f000f9d1    ....    BL       PAN216_WritePageRegBits ; 0x1a5c
;;;720                                    BIT4); // é»è®¤ä¸º0ï¼pidå¨ä¸­é´ï¼éç½®ä¸º1æ¶ï¼pidå¨æä½ä¸¤ä½
;;;721        }
;;;722    
;;;723        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, Endian, WMODE_CFG0_ENDIAN));
        0x000016ba:    2301        .#      MOVS     r3,#1
        0x000016bc:    4622        "F      MOV      r2,r4
        0x000016be:    2107        .!      MOVS     r1,#7
        0x000016c0:    2000        .       MOVS     r0,#0
        0x000016c2:    f000f9cb    ....    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x000016c6:    2800        .(      CMP      r0,#0
        0x000016c8:    d000        ..      BEQ      0x16cc ; PAN216_SetEndian + 36
        0x000016ca:    2001        .       MOVS     r0,#1
;;;724    
;;;725        return PAN216_OK;
;;;726    }
        0x000016cc:    bd10        ..      POP      {r4,pc}
        0x000016ce:    2310        .#      MOVS     r3,#0x10
        0x000016d0:    2201        ."      MOVS     r2,#1
        0x000016d2:    e7ee        ..      B        0x16b2 ; PAN216_SetEndian + 10
    i.PAN216_SetPage
    PAN216_SetPage
;;; ..\..\..\..\radio\pan216_reg.c
;;;214    {
        0x000016d4:    b510        ..      PUSH     {r4,lr}
;;;215        if (PAN216_OK != PAN216_WriteReg(PAGE_CFG, page))
        0x000016d6:    4601        .F      MOV      r1,r0
        0x000016d8:    2000        .       MOVS     r0,#0
        0x000016da:    f000f9f1    ....    BL       PAN216_WriteReg ; 0x1ac0
        0x000016de:    2800        .(      CMP      r0,#0
        0x000016e0:    d000        ..      BEQ      0x16e4 ; PAN216_SetPage + 16
;;;216        {
;;;217            return PAN216_ERR;
        0x000016e2:    2001        .       MOVS     r0,#1
;;;218        }
;;;219    
;;;220        return PAN216_OK;
;;;221    }
        0x000016e4:    bd10        ..      POP      {r4,pc}
    i.PAN216_SetRegBits
    PAN216_SetRegBits
;;;222    
;;;223    /**
;;;224     * @brief This function writes a value to the register in a specific page
;;;225     * @param[in] page The page of the register
;;;226     * @param[in] addr Register address
;;;227     * @param[in] value Value to write
;;;228     * @return Result
;;;229     */
;;;230    PAN216_Err_t PAN216_WritePageReg(uint8_t page, uint8_t addr, uint8_t value)
;;;231    {
;;;232        uint8_t original_page;
;;;233    
;;;234        original_page = PAN216_ReadReg(PAGE_CFG);
;;;235        if (page != original_page)
;;;236        {
;;;237            P_ASSERT(PAN216_SetPage(page));
;;;238        }
;;;239        P_ASSERT(PAN216_WriteReg(addr, value));
;;;240        if (page != original_page)
;;;241        {
;;;242            P_ASSERT(PAN216_SetPage(original_page));
;;;243        }
;;;244    
;;;245        return PAN216_OK;
;;;246    }
;;;247    
;;;248    /**
;;;249     * @brief This function writes a value to the register in a specific page without check
;;;250     *
;;;251     * @param page Register page
;;;252     * @param addr Register address
;;;253     * @param value Register value
;;;254     * @return PAN216_Err_t
;;;255     */
;;;256    PAN216_Err_t PAN216_WritePageRegUnchecked(uint8_t page, uint8_t addr, uint8_t value)
;;;257    {
;;;258        uint8_t original_page;
;;;259    
;;;260        original_page = PAN216_ReadReg(PAGE_CFG);
;;;261        if (page != original_page)
;;;262        {
;;;263            PAN216_SetPage(page);
;;;264        }
;;;265        PAN216_Write(addr, &value, 1);
;;;266        if (page != original_page)
;;;267        {
;;;268            PAN216_SetPage(original_page);
;;;269        }
;;;270    
;;;271        return PAN216_OK;
;;;272    }
;;;273    
;;;274    /**
;;;275     * @brief Read a value from the register in a specific page
;;;276     * @param[in] page The page of the register
;;;277     * @param[in] addr Register address
;;;278     * @return Success (register value) or failure
;;;279     */
;;;280    uint8_t PAN216_ReadPageReg(uint8_t page, uint8_t addr)
;;;281    {
;;;282        uint8_t value;
;;;283        uint8_t original_page;
;;;284    
;;;285        original_page = PAN216_ReadReg(PAGE_CFG);
;;;286        if (page != original_page)
;;;287        {
;;;288            PAN216_SetPage(page);
;;;289        }
;;;290        value = PAN216_ReadReg(addr);
;;;291        if (page != original_page)
;;;292        {
;;;293            PAN216_SetPage(original_page);
;;;294        }
;;;295    
;;;296        return value;
;;;297    }
;;;298    
;;;299    /**
;;;300     * @brief Write continuous register values (buffer) in a specific address page
;;;301     * @param[in] page The page of the register
;;;302     * @param[in] addr Register start address
;;;303     * @param[in] buffer Values to write
;;;304     * @param[in] len Buffer length
;;;305     * @return Result
;;;306     */
;;;307    PAN216_Err_t PAN216_WritePageRegs(uint8_t page, uint8_t addr, uint8_t *buffer, uint8_t len)
;;;308    {
;;;309        uint8_t original_page;
;;;310    
;;;311        original_page = PAN216_ReadReg(PAGE_CFG);
;;;312        if (page != original_page)
;;;313        {
;;;314            PAN216_SetPage(page);
;;;315        }
;;;316        PAN216_WriteRegs(addr, buffer, len);
;;;317        if (page != original_page)
;;;318        {
;;;319            PAN216_SetPage(original_page);
;;;320        }
;;;321    
;;;322        return PAN216_OK;
;;;323    }
;;;324    
;;;325    /**
;;;326     * @brief This function reads more than one byte from the register
;;;327     *
;;;328     * @param page Page of the register
;;;329     * @param addr Register address
;;;330     * @param buffer Buffer provided for data from the register
;;;331     * @param len Number of bytes to read
;;;332     * @return PAN216_Err_t
;;;333     */
;;;334    PAN216_Err_t PAN216_ReadPageRegs(uint8_t page, uint8_t addr, uint8_t *buffer, uint8_t len)
;;;335    {
;;;336        uint8_t original_page;
;;;337    
;;;338        original_page = PAN216_ReadReg(PAGE_CFG);
;;;339        if (page != original_page)
;;;340        {
;;;341            PAN216_SetPage(page);
;;;342        }
;;;343        PAN216_Read(addr, buffer, len);
;;;344        if (page != original_page)
;;;345        {
;;;346            PAN216_SetPage(original_page);
;;;347        }
;;;348    
;;;349        return PAN216_OK;
;;;350    }
;;;351    
;;;352    /**************************************************************************/
;;;353    /*                         Register Bit Operation                         */
;;;354    /**************************************************************************/
;;;355    /**
;;;356     * @brief Write bits to the register by mask
;;;357     * @param page Page of the register
;;;358     * @param addr Register address
;;;359     * @param mask Bits mask
;;;360     * @param value Bits value
;;;361     * @return PAN216_Err_t
;;;362     */
;;;363    PAN216_Err_t PAN216_WriteRegWithMask(uint8_t page, uint8_t addr, uint8_t mask, uint8_t value)
;;;364    {
;;;365        uint8_t tmp;
;;;366        PAN216_Err_t ret;
;;;367    
;;;368        value &= mask;
;;;369        tmp = PAN216_ReadPageReg(page, addr);
;;;370        ret = PAN216_WritePageReg(page, addr, (tmp & (~mask)) | value);
;;;371    
;;;372        return ret;
;;;373    }
;;;374    
;;;375    /**
;;;376     * @brief This function reads the register value with mask
;;;377     *
;;;378     * @param page Register page
;;;379     * @param addr Register address
;;;380     * @param mask Bits mask
;;;381     * @return uint8_t
;;;382     */
;;;383    uint8_t PAN216_ReadRegWithMask(uint8_t page, uint8_t addr, uint8_t mask)
;;;384    {
;;;385        uint8_t tmp;
;;;386    
;;;387        tmp = PAN216_ReadPageReg(page, addr);
;;;388    
;;;389        return tmp & mask;
;;;390    }
;;;391    
;;;392    /**
;;;393     * @brief Set bits to 1
;;;394     *
;;;395     * @param page Page of the register
;;;396     * @param addr Register address
;;;397     * @param mask Bits mask
;;;398     * @return PAN216_Err_t
;;;399     */
;;;400    PAN216_Err_t PAN216_SetRegBits(uint8_t page, uint8_t addr, uint8_t mask)
;;;401    {
        0x000016e6:    b570        p.      PUSH     {r4-r6,lr}
        0x000016e8:    4614        .F      MOV      r4,r2
        0x000016ea:    460d        .F      MOV      r5,r1
        0x000016ec:    4606        .F      MOV      r6,r0
;;;402        uint8_t tmp;
;;;403        PAN216_Err_t ret;
;;;404    
;;;405        tmp = PAN216_ReadPageReg(page, addr);
        0x000016ee:    f7fffe9f    ....    BL       PAN216_ReadPageReg ; 0x1430
;;;406        ret = PAN216_WritePageReg(page, addr, tmp | mask);
        0x000016f2:    4320         C      ORRS     r0,r0,r4
        0x000016f4:    4602        .F      MOV      r2,r0
        0x000016f6:    4629        )F      MOV      r1,r5
        0x000016f8:    4630        0F      MOV      r0,r6
        0x000016fa:    f000f98f    ....    BL       PAN216_WritePageReg ; 0x1a1c
;;;407    
;;;408        return ret;
;;;409    }
        0x000016fe:    bd70        p.      POP      {r4-r6,pc}
    i.PAN216_SetRxAddr
    PAN216_SetRxAddr
;;; ..\..\..\..\radio\pan216.c
;;;402    {
        0x00001700:    b510        ..      PUSH     {r4,lr}
;;;403    
;;;404        switch (Pipe)
        0x00001702:    0003        ..      MOVS     r3,r0
        0x00001704:    f000fb8a    ....    BL       __ARM_common_switch8 ; 0x1e1c
    $d
        0x00001708:    0d060406    ....    DCD    218498054
        0x0000170c:    0b161310    ....    DCD    185996048
    $t
;;;405        {
;;;406        case PAN216_PIPE0:
;;;407            P_ASSERT(PAN216_WriteRegs(PIPE0_RXADDR0_CFG, Addr, len));
        0x00001710:    200f        .       MOVS     r0,#0xf
        0x00001712:    e000        ..      B        0x1716 ; PAN216_SetRxAddr + 22
        0x00001714:    2020                MOVS     r0,#0x20
        0x00001716:    f000fa3a    ..:.    BL       PAN216_WriteRegs ; 0x1b8e
        0x0000171a:    2800        .(      CMP      r0,#0
        0x0000171c:    d000        ..      BEQ      0x1720 ; PAN216_SetRxAddr + 32
        0x0000171e:    2001        .       MOVS     r0,#1
        0x00001720:    bd10        ..      POP      {r4,pc}
;;;408            break;
;;;409        case PAN216_PIPE1:
;;;410            P_ASSERT(PAN216_WriteRegs(PIPE1_RXADDR0_CFG, Addr, len));
;;;411            break;
;;;412        case PAN216_PIPE2:
;;;413            P_ASSERT(PAN216_WriteReg(PIPE2_RXADDR0_CFG, Addr[0]));
        0x00001722:    7809        .x      LDRB     r1,[r1,#0]
        0x00001724:    2025        %       MOVS     r0,#0x25
        0x00001726:    e007        ..      B        0x1738 ; PAN216_SetRxAddr + 56
;;;414            break;
;;;415        case PAN216_PIPE3:
;;;416            P_ASSERT(PAN216_WriteReg(PIPE3_RXADDR0_CFG, Addr[0]));
        0x00001728:    7809        .x      LDRB     r1,[r1,#0]
        0x0000172a:    2026        &       MOVS     r0,#0x26
        0x0000172c:    e004        ..      B        0x1738 ; PAN216_SetRxAddr + 56
;;;417            break;
;;;418        case PAN216_PIPE4:
;;;419            P_ASSERT(PAN216_WriteReg(PIPE4_RXADDR0_CFG, Addr[0]));
        0x0000172e:    7809        .x      LDRB     r1,[r1,#0]
        0x00001730:    2027        '       MOVS     r0,#0x27
        0x00001732:    e001        ..      B        0x1738 ; PAN216_SetRxAddr + 56
;;;420            break;
;;;421        case PAN216_PIPE5:
;;;422            P_ASSERT(PAN216_WriteReg(PIPE5_RXADDR0_CFG, Addr[0]));
        0x00001734:    7809        .x      LDRB     r1,[r1,#0]
        0x00001736:    2028        (       MOVS     r0,#0x28
        0x00001738:    f000f9c2    ....    BL       PAN216_WriteReg ; 0x1ac0
        0x0000173c:    e7ed        ..      B        0x171a ; PAN216_SetRxAddr + 26
    i.PAN216_SetRxMode
    PAN216_SetRxMode
;;; ..\..\..\..\radio\pan216_ext.c
;;;316    {
        0x0000173e:    b510        ..      PUSH     {r4,lr}
        0x00001740:    2800        .(      CMP      r0,#0
        0x00001742:    d004        ..      BEQ      0x174e ; PAN216_SetRxMode + 16
;;;317        switch (RxMode)
        0x00001744:    2801        .(      CMP      r0,#1
        0x00001746:    d005        ..      BEQ      0x1754 ; PAN216_SetRxMode + 22
        0x00001748:    2802        .(      CMP      r0,#2
        0x0000174a:    d110        ..      BNE      0x176e ; PAN216_SetRxMode + 48
        0x0000174c:    e00c        ..      B        0x1768 ; PAN216_SetRxMode + 42
;;;318        {
;;;319        case PAN216_RX_MODE_SINGLE:
;;;320            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TRXMODE_CFG, PAN216_RX_MODE_SINGLE,
        0x0000174e:    2360        `#      MOVS     r3,#0x60
        0x00001750:    2200        ."      MOVS     r2,#0
        0x00001752:    e001        ..      B        0x1758 ; PAN216_SetRxMode + 26
        0x00001754:    2360        `#      MOVS     r3,#0x60
        0x00001756:    2201        ."      MOVS     r2,#1
        0x00001758:    212a        *!      MOVS     r1,#0x2a
        0x0000175a:    2000        .       MOVS     r0,#0
        0x0000175c:    f000f97e    ..~.    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x00001760:    2800        .(      CMP      r0,#0
        0x00001762:    d004        ..      BEQ      0x176e ; PAN216_SetRxMode + 48
;;;321                                             TRXMODE_CFG_REG_RX_CFG_MODE));
;;;322            break;
;;;323        case PAN216_RX_MODE_SINGLE_WITH_TIMEOUT:
;;;324            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TRXMODE_CFG,
;;;325                                             PAN216_RX_MODE_SINGLE_WITH_TIMEOUT,
;;;326                                             TRXMODE_CFG_REG_RX_CFG_MODE));
;;;327            break;
;;;328        case PAN216_RX_MODE_CONTINOUS:
;;;329            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TRXMODE_CFG, PAN216_RX_MODE_CONTINOUS,
        0x00001764:    2001        .       MOVS     r0,#1
        0x00001766:    bd10        ..      POP      {r4,pc}
        0x00001768:    2360        `#      MOVS     r3,#0x60
        0x0000176a:    2202        ."      MOVS     r2,#2
        0x0000176c:    e7f4        ..      B        0x1758 ; PAN216_SetRxMode + 26
;;;330                                             TRXMODE_CFG_REG_RX_CFG_MODE));
;;;331            break;
;;;332        default:
;;;333            break;
;;;334        }
;;;335    
;;;336        return PAN216_OK;
        0x0000176e:    2000        .       MOVS     r0,#0
;;;337    }
        0x00001770:    bd10        ..      POP      {r4,pc}
    i.PAN216_SetRxPayloadLen
    PAN216_SetRxPayloadLen
;;;338    
;;;339    /**
;;;340     * @brief  Performs a soft reset of the PAN216 transceiver module.
;;;341     *
;;;342     * @param  None
;;;343     *
;;;344     * @return uint8_t Result of the operation
;;;345     *         - PAN216_OK
;;;346     *         - PAN216_ERR
;;;347     * @note This function is designed for general operations.
;;;348     */
;;;349    PAN216_Err_t PAN216_SoftReset(void)
;;;350    {
;;;351        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, STATE_CFG, 0, STATE_CFG_POR_NRSTL));
;;;352        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, SYS_CFG, 0, SYS_CFG_REG_SOFT_RSTL));
;;;353        Pan216_Funs.delayms(1);
;;;354        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, STATE_CFG, 1, STATE_CFG_POR_NRSTL));
;;;355        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, SYS_CFG, 1, SYS_CFG_REG_SOFT_RSTL));
;;;356    
;;;357        return PAN216_OK;
;;;358    }
;;;359    
;;;360    PAN216_State_t PAN216_GetState(void)
;;;361    {
;;;362        uint8_t idleFlag;
;;;363        PAN216_State_t State;
;;;364    
;;;365        idleFlag = PAN216_ReadReg(0x7D) >> 7; // bit7ä¸º1è¡¨ç¤ºmacå¤äºIDLE
;;;366        State = (PAN216_State_t)(PAN216_ReadReg(0x7F) >> 6);
;;;367    
;;;368        if (State == 0)
;;;369        {
;;;370            State = idleFlag > 0 ? PAN216_STATE_IDLE : PAN216_STATE_ARD_WAIT;
;;;371        }
;;;372    
;;;373        return State;
;;;374    }
;;;375    
;;;376    /**
;;;377     * @brief Writes the PAN216 transceiver's TX PID value of a enhanced shockburst packet
;;;378     *
;;;379     * @param Pid 0~3
;;;380     * @return PAN216_Err_t
;;;381     */
;;;382    PAN216_Err_t PAN216_WriteTxManualPid(uint8_t Pid)
;;;383    {
;;;384        PAN216_WriteRegBits(PID_CFG, Pid, PID_CFG_TX_PID_MANUAL);
;;;385    
;;;386        return PAN216_OK;
;;;387    }
;;;388    
;;;389    /**
;;;390     * @brief Writes the PAN216 transceiver's RX PID value of a enhanced shockburst packet
;;;391     *
;;;392     * @param Pid 0~3
;;;393     * @return PAN216_Err_t
;;;394     */
;;;395    PAN216_Err_t PAN216_WriteRxManualPid(uint8_t Pid)
;;;396    {
;;;397        PAN216_WriteRegBits(PID_CFG, Pid, PID_CFG_RX_PID_MANUAL);
;;;398    
;;;399        return PAN216_OK;
;;;400    }
;;;401    
;;;402    /**
;;;403     * @brief Sets the DynamicPayloadLength feature for all pipes of the PAN216 transceiver
;;;404     *
;;;405     * This function is used to enable or disable the DynamicPayloadLength feature for all
;;;406     * pipes of the PAN216 transceiver.
;;;407     *
;;;408     * @param NewState ENABLE to enable the feature, DISABLE to disable the feature
;;;409     *
;;;410     * @return uint8_t Result of the operation
;;;411     *         - PAN216_OK
;;;412     *         - PAN216_ERR
;;;413     */
;;;414    PAN216_Err_t PAN216_EnableDynamicPL(uint8_t NewState)
;;;415    {
;;;416        if (NewState)
;;;417        {
;;;418            P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_DPY_EN));
;;;419        }
;;;420        else
;;;421        {
;;;422            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_DPY_EN));
;;;423        }
;;;424    
;;;425        return PAN216_OK;
;;;426    }
;;;427    
;;;428    /**
;;;429     * @brief Configures the CRC scheme of the PAN216 transceiver
;;;430     *
;;;431     * This function is used to configure the CRC scheme of the PAN216 transceiver.
;;;432     *
;;;433     * @param Crc The desired CRC scheme, as a value of type PAN216_Crc_t
;;;434     *
;;;435     * @note The transceiver will forcibly turn on the CRC if auto-acknowledgment is enabled
;;;436     *       for at least one receive (RX) pipe
;;;437     *
;;;438     * @return uint8_t Result of the operation
;;;439     *         - PAN216_OK
;;;440     *         - PAN216_ERR
;;;441     */
;;;442    PAN216_Err_t PAN216_SetCrcScheme(PAN216_Crc_t Crc)
;;;443    {
;;;444        if (Crc > PAN216_CRC_3byte)
;;;445        {
;;;446            return PAN216_ERR;
;;;447        }
;;;448    
;;;449        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, Crc, WMODE_CFG0_CRC_MODE_1_0));
;;;450    
;;;451        return PAN216_OK;
;;;452    }
;;;453    
;;;454    /**
;;;455     * @brief Configures the data rate of the PAN216 transceiver
;;;456     *
;;;457     * This function is used to configure the data rate of the PAN216 transceiver. The
;;;458     * data rate is specified as one of the members of PAN216_DataRate_t.
;;;459     *
;;;460     * @param DataRate The desired data rate, as one of the members of PAN216_DataRate_t
;;;461     *
;;;462     * @return uint8_t Result of the operation
;;;463     *         - PAN216_OK
;;;464     *         - PAN216_ERR
;;;465     */
;;;466    PAN216_Err_t PAN216_SetDataRate(PAN216_DataRate_t DataRate)
;;;467    {
;;;468        uint8_t DataRateVal;
;;;469    
;;;470        if (DataRate >= PAN216_DR_Max)
;;;471        {
;;;472            return PAN216_ERR;
;;;473        }
;;;474    
;;;475        switch (DataRate)
;;;476        {
;;;477        case PAN216_DR_1Mbps:
;;;478            DataRateVal = 0x00;
;;;479            _gDataRate = PAN216_DR_1Mbps;
;;;480            break;
;;;481        case PAN216_DR_2Mbps:
;;;482            DataRateVal = 0x01;
;;;483            _gDataRate = PAN216_DR_2Mbps;
;;;484            break;
;;;485        case PAN216_DR_250Kbps:
;;;486            DataRateVal = 0x03;
;;;487            _gDataRate = PAN216_DR_250Kbps;
;;;488            break;
;;;489        default:
;;;490            return PAN216_ERR;
;;;491        }
;;;492    
;;;493        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, REG_P0_0X36, DataRateVal, REG_P0_0X36_BW_MODE));
;;;494    
;;;495        PAN216_DRModConfig();
;;;496        WriteTxDemodConfig();
;;;497        WriteRxDemodConfig();
;;;498        PAN216_Calibration();
;;;499    #if CALIBRATION_DEBUG_ON
;;;500        PAN216_ReadVCOCode();
;;;501        PAN216_ReadTpCode();
;;;502        ReadBWDcocCal(FILTER_OFFSET_CAL_MODE, 0);
;;;503        ReadBWDcocCal(FILTER_BW_CAL_MODE, 0);
;;;504        ReadBWDcocCal(FILTER_BW_CAL_MODE, 1);
;;;505        ReadBWDcocCal(FILTER_BW_CAL_MODE, 2);
;;;506        ReadBWDcocCal(FILTER_DCOC_CAL_MODE, 0);
;;;507    #endif
;;;508        PAN216_FinishCalibration();
;;;509        return PAN216_OK;
;;;510    }
;;;511    
;;;512    PAN216_Err_t PAN216_EnableRxPipe(PAN216_Pipe_t Pipe)
;;;513    {
;;;514        if (Pipe > PAN216_PIPE5)
;;;515        {
;;;516            return PAN216_ERR;
;;;517        }
;;;518    
;;;519        return PAN216_SetRegBits(PAN216_PAGE0, RXPIPE_CFG, 1 << Pipe);
;;;520    }
;;;521    
;;;522    PAN216_Err_t PAN216_DisableRxPipe(PAN216_Pipe_t Pipe)
;;;523    {
;;;524        if (Pipe > PAN216_PIPE5)
;;;525        {
;;;526            return PAN216_ERR;
;;;527        }
;;;528    
;;;529        return PAN216_ResetRegBits(PAN216_PAGE0, RXPIPE_CFG, 1 << Pipe);
;;;530    }
;;;531    
;;;532    /**
;;;533     * @brief Configure a specified RX pipe
;;;534     *
;;;535     * @param Pipe        Number of the RX pipe, value from 0 to 6
;;;536     * @param PayloadLen  Payload length in bytes
;;;537     *
;;;538     * @return Result of the operation
;;;539     *         - PAN216_OK
;;;540     *         - PAN216_ERR
;;;541     */
;;;542    PAN216_Err_t PAN216_SetRxPayloadLen(uint8_t PayloadLen)
;;;543    {
        0x00001772:    b510        ..      PUSH     {r4,lr}
;;;544        return PAN216_WritePageReg(PAN216_PAGE0, RXPLLEN_CFG, PayloadLen);
        0x00001774:    4602        .F      MOV      r2,r0
        0x00001776:    2109        .!      MOVS     r1,#9
        0x00001778:    2000        .       MOVS     r0,#0
        0x0000177a:    f000f94f    ..O.    BL       PAN216_WritePageReg ; 0x1a1c
;;;545    }
        0x0000177e:    bd10        ..      POP      {r4,pc}
    i.PAN216_SetTRxTransTime
    PAN216_SetTRxTransTime
;;;546    
;;;547    PAN216_Err_t PAN216_SetTxPayloadLen(uint8_t PayloadLen)
;;;548    {
;;;549        P_ASSERT(PAN216_WritePageReg(PAN216_PAGE0, TXPLLEN_CFG, PayloadLen));
;;;550        return PAN216_OK;
;;;551    }
;;;552    
;;;553    /**
;;;554     * @brief Set enhanced shockburst mode for the PAN216 transceiver
;;;555     *
;;;556     * @param Mode Enhanced shockburst mode to set, one of PAN216_Mode_t values
;;;557     *
;;;558     * @return uint8_t Result of the operation
;;;559     *         - PAN216_OK
;;;560     *         - PAN216_ERR
;;;561     */
;;;562    PAN216_Err_t PAN216_SetWorkMode(PAN216_WorkMode_t Mode)
;;;563    {
;;;564    
;;;565        switch (Mode)
;;;566        {
;;;567        case PAN216_WORKMODE_NORMAL:
;;;568            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1,
;;;569                                         WMODE_CFG1_NORMAL_M1 | WMODE_CFG1_ENHANCE));
;;;570            break;
;;;571        case PAN216_WORKMODE_ENHANCE:
;;;572            P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_ENHANCE));
;;;573            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;574            break;
;;;575        default:
;;;576            return PAN216_ERR;
;;;577        }
;;;578    
;;;579        return PAN216_OK;
;;;580    }
;;;581    
;;;582    PAN216_Err_t PAN216_GetChipMode(PAN216_ChipMode_t *chipMode)
;;;583    {
;;;584        *chipMode = (PAN216_ChipMode_t)_gChipMode;
;;;585        return PAN216_OK;
;;;586    }
;;;587    
;;;588    /**
;;;589     * @brief  This function set noack for tx
;;;590     * @param  NewState: ENABLE/DISABLE
;;;591     * @return Result of the operation
;;;592     *         - PAN216_OK
;;;593     *         - PAN216_ERR
;;;594     * @note  This function is called after PAN216_SetWorkMode
;;;595     */
;;;596    PAN216_Err_t PAN216_EnableTxNoAck(uint8_t NewState)
;;;597    {
;;;598        uint8_t modeCfg1 = PAN216_ReadPageReg(PAN216_PAGE0, WMODE_CFG1);
;;;599    
;;;600        if (modeCfg1 & WMODE_CFG1_ENHANCE)
;;;601        {
;;;602            if (NewState)
;;;603            {
;;;604                P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_TX_NOACK_EN));
;;;605            }
;;;606            else
;;;607            {
;;;608                P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_TX_NOACK_EN));
;;;609            }
;;;610            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;611        }
;;;612        else
;;;613        {
;;;614            if (NewState)
;;;615            {
;;;616                P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;617            }
;;;618            else
;;;619            {
;;;620                P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;621            }
;;;622            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_TX_NOACK_EN));
;;;623        }
;;;624    
;;;625        return PAN216_OK;
;;;626    }
;;;627    
;;;628    /**
;;;629     * @brief After receiving a packet, reads the TxNoack bit of a enhanced shockburst packet
;;;630     *
;;;631     * @return uint8_t  1 : rx need ack
;;;632     *                  0 : rx need no ack
;;;633     */
;;;634    uint8_t PAN216_ReadTxNoackBit(void)
;;;635    {
;;;636        return !(PAN216_ReadReg(0x7D) & BIT6);
;;;637    }
;;;638    
;;;639    PAN216_Err_t PAN216_SetAckPipe(uint8_t pipe)
;;;640    {
;;;641        if (pipe > 5)
;;;642        {
;;;643            return PAN216_ERR;
;;;644        }
;;;645    
;;;646        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, 0x6F, pipe, 0x07));
;;;647    
;;;648        return PAN216_OK;
;;;649    }
;;;650    
;;;651    /**
;;;652     * @brief Enable CRC calculation for address field in PAN216.
;;;653     *
;;;654     * This function allows enabling or disabling
;;;655     *  CRC calculation for the address field in PAN216.
;;;656     *
;;;657     * @note By default, address field is not included in CRC calculation.
;;;658     *
;;;659     * @param[in] NewState Boolean value indicating whether to enable or disable CRC calculation for
;;;660     * address field.
;;;661     *
;;;662     * @return Result of the operation:
;;;663     *         - PAN216_OK
;;;664     *         - PAN216_ERR
;;;665     */
;;;666    PAN216_Err_t PAN216_CrcSkipAddr(bool exclude)
;;;667    {
;;;668        if (exclude)
;;;669        {
;;;670            return PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_ACCADDR_CRC_DIS);
;;;671        }
;;;672        else
;;;673        {
;;;674            return PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_ACCADDR_CRC_DIS);
;;;675        }
;;;676    }
;;;677    
;;;678    /**
;;;679     * @brief whiten(scramble) configurations
;;;680     * @param addr_excluded  whiten exclude access address(already include header, payload, crc)
;;;681     * @param initital_phase initital whiten phase
;;;682     *        - channel 37: 0x53
;;;683              - channel 38: 0x33
;;;684              - channel 39: 0x73
;;;685     * @return PAN216_Err_t
;;;686     */
;;;687    PAN216_Err_t PAN216_WhiteSkipAddr(bool addr_excluded)
;;;688    {
;;;689        PAN216_Err_t ret;
;;;690    
;;;691        if (addr_excluded)
;;;692        {
;;;693            ret = PAN216_SetRegBits(PAN216_PAGE0, SCR_CFG, SCR_CFG_ACCADDR_SCR_DIS);
;;;694        }
;;;695        else
;;;696        {
;;;697            ret = PAN216_ResetRegBits(PAN216_PAGE0, SCR_CFG, SCR_CFG_ACCADDR_SCR_DIS);
;;;698        }
;;;699    
;;;700        return ret;
;;;701    }
;;;702    
;;;703    /**
;;;704     * @brief
;;;705     *
;;;706     * @param Endian
;;;707     * @return uint8_t
;;;708     */
;;;709    PAN216_Err_t PAN216_SetEndian(PAN216_Endian_t Endian)
;;;710    {
;;;711    
;;;712        if (Endian == PAN216_ENDIAN_LITTLE)
;;;713        {
;;;714            PAN216_WritePageRegBits(PAN216_PAGE0, 0x6F, 1,
;;;715                                    BIT4); // é»è®¤ä¸º0ï¼pidå¨ä¸­é´ï¼éç½®ä¸º1æ¶ï¼pidå¨æä½ä¸¤ä½
;;;716        }
;;;717        else
;;;718        {
;;;719            PAN216_WritePageRegBits(PAN216_PAGE0, 0x6F, 0,
;;;720                                    BIT4); // é»è®¤ä¸º0ï¼pidå¨ä¸­é´ï¼éç½®ä¸º1æ¶ï¼pidå¨æä½ä¸¤ä½
;;;721        }
;;;722    
;;;723        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, Endian, WMODE_CFG0_ENDIAN));
;;;724    
;;;725        return PAN216_OK;
;;;726    }
;;;727    
;;;728    PAN216_Err_t PAN216_EnableWhiten(bool NewState)
;;;729    {
;;;730        if (NewState)
;;;731        {
;;;732            P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_SCR_ENABLE));
;;;733        }
;;;734        else
;;;735        {
;;;736            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_SCR_ENABLE));
;;;737        }
;;;738    
;;;739        return PAN216_OK;
;;;740    }
;;;741    
;;;742    /**
;;;743     * @brief  This function open the white list filtering functions
;;;744     * @param  Start : filtering the starting position
;;;745     * @param  FilterBuf : content of the filter
;;;746     * @param  FilterLen : 0 <= filter_len <= 6
;;;747     * @return Result of the operation:
;;;748     *         - PAN216_OK
;;;749     *         - PAN216_ERR
;;;750     */
;;;751    PAN216_Err_t PAN216_SetBleWhitelist(uint8_t Start, uint8_t *FilterBuf, uint8_t FilterLen)
;;;752    {
;;;753        uint8_t start_reg = WLIST0_CFG + 5;
;;;754    
;;;755        if (FilterLen > 6)
;;;756        {
;;;757            return PAN216_ERR;
;;;758        }
;;;759    
;;;760        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, BLEMATCHSTART_CFG, Start,
;;;761                                         BLEMATCHSTART_CFG_PLD_START_BYTE));
;;;762        start_reg -= (FilterLen - 1);
;;;763        P_ASSERT(PAN216_WritePageRegs(PAN216_PAGE0, start_reg, FilterBuf, FilterLen));
;;;764        return PAN216_OK;
;;;765    }
;;;766    
;;;767    /**
;;;768     * @brief  This function open the white list filtering functions
;;;769     * @param  FilterType : filtering type
;;;770     * @param  FilterLen : filter the number of bytes
;;;771     * @return Result of the operation:
;;;772     *         - PAN216_OK
;;;773     *         - PAN216_ERR
;;;774     */
;;;775    PAN216_Err_t PAN216_SetBleLenFilter(PAN216_BleLenFilter_t FilterType)
;;;776    {
;;;777        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, BLEMATCH_CFG0, FilterType,
;;;778                                         BLEMATCH_CFG0_BLELEN_MATCH_MODE));
;;;779    
;;;780        return PAN216_OK;
;;;781    }
;;;782    
;;;783    PAN216_Err_t PAN216_SetBleWLMatchMode(PAN216_BLEWLMatchMode_t MatchMode)
;;;784    {
;;;785        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, BLEMATCH_CFG0, MatchMode,
;;;786                                         BLEMATCH_CFG0_WL_MATCH_MODE));
;;;787    
;;;788        return PAN216_OK;
;;;789    }
;;;790    
;;;791    /**
;;;792     * @brief Enables or disables the manual configuration of the PAN216 TX and RX PID.
;;;793     *
;;;794     * @param NewState The new state of the manual configuration.
;;;795     *                  This parameter can be ENABLE or DISABLE.
;;;796     * @return Result of the operation.
;;;797     *         - PAN216_OK.
;;;798     *         - PAN216_ERR.
;;;799     *
;;;800     * @note This function is used to enable or disable the manual configuration of the PAN216 TX and RX
;;;801     * PIDs. By default, manual configuration is disabled.
;;;802     */
;;;803    PAN216_Err_t PAN216_EnableManualPid(uint8_t NewState)
;;;804    {
;;;805        if (NewState)
;;;806            return PAN216_WritePageRegBits(PAN216_PAGE0, PID_CFG, 1, PID_CFG_PID_MANUAL_EN);
;;;807        else
;;;808            return PAN216_WritePageRegBits(PAN216_PAGE0, PID_CFG, 0, PID_CFG_PID_MANUAL_EN);
;;;809    }
;;;810    
;;;811    /**
;;;812     * @brief This function set the timeout period for the tx node
;;;813     *         to wait for an ACK during enhanced mode.
;;;814     * @param AckTimeoutUs: 0~65535us
;;;815     * @return Result of the operation.
;;;816     *         - PAN216_OK.
;;;817     *         - PAN216_ERR.
;;;818     * @note This function must be called after RF_SetRate.
;;;819     */
;;;820    PAN216_Err_t PAN216_SetWaitAckTimeout(u16 AckTimeoutUs)
;;;821    {
;;;822        uint8_t time[2] = {
;;;823            (uint8_t)(AckTimeoutUs & 0xff),
;;;824            (uint8_t)((AckTimeoutUs >> 8) & 0xff),
;;;825        };
;;;826    
;;;827        return PAN216_WritePageRegs(PAN216_PAGE0, RXTIMEOUTL_CFG, time, 2);
;;;828    }
;;;829    
;;;830    /**
;;;831     * @brief This function set the timeout period for the tx node
;;;832     *         to wait for an ACK during enhanced mode.
;;;833     * @param TransWaitTime: 0~32767us
;;;834     * @return Result of the operation.
;;;835     *         - PAN216_OK.
;;;836     *         - PAN216_ERR.
;;;837     * @note This function must be called after RF_SetRate.
;;;838     */
;;;839    PAN216_Err_t PAN216_SetTRxTransTime(u16 TransWaitTimeUs)
;;;840    {
        0x00001780:    b508        ..      PUSH     {r3,lr}
;;;841        uint8_t time[2] = {
        0x00001782:    4669        iF      MOV      r1,sp
        0x00001784:    7008        .p      STRB     r0,[r1,#0]
        0x00001786:    0a00        ..      LSRS     r0,r0,#8
        0x00001788:    7048        Hp      STRB     r0,[r1,#1]
;;;842            (uint8_t)(TransWaitTimeUs & 0xff),
;;;843            (uint8_t)((TransWaitTimeUs >> 8) & 0xff),
;;;844        };
;;;845    
;;;846        return PAN216_WritePageRegs(PAN216_PAGE0, TRXTWTL_CFG, time, 2);
        0x0000178a:    2302        .#      MOVS     r3,#2
        0x0000178c:    466a        jF      MOV      r2,sp
        0x0000178e:    210d        .!      MOVS     r1,#0xd
        0x00001790:    2000        .       MOVS     r0,#0
        0x00001792:    f000f97a    ..z.    BL       PAN216_WritePageRegs ; 0x1a8a
;;;847    }
        0x00001796:    bd08        ..      POP      {r3,pc}
    i.PAN216_SetTxAddr
    PAN216_SetTxAddr
;;; ..\..\..\..\radio\pan216.c
;;;442        return PAN216_WriteRegs(TXADDR0_CFG, Addr, len);
        0x00001798:    460a        .F      MOV      r2,r1
;;; ..\..\..\..\radio\pan216.c (441)
        0x0000179a:    b510        ..      PUSH     {r4,lr}
;;;442        return PAN216_WriteRegs(TXADDR0_CFG, Addr, len);
        0x0000179c:    4601        .F      MOV      r1,r0
        0x0000179e:    2014        .       MOVS     r0,#0x14
        0x000017a0:    f000f9f5    ....    BL       PAN216_WriteRegs ; 0x1b8e
;;;443    }
        0x000017a4:    bd10        ..      POP      {r4,pc}
    i.PAN216_SetTxMode
    PAN216_SetTxMode
;;; ..\..\..\..\radio\pan216_ext.c
;;;284    {
        0x000017a6:    b510        ..      PUSH     {r4,lr}
        0x000017a8:    2800        .(      CMP      r0,#0
        0x000017aa:    d002        ..      BEQ      0x17b2 ; PAN216_SetTxMode + 12
;;;285        switch (TxMode)
        0x000017ac:    2801        .(      CMP      r0,#1
        0x000017ae:    d10b        ..      BNE      0x17c8 ; PAN216_SetTxMode + 34
        0x000017b0:    e002        ..      B        0x17b8 ; PAN216_SetTxMode + 18
;;;286        {
;;;287        case PAN216_TX_MODE_SINGLE:
;;;288            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TRXMODE_CFG, PAN216_TX_MODE_SINGLE,
        0x000017b2:    2380        .#      MOVS     r3,#0x80
        0x000017b4:    2200        ."      MOVS     r2,#0
        0x000017b6:    e001        ..      B        0x17bc ; PAN216_SetTxMode + 22
        0x000017b8:    2380        .#      MOVS     r3,#0x80
        0x000017ba:    2201        ."      MOVS     r2,#1
        0x000017bc:    212a        *!      MOVS     r1,#0x2a
        0x000017be:    2000        .       MOVS     r0,#0
        0x000017c0:    f000f94c    ..L.    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x000017c4:    2800        .(      CMP      r0,#0
        0x000017c6:    d000        ..      BEQ      0x17ca ; PAN216_SetTxMode + 36
;;;289                                             TRXMODE_CFG_REG_TX_CFG_MODE));
;;;290            break;
;;;291        case PAN216_TX_MODE_CONTINOUS:
;;;292            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TRXMODE_CFG, PAN216_TX_MODE_CONTINOUS,
;;;293                                             TRXMODE_CFG_REG_TX_CFG_MODE));
;;;294            break;
;;;295        default:
;;;296            return PAN216_ERR;
        0x000017c8:    2001        .       MOVS     r0,#1
;;;297        }
;;;298    
;;;299        return PAN216_OK;
;;;300    }
        0x000017ca:    bd10        ..      POP      {r4,pc}
    i.PAN216_SetTxPayloadLen
    PAN216_SetTxPayloadLen
;;;301    
;;;302    /**
;;;303     * @brief Set the receive mode of PAN216 transceiver.It has to be initialized  as STB3 mode before
;;;304     * entering RX mode.
;;;305     *
;;;306     * @param TxMode The receive mode to be set.
;;;307     *        - PAN216_RX_MODE_SINGLE: single reception
;;;308     *        - PAN216_RX_MODE_SINGLE_WITH_TIMEOUT: single reception with timeout
;;;309     *        - PAN216_RX_MODE_CONTINOUS: continuous reception
;;;310     *
;;;311     * @return Result of the operation
;;;312     *         - PAN216_OK
;;;313     *         - PAN216_ERR
;;;314     */
;;;315    PAN216_Err_t PAN216_SetRxMode(PAN216_RxMode_t RxMode)
;;;316    {
;;;317        switch (RxMode)
;;;318        {
;;;319        case PAN216_RX_MODE_SINGLE:
;;;320            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TRXMODE_CFG, PAN216_RX_MODE_SINGLE,
;;;321                                             TRXMODE_CFG_REG_RX_CFG_MODE));
;;;322            break;
;;;323        case PAN216_RX_MODE_SINGLE_WITH_TIMEOUT:
;;;324            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TRXMODE_CFG,
;;;325                                             PAN216_RX_MODE_SINGLE_WITH_TIMEOUT,
;;;326                                             TRXMODE_CFG_REG_RX_CFG_MODE));
;;;327            break;
;;;328        case PAN216_RX_MODE_CONTINOUS:
;;;329            P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TRXMODE_CFG, PAN216_RX_MODE_CONTINOUS,
;;;330                                             TRXMODE_CFG_REG_RX_CFG_MODE));
;;;331            break;
;;;332        default:
;;;333            break;
;;;334        }
;;;335    
;;;336        return PAN216_OK;
;;;337    }
;;;338    
;;;339    /**
;;;340     * @brief  Performs a soft reset of the PAN216 transceiver module.
;;;341     *
;;;342     * @param  None
;;;343     *
;;;344     * @return uint8_t Result of the operation
;;;345     *         - PAN216_OK
;;;346     *         - PAN216_ERR
;;;347     * @note This function is designed for general operations.
;;;348     */
;;;349    PAN216_Err_t PAN216_SoftReset(void)
;;;350    {
;;;351        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, STATE_CFG, 0, STATE_CFG_POR_NRSTL));
;;;352        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, SYS_CFG, 0, SYS_CFG_REG_SOFT_RSTL));
;;;353        Pan216_Funs.delayms(1);
;;;354        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, STATE_CFG, 1, STATE_CFG_POR_NRSTL));
;;;355        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, SYS_CFG, 1, SYS_CFG_REG_SOFT_RSTL));
;;;356    
;;;357        return PAN216_OK;
;;;358    }
;;;359    
;;;360    PAN216_State_t PAN216_GetState(void)
;;;361    {
;;;362        uint8_t idleFlag;
;;;363        PAN216_State_t State;
;;;364    
;;;365        idleFlag = PAN216_ReadReg(0x7D) >> 7; // bit7ä¸º1è¡¨ç¤ºmacå¤äºIDLE
;;;366        State = (PAN216_State_t)(PAN216_ReadReg(0x7F) >> 6);
;;;367    
;;;368        if (State == 0)
;;;369        {
;;;370            State = idleFlag > 0 ? PAN216_STATE_IDLE : PAN216_STATE_ARD_WAIT;
;;;371        }
;;;372    
;;;373        return State;
;;;374    }
;;;375    
;;;376    /**
;;;377     * @brief Writes the PAN216 transceiver's TX PID value of a enhanced shockburst packet
;;;378     *
;;;379     * @param Pid 0~3
;;;380     * @return PAN216_Err_t
;;;381     */
;;;382    PAN216_Err_t PAN216_WriteTxManualPid(uint8_t Pid)
;;;383    {
;;;384        PAN216_WriteRegBits(PID_CFG, Pid, PID_CFG_TX_PID_MANUAL);
;;;385    
;;;386        return PAN216_OK;
;;;387    }
;;;388    
;;;389    /**
;;;390     * @brief Writes the PAN216 transceiver's RX PID value of a enhanced shockburst packet
;;;391     *
;;;392     * @param Pid 0~3
;;;393     * @return PAN216_Err_t
;;;394     */
;;;395    PAN216_Err_t PAN216_WriteRxManualPid(uint8_t Pid)
;;;396    {
;;;397        PAN216_WriteRegBits(PID_CFG, Pid, PID_CFG_RX_PID_MANUAL);
;;;398    
;;;399        return PAN216_OK;
;;;400    }
;;;401    
;;;402    /**
;;;403     * @brief Sets the DynamicPayloadLength feature for all pipes of the PAN216 transceiver
;;;404     *
;;;405     * This function is used to enable or disable the DynamicPayloadLength feature for all
;;;406     * pipes of the PAN216 transceiver.
;;;407     *
;;;408     * @param NewState ENABLE to enable the feature, DISABLE to disable the feature
;;;409     *
;;;410     * @return uint8_t Result of the operation
;;;411     *         - PAN216_OK
;;;412     *         - PAN216_ERR
;;;413     */
;;;414    PAN216_Err_t PAN216_EnableDynamicPL(uint8_t NewState)
;;;415    {
;;;416        if (NewState)
;;;417        {
;;;418            P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_DPY_EN));
;;;419        }
;;;420        else
;;;421        {
;;;422            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_DPY_EN));
;;;423        }
;;;424    
;;;425        return PAN216_OK;
;;;426    }
;;;427    
;;;428    /**
;;;429     * @brief Configures the CRC scheme of the PAN216 transceiver
;;;430     *
;;;431     * This function is used to configure the CRC scheme of the PAN216 transceiver.
;;;432     *
;;;433     * @param Crc The desired CRC scheme, as a value of type PAN216_Crc_t
;;;434     *
;;;435     * @note The transceiver will forcibly turn on the CRC if auto-acknowledgment is enabled
;;;436     *       for at least one receive (RX) pipe
;;;437     *
;;;438     * @return uint8_t Result of the operation
;;;439     *         - PAN216_OK
;;;440     *         - PAN216_ERR
;;;441     */
;;;442    PAN216_Err_t PAN216_SetCrcScheme(PAN216_Crc_t Crc)
;;;443    {
;;;444        if (Crc > PAN216_CRC_3byte)
;;;445        {
;;;446            return PAN216_ERR;
;;;447        }
;;;448    
;;;449        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, Crc, WMODE_CFG0_CRC_MODE_1_0));
;;;450    
;;;451        return PAN216_OK;
;;;452    }
;;;453    
;;;454    /**
;;;455     * @brief Configures the data rate of the PAN216 transceiver
;;;456     *
;;;457     * This function is used to configure the data rate of the PAN216 transceiver. The
;;;458     * data rate is specified as one of the members of PAN216_DataRate_t.
;;;459     *
;;;460     * @param DataRate The desired data rate, as one of the members of PAN216_DataRate_t
;;;461     *
;;;462     * @return uint8_t Result of the operation
;;;463     *         - PAN216_OK
;;;464     *         - PAN216_ERR
;;;465     */
;;;466    PAN216_Err_t PAN216_SetDataRate(PAN216_DataRate_t DataRate)
;;;467    {
;;;468        uint8_t DataRateVal;
;;;469    
;;;470        if (DataRate >= PAN216_DR_Max)
;;;471        {
;;;472            return PAN216_ERR;
;;;473        }
;;;474    
;;;475        switch (DataRate)
;;;476        {
;;;477        case PAN216_DR_1Mbps:
;;;478            DataRateVal = 0x00;
;;;479            _gDataRate = PAN216_DR_1Mbps;
;;;480            break;
;;;481        case PAN216_DR_2Mbps:
;;;482            DataRateVal = 0x01;
;;;483            _gDataRate = PAN216_DR_2Mbps;
;;;484            break;
;;;485        case PAN216_DR_250Kbps:
;;;486            DataRateVal = 0x03;
;;;487            _gDataRate = PAN216_DR_250Kbps;
;;;488            break;
;;;489        default:
;;;490            return PAN216_ERR;
;;;491        }
;;;492    
;;;493        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, REG_P0_0X36, DataRateVal, REG_P0_0X36_BW_MODE));
;;;494    
;;;495        PAN216_DRModConfig();
;;;496        WriteTxDemodConfig();
;;;497        WriteRxDemodConfig();
;;;498        PAN216_Calibration();
;;;499    #if CALIBRATION_DEBUG_ON
;;;500        PAN216_ReadVCOCode();
;;;501        PAN216_ReadTpCode();
;;;502        ReadBWDcocCal(FILTER_OFFSET_CAL_MODE, 0);
;;;503        ReadBWDcocCal(FILTER_BW_CAL_MODE, 0);
;;;504        ReadBWDcocCal(FILTER_BW_CAL_MODE, 1);
;;;505        ReadBWDcocCal(FILTER_BW_CAL_MODE, 2);
;;;506        ReadBWDcocCal(FILTER_DCOC_CAL_MODE, 0);
;;;507    #endif
;;;508        PAN216_FinishCalibration();
;;;509        return PAN216_OK;
;;;510    }
;;;511    
;;;512    PAN216_Err_t PAN216_EnableRxPipe(PAN216_Pipe_t Pipe)
;;;513    {
;;;514        if (Pipe > PAN216_PIPE5)
;;;515        {
;;;516            return PAN216_ERR;
;;;517        }
;;;518    
;;;519        return PAN216_SetRegBits(PAN216_PAGE0, RXPIPE_CFG, 1 << Pipe);
;;;520    }
;;;521    
;;;522    PAN216_Err_t PAN216_DisableRxPipe(PAN216_Pipe_t Pipe)
;;;523    {
;;;524        if (Pipe > PAN216_PIPE5)
;;;525        {
;;;526            return PAN216_ERR;
;;;527        }
;;;528    
;;;529        return PAN216_ResetRegBits(PAN216_PAGE0, RXPIPE_CFG, 1 << Pipe);
;;;530    }
;;;531    
;;;532    /**
;;;533     * @brief Configure a specified RX pipe
;;;534     *
;;;535     * @param Pipe        Number of the RX pipe, value from 0 to 6
;;;536     * @param PayloadLen  Payload length in bytes
;;;537     *
;;;538     * @return Result of the operation
;;;539     *         - PAN216_OK
;;;540     *         - PAN216_ERR
;;;541     */
;;;542    PAN216_Err_t PAN216_SetRxPayloadLen(uint8_t PayloadLen)
;;;543    {
;;;544        return PAN216_WritePageReg(PAN216_PAGE0, RXPLLEN_CFG, PayloadLen);
;;;545    }
;;;546    
;;;547    PAN216_Err_t PAN216_SetTxPayloadLen(uint8_t PayloadLen)
;;;548    {
        0x000017cc:    b510        ..      PUSH     {r4,lr}
;;;549        P_ASSERT(PAN216_WritePageReg(PAN216_PAGE0, TXPLLEN_CFG, PayloadLen));
        0x000017ce:    4602        .F      MOV      r2,r0
        0x000017d0:    210a        .!      MOVS     r1,#0xa
        0x000017d2:    2000        .       MOVS     r0,#0
        0x000017d4:    f000f922    ..".    BL       PAN216_WritePageReg ; 0x1a1c
        0x000017d8:    2800        .(      CMP      r0,#0
        0x000017da:    d000        ..      BEQ      0x17de ; PAN216_SetTxPayloadLen + 18
        0x000017dc:    2001        .       MOVS     r0,#1
;;;550        return PAN216_OK;
;;;551    }
        0x000017de:    bd10        ..      POP      {r4,pc}
    i.PAN216_SetTxPower
    PAN216_SetTxPower
;;;552    
;;;553    /**
;;;554     * @brief Set enhanced shockburst mode for the PAN216 transceiver
;;;555     *
;;;556     * @param Mode Enhanced shockburst mode to set, one of PAN216_Mode_t values
;;;557     *
;;;558     * @return uint8_t Result of the operation
;;;559     *         - PAN216_OK
;;;560     *         - PAN216_ERR
;;;561     */
;;;562    PAN216_Err_t PAN216_SetWorkMode(PAN216_WorkMode_t Mode)
;;;563    {
;;;564    
;;;565        switch (Mode)
;;;566        {
;;;567        case PAN216_WORKMODE_NORMAL:
;;;568            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1,
;;;569                                         WMODE_CFG1_NORMAL_M1 | WMODE_CFG1_ENHANCE));
;;;570            break;
;;;571        case PAN216_WORKMODE_ENHANCE:
;;;572            P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_ENHANCE));
;;;573            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;574            break;
;;;575        default:
;;;576            return PAN216_ERR;
;;;577        }
;;;578    
;;;579        return PAN216_OK;
;;;580    }
;;;581    
;;;582    PAN216_Err_t PAN216_GetChipMode(PAN216_ChipMode_t *chipMode)
;;;583    {
;;;584        *chipMode = (PAN216_ChipMode_t)_gChipMode;
;;;585        return PAN216_OK;
;;;586    }
;;;587    
;;;588    /**
;;;589     * @brief  This function set noack for tx
;;;590     * @param  NewState: ENABLE/DISABLE
;;;591     * @return Result of the operation
;;;592     *         - PAN216_OK
;;;593     *         - PAN216_ERR
;;;594     * @note  This function is called after PAN216_SetWorkMode
;;;595     */
;;;596    PAN216_Err_t PAN216_EnableTxNoAck(uint8_t NewState)
;;;597    {
;;;598        uint8_t modeCfg1 = PAN216_ReadPageReg(PAN216_PAGE0, WMODE_CFG1);
;;;599    
;;;600        if (modeCfg1 & WMODE_CFG1_ENHANCE)
;;;601        {
;;;602            if (NewState)
;;;603            {
;;;604                P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_TX_NOACK_EN));
;;;605            }
;;;606            else
;;;607            {
;;;608                P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_TX_NOACK_EN));
;;;609            }
;;;610            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;611        }
;;;612        else
;;;613        {
;;;614            if (NewState)
;;;615            {
;;;616                P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;617            }
;;;618            else
;;;619            {
;;;620                P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;621            }
;;;622            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_TX_NOACK_EN));
;;;623        }
;;;624    
;;;625        return PAN216_OK;
;;;626    }
;;;627    
;;;628    /**
;;;629     * @brief After receiving a packet, reads the TxNoack bit of a enhanced shockburst packet
;;;630     *
;;;631     * @return uint8_t  1 : rx need ack
;;;632     *                  0 : rx need no ack
;;;633     */
;;;634    uint8_t PAN216_ReadTxNoackBit(void)
;;;635    {
;;;636        return !(PAN216_ReadReg(0x7D) & BIT6);
;;;637    }
;;;638    
;;;639    PAN216_Err_t PAN216_SetAckPipe(uint8_t pipe)
;;;640    {
;;;641        if (pipe > 5)
;;;642        {
;;;643            return PAN216_ERR;
;;;644        }
;;;645    
;;;646        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, 0x6F, pipe, 0x07));
;;;647    
;;;648        return PAN216_OK;
;;;649    }
;;;650    
;;;651    /**
;;;652     * @brief Enable CRC calculation for address field in PAN216.
;;;653     *
;;;654     * This function allows enabling or disabling
;;;655     *  CRC calculation for the address field in PAN216.
;;;656     *
;;;657     * @note By default, address field is not included in CRC calculation.
;;;658     *
;;;659     * @param[in] NewState Boolean value indicating whether to enable or disable CRC calculation for
;;;660     * address field.
;;;661     *
;;;662     * @return Result of the operation:
;;;663     *         - PAN216_OK
;;;664     *         - PAN216_ERR
;;;665     */
;;;666    PAN216_Err_t PAN216_CrcSkipAddr(bool exclude)
;;;667    {
;;;668        if (exclude)
;;;669        {
;;;670            return PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_ACCADDR_CRC_DIS);
;;;671        }
;;;672        else
;;;673        {
;;;674            return PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_ACCADDR_CRC_DIS);
;;;675        }
;;;676    }
;;;677    
;;;678    /**
;;;679     * @brief whiten(scramble) configurations
;;;680     * @param addr_excluded  whiten exclude access address(already include header, payload, crc)
;;;681     * @param initital_phase initital whiten phase
;;;682     *        - channel 37: 0x53
;;;683              - channel 38: 0x33
;;;684              - channel 39: 0x73
;;;685     * @return PAN216_Err_t
;;;686     */
;;;687    PAN216_Err_t PAN216_WhiteSkipAddr(bool addr_excluded)
;;;688    {
;;;689        PAN216_Err_t ret;
;;;690    
;;;691        if (addr_excluded)
;;;692        {
;;;693            ret = PAN216_SetRegBits(PAN216_PAGE0, SCR_CFG, SCR_CFG_ACCADDR_SCR_DIS);
;;;694        }
;;;695        else
;;;696        {
;;;697            ret = PAN216_ResetRegBits(PAN216_PAGE0, SCR_CFG, SCR_CFG_ACCADDR_SCR_DIS);
;;;698        }
;;;699    
;;;700        return ret;
;;;701    }
;;;702    
;;;703    /**
;;;704     * @brief
;;;705     *
;;;706     * @param Endian
;;;707     * @return uint8_t
;;;708     */
;;;709    PAN216_Err_t PAN216_SetEndian(PAN216_Endian_t Endian)
;;;710    {
;;;711    
;;;712        if (Endian == PAN216_ENDIAN_LITTLE)
;;;713        {
;;;714            PAN216_WritePageRegBits(PAN216_PAGE0, 0x6F, 1,
;;;715                                    BIT4); // é»è®¤ä¸º0ï¼pidå¨ä¸­é´ï¼éç½®ä¸º1æ¶ï¼pidå¨æä½ä¸¤ä½
;;;716        }
;;;717        else
;;;718        {
;;;719            PAN216_WritePageRegBits(PAN216_PAGE0, 0x6F, 0,
;;;720                                    BIT4); // é»è®¤ä¸º0ï¼pidå¨ä¸­é´ï¼éç½®ä¸º1æ¶ï¼pidå¨æä½ä¸¤ä½
;;;721        }
;;;722    
;;;723        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, Endian, WMODE_CFG0_ENDIAN));
;;;724    
;;;725        return PAN216_OK;
;;;726    }
;;;727    
;;;728    PAN216_Err_t PAN216_EnableWhiten(bool NewState)
;;;729    {
;;;730        if (NewState)
;;;731        {
;;;732            P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_SCR_ENABLE));
;;;733        }
;;;734        else
;;;735        {
;;;736            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_SCR_ENABLE));
;;;737        }
;;;738    
;;;739        return PAN216_OK;
;;;740    }
;;;741    
;;;742    /**
;;;743     * @brief  This function open the white list filtering functions
;;;744     * @param  Start : filtering the starting position
;;;745     * @param  FilterBuf : content of the filter
;;;746     * @param  FilterLen : 0 <= filter_len <= 6
;;;747     * @return Result of the operation:
;;;748     *         - PAN216_OK
;;;749     *         - PAN216_ERR
;;;750     */
;;;751    PAN216_Err_t PAN216_SetBleWhitelist(uint8_t Start, uint8_t *FilterBuf, uint8_t FilterLen)
;;;752    {
;;;753        uint8_t start_reg = WLIST0_CFG + 5;
;;;754    
;;;755        if (FilterLen > 6)
;;;756        {
;;;757            return PAN216_ERR;
;;;758        }
;;;759    
;;;760        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, BLEMATCHSTART_CFG, Start,
;;;761                                         BLEMATCHSTART_CFG_PLD_START_BYTE));
;;;762        start_reg -= (FilterLen - 1);
;;;763        P_ASSERT(PAN216_WritePageRegs(PAN216_PAGE0, start_reg, FilterBuf, FilterLen));
;;;764        return PAN216_OK;
;;;765    }
;;;766    
;;;767    /**
;;;768     * @brief  This function open the white list filtering functions
;;;769     * @param  FilterType : filtering type
;;;770     * @param  FilterLen : filter the number of bytes
;;;771     * @return Result of the operation:
;;;772     *         - PAN216_OK
;;;773     *         - PAN216_ERR
;;;774     */
;;;775    PAN216_Err_t PAN216_SetBleLenFilter(PAN216_BleLenFilter_t FilterType)
;;;776    {
;;;777        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, BLEMATCH_CFG0, FilterType,
;;;778                                         BLEMATCH_CFG0_BLELEN_MATCH_MODE));
;;;779    
;;;780        return PAN216_OK;
;;;781    }
;;;782    
;;;783    PAN216_Err_t PAN216_SetBleWLMatchMode(PAN216_BLEWLMatchMode_t MatchMode)
;;;784    {
;;;785        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, BLEMATCH_CFG0, MatchMode,
;;;786                                         BLEMATCH_CFG0_WL_MATCH_MODE));
;;;787    
;;;788        return PAN216_OK;
;;;789    }
;;;790    
;;;791    /**
;;;792     * @brief Enables or disables the manual configuration of the PAN216 TX and RX PID.
;;;793     *
;;;794     * @param NewState The new state of the manual configuration.
;;;795     *                  This parameter can be ENABLE or DISABLE.
;;;796     * @return Result of the operation.
;;;797     *         - PAN216_OK.
;;;798     *         - PAN216_ERR.
;;;799     *
;;;800     * @note This function is used to enable or disable the manual configuration of the PAN216 TX and RX
;;;801     * PIDs. By default, manual configuration is disabled.
;;;802     */
;;;803    PAN216_Err_t PAN216_EnableManualPid(uint8_t NewState)
;;;804    {
;;;805        if (NewState)
;;;806            return PAN216_WritePageRegBits(PAN216_PAGE0, PID_CFG, 1, PID_CFG_PID_MANUAL_EN);
;;;807        else
;;;808            return PAN216_WritePageRegBits(PAN216_PAGE0, PID_CFG, 0, PID_CFG_PID_MANUAL_EN);
;;;809    }
;;;810    
;;;811    /**
;;;812     * @brief This function set the timeout period for the tx node
;;;813     *         to wait for an ACK during enhanced mode.
;;;814     * @param AckTimeoutUs: 0~65535us
;;;815     * @return Result of the operation.
;;;816     *         - PAN216_OK.
;;;817     *         - PAN216_ERR.
;;;818     * @note This function must be called after RF_SetRate.
;;;819     */
;;;820    PAN216_Err_t PAN216_SetWaitAckTimeout(u16 AckTimeoutUs)
;;;821    {
;;;822        uint8_t time[2] = {
;;;823            (uint8_t)(AckTimeoutUs & 0xff),
;;;824            (uint8_t)((AckTimeoutUs >> 8) & 0xff),
;;;825        };
;;;826    
;;;827        return PAN216_WritePageRegs(PAN216_PAGE0, RXTIMEOUTL_CFG, time, 2);
;;;828    }
;;;829    
;;;830    /**
;;;831     * @brief This function set the timeout period for the tx node
;;;832     *         to wait for an ACK during enhanced mode.
;;;833     * @param TransWaitTime: 0~32767us
;;;834     * @return Result of the operation.
;;;835     *         - PAN216_OK.
;;;836     *         - PAN216_ERR.
;;;837     * @note This function must be called after RF_SetRate.
;;;838     */
;;;839    PAN216_Err_t PAN216_SetTRxTransTime(u16 TransWaitTimeUs)
;;;840    {
;;;841        uint8_t time[2] = {
;;;842            (uint8_t)(TransWaitTimeUs & 0xff),
;;;843            (uint8_t)((TransWaitTimeUs >> 8) & 0xff),
;;;844        };
;;;845    
;;;846        return PAN216_WritePageRegs(PAN216_PAGE0, TRXTWTL_CFG, time, 2);
;;;847    }
;;;848    
;;;849    /**
;;;850     * @brief Set automatic retransmission parameters.
;;;851     *
;;;852     * @param DelayUs Auto retransmit delay, value from 250 to 4000, unit is us.
;;;853     * @param MaxCnt Count of auto retransmits, value from 0 to 15.
;;;854     *         Zero value means that the automatic retransmission is disabled.
;;;855     * @return Result of the operation.
;;;856     *         - PAN216_OK.
;;;857     *         - PAN216_ERR.
;;;858     */
;;;859    PAN216_Err_t PAN216_SetAutoRetrans(u16 DelayUs, uint8_t MaxCnt)
;;;860    {
;;;861        if (DelayUs < 250)
;;;862        {
;;;863            DelayUs = 250;
;;;864        }
;;;865    
;;;866        DelayUs /= 250;
;;;867        DelayUs--;
;;;868    
;;;869        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TXAUTO_CFG, (uint8_t)DelayUs, TXAUTO_CFG_ARD));
;;;870        P_ASSERT(
;;;871            PAN216_WritePageRegBits(PAN216_PAGE0, TXAUTO_CFG, (uint8_t)MaxCnt, TXAUTO_CFG_ARC_3_0));
;;;872    
;;;873        return PAN216_OK;
;;;874    }
;;;875    
;;;876    PAN216_Err_t PAN216_RxLengthLimit(bool NewState)
;;;877    {
;;;878        if (NewState)
;;;879        {
;;;880            return PAN216_SetRegBits(PAN216_PAGE0, PKT_EXT_CFG, PKT_EXT_CFG_W_RX_MAX_CTRL_EN);
;;;881        }
;;;882        else
;;;883        {
;;;884            return PAN216_ResetRegBits(PAN216_PAGE0, PKT_EXT_CFG, PKT_EXT_CFG_W_RX_MAX_CTRL_EN);
;;;885        }
;;;886    }
;;;887    
;;;888    #define POWER_TABLE_SIZE 6
;;;889    
;;;890    uint8_t sop8_power_table_reg[POWER_TABLE_SIZE][3] = {
;;;891        //{PAN216_PAGE1, 0x48, 0x0f}, //
;;;892        {PAN216_PAGE1, 0x3C, 0x07}, //
;;;893        {PAN216_PAGE0, 0x43, 0x30}, //
;;;894        {PAN216_PAGE0, 0x44, 0xf0}, //
;;;895        {PAN216_PAGE0, 0x44, 0x0f}, //
;;;896        {PAN216_PAGE1, 0x46, BIT0}, //
;;;897        {PAN216_PAGE1, 0x46, 0x0c}, //
;;;898    };
;;;899    
;;;900    const struct
;;;901    {
;;;902        PAN216_TxPower_t power_level;
;;;903        int val[POWER_TABLE_SIZE];
;;;904    } sop8_power_table[] = {
;;;905        {PAN216_TXPWR_9_5dBm,       {0x07, 0x03, 0x08, 0x0c, 0x00, 0x00}},
;;;906        {PAN216_TXPWR_9dBm,         {0x07, 0x03, 0x08, 0x08, 0x00, 0x00}},
;;;907        {PAN216_TXPWR_8dBm,         {0x07, 0x03, 0x08, 0x06, 0x00, 0x00}},
;;;908        {PAN216_TXPWR_7dBm,         {0x07, 0x03, 0x08, 0x03, 0x00, 0x00}},
;;;909        {PAN216_TXPWR_6dBm,         {0x07, 0x03, 0x08, 0x04, 0x00, 0x01}},
;;;910        {PAN216_TXPWR_5dBm,         {0x07, 0x03, 0x08, 0x02, 0x00, 0x01}},
;;;911        {PAN216_TXPWR_4dBm,         {0x07, 0x03, 0x08, 0x00, 0x00, 0x01}},
;;;912        {PAN216_TXPWR_3dBm,         {0x07, 0x03, 0x08, 0x00, 0x00, 0x02}},
;;;913        {PAN216_TXPWR_2dBm,         {0x03, 0x03, 0x08, 0x02, 0x00, 0x03}},
;;;914        {PAN216_TXPWR_1dBm,         {0x03, 0x03, 0x08, 0x00, 0x00, 0x03}},
;;;915        {PAN216_TXPWR_0dBm,         {0x03, 0x03, 0x08, 0x04, 0x01, 0x03}},
;;;916        {PAN216_TXPWR_0dBm_LOWPWR,  {0x07, 0x01, 0x08, 0x0F, 0x00, 0x00}},
;;;917        {PAN216_TXPWR_n1dBm,        {0x04, 0x03, 0x08, 0x00, 0x01, 0x03}},
;;;918        {PAN216_TXPWR_n2dBm,        {0x07, 0x01, 0x0F, 0x0F, 0x00, 0x01}},
;;;919        {PAN216_TXPWR_n4dBm,        {0x07, 0x01, 0x0F, 0x0F, 0x01, 0x03}},
;;;920        {PAN216_TXPWR_n5dBm,        {0x07, 0x01, 0x0F, 0x0F, 0x01, 0x03}},
;;;921        {PAN216_TXPWR_n7dBm,        {0x03, 0x01, 0x08, 0x08, 0x01, 0x03}},
;;;922        {PAN216_TXPWR_n8dBm,        {0x03, 0x01, 0x08, 0x04, 0x01, 0x01}},
;;;923        {PAN216_TXPWR_n10dBm,       {0x03, 0x01, 0x08, 0x00, 0x01, 0x00}},
;;;924        {PAN216_TXPWR_n11dBm,       {0x03, 0x01, 0x06, 0x00, 0x01, 0x00}},
;;;925        {PAN216_TXPWR_n12dBm,       {0x03, 0x01, 0x05, 0x00, 0x01, 0x00}},
;;;926        {PAN216_TXPWR_n14dBm,       {0x03, 0x01, 0x04, 0x00, 0x01, 0x00}},
;;;927        {PAN216_TXPWR_n16dBm,       {0x03, 0x01, 0x03, 0x00, 0x01, 0x00}},
;;;928        {PAN216_TXPWR_n19dBm,       {0x03, 0x01, 0x02, 0x00, 0x01, 0x00}},
;;;929        {PAN216_TXPWR_n23dBm,       {0x03, 0x01, 0x01, 0x00, 0x01, 0x00}},
;;;930        {PAN216_TXPWR_n25dBm,       {0x02, 0x01, 0x01, 0x00, 0x01, 0x00}},
;;;931        {PAN216_TXPWR_n28dBm,       {0x01, 0x01, 0x01, 0x08, 0x01, 0x00}},
;;;932        {PAN216_TXPWR_n33dBm,       {0x03, 0x01, 0x00, 0x00, 0x01, 0x00}},
;;;933        {PAN216_TXPWR_n37dBm,       {0x00, 0x01, 0x00, 0x00, 0x00, 0x00}},
;;;934        {PAN216_TXPWR_n40dBm,       {0x00, 0x01, 0x00, 0x00, 0x01, 0x00}},
;;;935    
;;;936    };
;;;937    
;;;938    /**
;;;939     * @brief Configures the RF output power in TX mode of the PAN216 transceiver
;;;940     *
;;;941     * This function is used to set the RF output power of the PAN216 transceiver in TX mode.
;;;942     *
;;;943     * @param TxPower The desired RF output power, as one of the members of PAN216_TxPower_t
;;;944     *
;;;945     * @return uint8_t Result of the operation
;;;946     *         - PAN216_OK
;;;947     *         - PAN216_ERR
;;;948     */
;;;949    PAN216_Err_t PAN216_SetTxPower(PAN216_TxPower_t TxPower)
;;;950    {
        0x000017e0:    b5f8        ..      PUSH     {r3-r7,lr}
        0x000017e2:    4605        .F      MOV      r5,r0
;;;951        PAN216_Err_t ret = PAN216_OK;
        0x000017e4:    2000        .       MOVS     r0,#0
;;;952        uint8_t i;
;;;953    
;;;954        for (i = 0; i < sizeof(sop8_power_table) / sizeof(sop8_power_table[0]); i++)
;;;955        {
;;;956            if (sop8_power_table[i].power_level == TxPower)
        0x000017e6:    4915        .I      LDR      r1,[pc,#84] ; [0x183c] = 0x2f78
        0x000017e8:    9000        ..      STR      r0,[sp,#0]
        0x000017ea:    221c        ."      MOVS     r2,#0x1c
        0x000017ec:    4342        BC      MULS     r2,r0,r2
        0x000017ee:    568b        .V      LDRSB    r3,[r1,r2]
        0x000017f0:    42ab        .B      CMP      r3,r5
        0x000017f2:    d112        ..      BNE      0x181a ; PAN216_SetTxPower + 58
;;;957            {
;;;958                for (uint8_t j = 0; j < POWER_TABLE_SIZE; j++)
        0x000017f4:    2400        .$      MOVS     r4,#0
        0x000017f6:    4e12        .N      LDR      r6,[pc,#72] ; [0x1840] = 0x2000002b
        0x000017f8:    1857        W.      ADDS     r7,r2,r1
        0x000017fa:    00a0        ..      LSLS     r0,r4,#2
        0x000017fc:    1838        8.      ADDS     r0,r7,r0
        0x000017fe:    7902        .y      LDRB     r2,[r0,#4]
        0x00001800:    0060        `.      LSLS     r0,r4,#1
        0x00001802:    1820         .      ADDS     r0,r4,r0
        0x00001804:    1981        ..      ADDS     r1,r0,r6
        0x00001806:    788b        .x      LDRB     r3,[r1,#2]
        0x00001808:    7849        Ix      LDRB     r1,[r1,#1]
        0x0000180a:    5c30        0\      LDRB     r0,[r6,r0]
        0x0000180c:    f000f926    ..&.    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x00001810:    1c64        d.      ADDS     r4,r4,#1
        0x00001812:    b2e4        ..      UXTB     r4,r4
        0x00001814:    2c06        .,      CMP      r4,#6
        0x00001816:    d3f0        ..      BCC      0x17fa ; PAN216_SetTxPower + 26
        0x00001818:    e003        ..      B        0x1822 ; PAN216_SetTxPower + 66
        0x0000181a:    1c40        @.      ADDS     r0,r0,#1
        0x0000181c:    b2c0        ..      UXTB     r0,r0
        0x0000181e:    281e        .(      CMP      r0,#0x1e
        0x00001820:    d3e3        ..      BCC      0x17ea ; PAN216_SetTxPower + 10
;;;959                {
;;;960                    PAN216_WritePageRegBits(sop8_power_table_reg[j][0], sop8_power_table_reg[j][1],
;;;961                                            sop8_power_table[i].val[j], sop8_power_table_reg[j][2]);
;;;962                }
;;;963                break;
;;;964            }
;;;965        }
;;;966    
;;;967        if (TxPower == PAN216_TXPWR_0dBm_LOWPWR || TxPower == PAN216_TXPWR_n4dBm)
        0x00001822:    2d63        c-      CMP      r5,#0x63
        0x00001824:    d001        ..      BEQ      0x182a ; PAN216_SetTxPower + 74
        0x00001826:    1d2d        -.      ADDS     r5,r5,#4
        0x00001828:    d105        ..      BNE      0x1836 ; PAN216_SetTxPower + 86
;;;968        {
;;;969            PAN216_WritePageRegBits(PAN216_PAGE1, 0x48, 0x0C, BITMASK_3_0);
        0x0000182a:    230f        .#      MOVS     r3,#0xf
        0x0000182c:    220c        ."      MOVS     r2,#0xc
        0x0000182e:    2148        H!      MOVS     r1,#0x48
        0x00001830:    2001        .       MOVS     r0,#1
        0x00001832:    f000f913    ....    BL       PAN216_WritePageRegBits ; 0x1a5c
;;;970        }
;;;971    
;;;972        return ret;
        0x00001836:    9800        ..      LDR      r0,[sp,#0]
;;;973    }
        0x00001838:    bdf8        ..      POP      {r3-r7,pc}
    $d
        0x0000183a:    0000        ..      DCW    0
        0x0000183c:    00002f78    x/..    DCD    12152
        0x00001840:    2000002b    +..     DCD    536870955
    $t
    i.PAN216_SetUpConfig
    PAN216_SetUpConfig
;;;974    
;;;975    /**
;;;976     * @brief Set Nordic packet header format
;;;977     * @param HeaderEn Enable/disable header (1/0)
;;;978     * @param HeaderLen Header length in bytes (valid only if HeaderEn=1)
;;;979     * @note Only valid in Nordic normal mode
;;;980     * @return PAN216_Err_t Operation result
;;;981     */
;;;982    PAN216_Err_t PAN216_SetNordicPktHeader(uint8_t HeaderEn, uint8_t HeaderLen)
;;;983    {
;;;984        P_ASSERT(
;;;985            PAN216_WritePageRegBits(PAN216_PAGE0, PKT_EXT_CFG, !!HeaderEn, PKT_EXT_CFG_HDR_LEN_EXIST));
;;;986    
;;;987        P_ASSERT(
;;;988            PAN216_WritePageRegBits(PAN216_PAGE0, PKT_EXT_CFG, HeaderLen, PKT_EXT_CFG_HDR_LEN_NUMB));
;;;989    
;;;990        return PAN216_OK;
;;;991    }
;;;992    
;;;993    PAN216_Err_t PAN216_WriteNordicPktHeader(uint8_t Header0, uint8_t Header1,
;;;994                                             uint8_t Length) // ånordicåå¤´åå®¹
;;;995    {
;;;996        P_ASSERT(PAN216_WritePageReg(PAN216_PAGE0, TXHDR0_CFG, Header0));
;;;997        P_ASSERT(PAN216_WritePageReg(PAN216_PAGE0, TXHDR1_CFG, Header1));
;;;998        P_ASSERT(PAN216_WritePageReg(PAN216_PAGE0, TXPLLEN_CFG, Length));
;;;999    
;;;1000       return PAN216_OK;
;;;1001   }
;;;1002   
;;;1003   PAN216_Err_t PAN216_SetS2S8Mode(PAN216_S2S8Mode_t mode)
;;;1004   {
;;;1005       if (mode == PAN216_PRIMODE_DIS)
;;;1006       {
;;;1007           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TRXMODE_CFG, 1, TRXMODE_CFG_W_PRE_SYNC_EN));
;;;1008           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, PKT_EXT_CFG, 0, PKT_EXT_CFG_PRI_CI_MODE));
;;;1009           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, PKT_EXT_CFG, 0, PKT_EXT_CFG_PRI_TX_FEC));
;;;1010           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, PKT_EXT_CFG, 0, PKT_EXT_CFG_PRI_RX_FEC));
;;;1011           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE1, 0x0B, 0, BIT5));
;;;1012           _gS2S8Mode = PAN216_PRIMODE_DIS;
;;;1013       }
;;;1014       else if (mode == PAN216_PRIMODE_S2)
;;;1015       {
;;;1016           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TRXMODE_CFG, 0, TRXMODE_CFG_W_PRE_SYNC_EN));
;;;1017           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, PKT_EXT_CFG, 1, PKT_EXT_CFG_PRI_CI_MODE));
;;;1018           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, PKT_EXT_CFG, 1, PKT_EXT_CFG_PRI_TX_FEC));
;;;1019           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, PKT_EXT_CFG, 1, PKT_EXT_CFG_PRI_RX_FEC));
;;;1020           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE1, 0x0B, 1, BIT5));
;;;1021           _gS2S8Mode = PAN216_PRIMODE_S2;
;;;1022       }
;;;1023       else if (mode == PAN216_PRIMODE_S8)
;;;1024       {
;;;1025           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, TRXMODE_CFG, 0, TRXMODE_CFG_W_PRE_SYNC_EN));
;;;1026           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, PKT_EXT_CFG, 0, PKT_EXT_CFG_PRI_CI_MODE));
;;;1027           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, PKT_EXT_CFG, 1, PKT_EXT_CFG_PRI_TX_FEC));
;;;1028           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, PKT_EXT_CFG, 1, PKT_EXT_CFG_PRI_RX_FEC));
;;;1029           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE1, 0x0B, 1, BIT5));
;;;1030           _gS2S8Mode = PAN216_PRIMODE_S8;
;;;1031       }
;;;1032   
;;;1033       return PAN216_OK;
;;;1034   }
;;;1035   
;;;1036   /**
;;;1037    * @brief Set the PAN216 IRQ pin mux
;;;1038    *
;;;1039    * @param Mux
;;;1040    * @return PAN216_Err_t
;;;1041    */
;;;1042   PAN216_Err_t PAN216_setIRQPinMux(PAN216_IRQPinMux_t Mux)
;;;1043   {
;;;1044       if (PAN216_IRQ_PINMUX_PACTRL == Mux)
;;;1045       {
;;;1046           P_ASSERT(PAN216_WriteRegBits(0x6C, 1, BIT6));
;;;1047       }
;;;1048       else
;;;1049       {
;;;1050           P_ASSERT(PAN216_WriteRegBits(0x6C, 0, BIT6));
;;;1051           P_ASSERT(PAN216_WriteRegBits(0x45, 3, 0x0C)); // SEL 16M OCLK
;;;1052       }
;;;1053   
;;;1054       P_ASSERT(PAN216_WriteRegBits(0x45, Mux, 0x03));
;;;1055   
;;;1056       return PAN216_OK;
;;;1057   }
;;;1058   
;;;1059   /**
;;;1060    * @brief Set the Chip frame format type mode and endian type of PAN216 transceiver
;;;1061    *
;;;1062    * @param chipMode supported chip format frame type
;;;1063    *          - PAN216_CHIPMODE_XN297
;;;1064    *          - ...
;;;1065    *          - PAN216_CHIPMODE_BLE
;;;1066    * @return PAN216_Err_t
;;;1067    */
;;;1068   PAN216_Err_t PAN216_SetChipMode(PAN216_ChipMode_t chipMode, PAN216_Endian_t endian,
;;;1069                                   bool crcSkipAddr)
;;;1070   {
;;;1071       _gChipMode = chipMode;
;;;1072   
;;;1073       switch (chipMode)
;;;1074       {
;;;1075       case PAN216_CHIPMODE_XN297:
;;;1076           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, 0, WMODE_CFG0_CHIP_MODE));
;;;1077           P_ASSERT(PAN216_SetEndian(PAN216_ENDIAN_BIG));
;;;1078           P_ASSERT(PAN216_CrcSkipAddr(false));
;;;1079           P_ASSERT(PAN216_WhiteSkipAddr(false));
;;;1080           P_ASSERT(PAN216_SetWhiteInitVal(0x7F));
;;;1081           break;
;;;1082   
;;;1083   case PAN216_CHIPMODE_FS01:
;;;1084           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, 1, WMODE_CFG0_CHIP_MODE));
;;;1085           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, 0, WMODE_CFG0_NORDIC_ENHANCE));
;;;1086           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, REG_P0_0X6F, 0, REG_P0_0X6F_I_NDC_PREAMBLE_SEL)); 
;;;1087           P_ASSERT(PAN216_SetEndian(PAN216_ENDIAN_BIG));
;;;1088           P_ASSERT(PAN216_CrcSkipAddr(false));
;;;1089           P_ASSERT(PAN216_WhiteSkipAddr(false));
;;;1090           P_ASSERT(PAN216_SetWhiteInitVal(0x7F));
;;;1091           break;
;;;1092   
;;;1093       case PAN216_CHIPMODE_FS32:
;;;1094           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, 1, WMODE_CFG0_CHIP_MODE));
;;;1095           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, 1, WMODE_CFG0_NORDIC_ENHANCE));
;;;1096           P_ASSERT(PAN216_WritePageRegBits(
;;;1097               PAN216_PAGE0, REG_P0_0X6F, 1,
;;;1098               REG_P0_0X6F_I_NDC_PREAMBLE_SEL));
;;;1099           P_ASSERT(PAN216_SetEndian(endian));
;;;1100           P_ASSERT(PAN216_CrcSkipAddr(crcSkipAddr));
;;;1101           P_ASSERT(PAN216_WhiteSkipAddr(true));
;;;1102           P_ASSERT(PAN216_SetWhiteInitVal(0x7F));
;;;1103           break;
;;;1104       case PAN216_CHIPMODE_BLE:
;;;1105           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, 1, WMODE_CFG0_CHIP_MODE));
;;;1106           P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG0, 1,
;;;1107                                            WMODE_CFG0_NORDIC_ENHANCE));
;;;1108           P_ASSERT(PAN216_SetEndian(PAN216_ENDIAN_LITTLE));
;;;1109           P_ASSERT(PAN216_CrcSkipAddr(true));
;;;1110           P_ASSERT(PAN216_WhiteSkipAddr(true));
;;;1111   
;;;1112           break;
;;;1113       default:
;;;1114           return PAN216_ERR;
;;;1115       }
;;;1116   
;;;1117       // when recv error occurs, the chip will enter rx mode automatically
;;;1118       P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, WMODE_CFG1, 1, WMODE_CFG1_RX_GOON));
;;;1119   
;;;1120       return PAN216_OK;
;;;1121   }
;;;1122   
;;;1123   PAN216_Err_t PAN216_SetUpConfig(RFConfig_t *pCfg)
;;;1124   {
        0x00001844:    b5f8        ..      PUSH     {r3-r7,lr}
        0x00001846:    4605        .F      MOV      r5,r0
        0x00001848:    3520         5      ADDS     r5,r5,#0x20
;;; ..\..\..\..\radio\pan216_ext.c (1124)
        0x0000184a:    4604        .F      MOV      r4,r0
;;;1125       P_ASSERT(
        0x0000184c:    7daa        .}      LDRB     r2,[r5,#0x16]
        0x0000184e:    7de9        .}      LDRB     r1,[r5,#0x17]
        0x00001850:    7900        .y      LDRB     r0,[r0,#4]
        0x00001852:    f7fffe67    ..g.    BL       PAN216_SetChipMode ; 0x1524
        0x00001856:    2800        .(      CMP      r0,#0
        0x00001858:    d172        r.      BNE      0x1940 ; PAN216_SetUpConfig + 252
;;;1126           PAN216_SetChipMode((PAN216_ChipMode_t)pCfg->ChipMode, pCfg->Endian, pCfg->crcSkipAddr));
;;;1127       P_ASSERT(PAN216_SetChannel(pCfg->Channel));
        0x0000185a:    7820         x      LDRB     r0,[r4,#0]
        0x0000185c:    f7fffe5c    ..\.    BL       PAN216_SetChannel ; 0x1518
        0x00001860:    2800        .(      CMP      r0,#0
        0x00001862:    d16d        m.      BNE      0x1940 ; PAN216_SetUpConfig + 252
;;;1128       P_ASSERT(PAN216_SetDataRate((PAN216_DataRate_t)pCfg->DataRate));
        0x00001864:    78a0        .x      LDRB     r0,[r4,#2]
        0x00001866:    f7fffef3    ....    BL       PAN216_SetDataRate ; 0x1650
        0x0000186a:    2800        .(      CMP      r0,#0
        0x0000186c:    d168        h.      BNE      0x1940 ; PAN216_SetUpConfig + 252
;;;1129       P_ASSERT(PAN216_SetCrcScheme((PAN216_Crc_t)pCfg->Crc));
        0x0000186e:    78e0        .x      LDRB     r0,[r4,#3]
        0x00001870:    f7fffee0    ....    BL       PAN216_SetCrcScheme ; 0x1634
        0x00001874:    2800        .(      CMP      r0,#0
        0x00001876:    d163        c.      BNE      0x1940 ; PAN216_SetUpConfig + 252
;;;1130       P_ASSERT(PAN216_SetTxPayloadLen(pCfg->TxLen));
        0x00001878:    7c68        h|      LDRB     r0,[r5,#0x11]
        0x0000187a:    f7ffffa7    ....    BL       PAN216_SetTxPayloadLen ; 0x17cc
        0x0000187e:    2800        .(      CMP      r0,#0
        0x00001880:    d15e        ^.      BNE      0x1940 ; PAN216_SetUpConfig + 252
;;;1131       P_ASSERT(PAN216_SetRxPayloadLen(pCfg->RxLen));
        0x00001882:    7ca8        .|      LDRB     r0,[r5,#0x12]
        0x00001884:    f7ffff75    ..u.    BL       PAN216_SetRxPayloadLen ; 0x1772
        0x00001888:    2800        .(      CMP      r0,#0
        0x0000188a:    d159        Y.      BNE      0x1940 ; PAN216_SetUpConfig + 252
;;;1132       P_ASSERT(PAN216_SetAddrWidth((PAN216_AddrWidth_t)pCfg->TxAddrWidth));
        0x0000188c:    79a0        .y      LDRB     r0,[r4,#6]
        0x0000188e:    f7fffe1e    ....    BL       PAN216_SetAddrWidth ; 0x14ce
        0x00001892:    2800        .(      CMP      r0,#0
        0x00001894:    d154        T.      BNE      0x1940 ; PAN216_SetUpConfig + 252
;;;1133       P_ASSERT(PAN216_SetTxAddr(pCfg->TxAddr, pCfg->TxAddrWidth));
        0x00001896:    79a1        .y      LDRB     r1,[r4,#6]
        0x00001898:    1de0        ..      ADDS     r0,r4,#7
        0x0000189a:    f7ffff7d    ..}.    BL       PAN216_SetTxAddr ; 0x1798
        0x0000189e:    2800        .(      CMP      r0,#0
        0x000018a0:    d14e        N.      BNE      0x1940 ; PAN216_SetUpConfig + 252
;;;1134   
;;;1135       for (int i = 0; i < PIPE_MAX_NUM; i++)
        0x000018a2:    2600        .&      MOVS     r6,#0
;;;1136       {
;;;1137           if (pCfg->RxAddr[i].EnPipe)
        0x000018a4:    2006        .       MOVS     r0,#6
        0x000018a6:    4370        pC      MULS     r0,r6,r0
        0x000018a8:    1907        ..      ADDS     r7,r0,r4
        0x000018aa:    7b78        x{      LDRB     r0,[r7,#0xd]
        0x000018ac:    2800        .(      CMP      r0,#0
        0x000018ae:    d00d        ..      BEQ      0x18cc ; PAN216_SetUpConfig + 136
;;;1138           {
;;;1139               P_ASSERT(PAN216_EnableRxPipe((PAN216_Pipe_t)i));
        0x000018b0:    b2f0        ..      UXTB     r0,r6
        0x000018b2:    f7fffbc6    ....    BL       PAN216_EnableRxPipe ; 0x1042
        0x000018b6:    2800        .(      CMP      r0,#0
        0x000018b8:    d142        B.      BNE      0x1940 ; PAN216_SetUpConfig + 252
;;;1140               P_ASSERT(PAN216_SetRxAddr((PAN216_Pipe_t)i, pCfg->RxAddr[i].Addr, pCfg->RxAddrWidth));
        0x000018ba:    4639        9F      MOV      r1,r7
        0x000018bc:    7b22        "{      LDRB     r2,[r4,#0xc]
        0x000018be:    310e        .1      ADDS     r1,r1,#0xe
        0x000018c0:    b2f0        ..      UXTB     r0,r6
        0x000018c2:    f7ffff1d    ....    BL       PAN216_SetRxAddr ; 0x1700
;;;1141           }
;;;1142           else
;;;1143           {
;;;1144               P_ASSERT(PAN216_DisableRxPipe((PAN216_Pipe_t)i));
        0x000018c6:    2800        .(      CMP      r0,#0
        0x000018c8:    d13a        :.      BNE      0x1940 ; PAN216_SetUpConfig + 252
        0x000018ca:    e003        ..      B        0x18d4 ; PAN216_SetUpConfig + 144
        0x000018cc:    b2f0        ..      UXTB     r0,r6
        0x000018ce:    f7fffb87    ....    BL       PAN216_DisableRxPipe ; 0xfe0
        0x000018d2:    e7f8        ..      B        0x18c6 ; PAN216_SetUpConfig + 130
        0x000018d4:    1c76        v.      ADDS     r6,r6,#1
        0x000018d6:    2e06        ..      CMP      r6,#6
        0x000018d8:    dbe4        ..      BLT      0x18a4 ; PAN216_SetUpConfig + 96
;;;1145           }
;;;1146       }
;;;1147   
;;;1148       P_ASSERT(PAN216_EnableWhiten(pCfg->EnWhite));
        0x000018da:    7ce8        .|      LDRB     r0,[r5,#0x13]
        0x000018dc:    f7fffbf0    ....    BL       PAN216_EnableWhiten ; 0x10c0
        0x000018e0:    2800        .(      CMP      r0,#0
        0x000018e2:    d12d        -.      BNE      0x1940 ; PAN216_SetUpConfig + 252
;;;1149       if (pCfg->EnTxNoAck == 0)
        0x000018e4:    7d68        h}      LDRB     r0,[r5,#0x15]
        0x000018e6:    2800        .(      CMP      r0,#0
        0x000018e8:    d008        ..      BEQ      0x18fc ; PAN216_SetUpConfig + 184
        0x000018ea:    8f60        `.      LDRH     r0,[r4,#0x3a]
        0x000018ec:    f000f841    ..A.    BL       PAN216_SetWaitAckTimeout ; 0x1972
        0x000018f0:    2001        .       MOVS     r0,#1
        0x000018f2:    f7fffb94    ....    BL       PAN216_EnableFifo128bytes ; 0x101e
        0x000018f6:    2800        .(      CMP      r0,#0
        0x000018f8:    d122        ".      BNE      0x1940 ; PAN216_SetUpConfig + 252
        0x000018fa:    e00b        ..      B        0x1914 ; PAN216_SetUpConfig + 208
;;;1150       {
;;;1151           PAN216_SetTRxTransTime(pCfg->TRxDelayTimeUs);
        0x000018fc:    8f20         .      LDRH     r0,[r4,#0x38]
        0x000018fe:    f7ffff3f    ..?.    BL       PAN216_SetTRxTransTime ; 0x1780
;;;1152           PAN216_SetAutoRetrans(pCfg->AutoDelayUs, pCfg->AutoMaxCnt);
        0x00001902:    7fa9        ..      LDRB     r1,[r5,#0x1e]
        0x00001904:    8fa0        ..      LDRH     r0,[r4,#0x3c]
        0x00001906:    f7fffded    ....    BL       PAN216_SetAutoRetrans ; 0x14e4
;;;1153           PAN216_SetWaitAckTimeout(pCfg->RxTimeoutUs);
        0x0000190a:    8f60        `.      LDRH     r0,[r4,#0x3a]
        0x0000190c:    f000f831    ..1.    BL       PAN216_SetWaitAckTimeout ; 0x1972
;;;1154           P_ASSERT(PAN216_EnableFifo128bytes(false));
        0x00001910:    2000        .       MOVS     r0,#0
        0x00001912:    e7ee        ..      B        0x18f2 ; PAN216_SetUpConfig + 174
;;;1155       }
;;;1156       else
;;;1157       {
;;;1158           PAN216_SetWaitAckTimeout(pCfg->RxTimeoutUs); // us
;;;1159           P_ASSERT(PAN216_EnableFifo128bytes(true));
;;;1160       }
;;;1161       /* Enhanced parameters */
;;;1162       P_ASSERT(PAN216_SetWorkMode(pCfg->WorkMode));
        0x00001914:    7960        `y      LDRB     r0,[r4,#5]
        0x00001916:    f000f83f    ..?.    BL       PAN216_SetWorkMode ; 0x1998
        0x0000191a:    2800        .(      CMP      r0,#0
        0x0000191c:    d110        ..      BNE      0x1940 ; PAN216_SetUpConfig + 252
;;;1163       P_ASSERT(PAN216_EnableDynamicPL(pCfg->EnDPL));
        0x0000191e:    7d28        (}      LDRB     r0,[r5,#0x14]
        0x00001920:    f7fffb6b    ..k.    BL       PAN216_EnableDynamicPL ; 0xffa
        0x00001924:    2800        .(      CMP      r0,#0
        0x00001926:    d10b        ..      BNE      0x1940 ; PAN216_SetUpConfig + 252
;;;1164       P_ASSERT(PAN216_EnableTxNoAck(pCfg->EnTxNoAck));
        0x00001928:    7d68        h}      LDRB     r0,[r5,#0x15]
        0x0000192a:    f7fffb97    ....    BL       PAN216_EnableTxNoAck ; 0x105c
        0x0000192e:    2800        .(      CMP      r0,#0
        0x00001930:    d106        ..      BNE      0x1940 ; PAN216_SetUpConfig + 252
;;;1165       P_ASSERT(PAN216_RxLengthLimit(pCfg->EnRxPlLenLimit));
        0x00001932:    4625        %F      MOV      r5,r4
        0x00001934:    3540        @5      ADDS     r5,r5,#0x40
        0x00001936:    7828        (x      LDRB     r0,[r5,#0]
        0x00001938:    f7fffdab    ....    BL       PAN216_RxLengthLimit ; 0x1492
        0x0000193c:    2800        .(      CMP      r0,#0
        0x0000193e:    d001        ..      BEQ      0x1944 ; PAN216_SetUpConfig + 256
        0x00001940:    2001        .       MOVS     r0,#1
        0x00001942:    bdf8        ..      POP      {r3-r7,pc}
;;;1166   
;;;1167       PAN216_SetTxPower((PAN216_TxPower_t)pCfg->TxPower);
        0x00001944:    2001        .       MOVS     r0,#1
        0x00001946:    5620         V      LDRSB    r0,[r4,r0]
        0x00001948:    f7ffff4a    ..J.    BL       PAN216_SetTxPower ; 0x17e0
;;;1168   
;;;1169       if (pCfg->WorkMode == PAN216_WORKMODE_ENHANCE)
        0x0000194c:    7960        `y      LDRB     r0,[r4,#5]
        0x0000194e:    2801        .(      CMP      r0,#1
        0x00001950:    d002        ..      BEQ      0x1958 ; PAN216_SetUpConfig + 276
        0x00001952:    2800        .(      CMP      r0,#0
        0x00001954:    d005        ..      BEQ      0x1962 ; PAN216_SetUpConfig + 286
        0x00001956:    e00a        ..      B        0x196e ; PAN216_SetUpConfig + 298
;;;1170       {
;;;1171           PAN216_SetTxMode(PAN216_TX_MODE_SINGLE);
        0x00001958:    2000        .       MOVS     r0,#0
        0x0000195a:    f7ffff24    ..$.    BL       PAN216_SetTxMode ; 0x17a6
;;;1172           PAN216_SetRxMode(PAN216_RX_MODE_SINGLE);
        0x0000195e:    2000        .       MOVS     r0,#0
        0x00001960:    e003        ..      B        0x196a ; PAN216_SetUpConfig + 294
;;;1173       }
;;;1174       else if (pCfg->WorkMode == PAN216_WORKMODE_NORMAL)
;;;1175       {
;;;1176           PAN216_SetTxMode(pCfg->TxMode);
        0x00001962:    7868        hx      LDRB     r0,[r5,#1]
        0x00001964:    f7ffff1f    ....    BL       PAN216_SetTxMode ; 0x17a6
;;;1177           PAN216_SetRxMode(pCfg->RxMode);
        0x00001968:    78a8        .x      LDRB     r0,[r5,#2]
        0x0000196a:    f7fffee8    ....    BL       PAN216_SetRxMode ; 0x173e
;;;1178       }
;;;1179   
;;;1180       return PAN216_OK;
        0x0000196e:    2000        .       MOVS     r0,#0
;;;1181   }
        0x00001970:    bdf8        ..      POP      {r3-r7,pc}
    i.PAN216_SetWaitAckTimeout
    PAN216_SetWaitAckTimeout
        0x00001972:    b508        ..      PUSH     {r3,lr}
;;; ..\..\..\..\radio\pan216_ext.c (822)
        0x00001974:    4669        iF      MOV      r1,sp
        0x00001976:    7008        .p      STRB     r0,[r1,#0]
        0x00001978:    0a00        ..      LSRS     r0,r0,#8
        0x0000197a:    7048        Hp      STRB     r0,[r1,#1]
;;;823            (uint8_t)(AckTimeoutUs & 0xff),
;;;824            (uint8_t)((AckTimeoutUs >> 8) & 0xff),
;;;825        };
;;;826    
;;;827        return PAN216_WritePageRegs(PAN216_PAGE0, RXTIMEOUTL_CFG, time, 2);
        0x0000197c:    2302        .#      MOVS     r3,#2
        0x0000197e:    466a        jF      MOV      r2,sp
        0x00001980:    212b        +!      MOVS     r1,#0x2b
        0x00001982:    2000        .       MOVS     r0,#0
        0x00001984:    f000f881    ....    BL       PAN216_WritePageRegs ; 0x1a8a
;;;828    }
        0x00001988:    bd08        ..      POP      {r3,pc}
    i.PAN216_SetWhiteInitVal
    PAN216_SetWhiteInitVal
;;; ..\..\..\..\radio\pan216.c
;;;614    {
        0x0000198a:    b510        ..      PUSH     {r4,lr}
;;;615        return PAN216_WriteRegBits(SCR_CFG, val, SCR_CFG_SCR_INI);
        0x0000198c:    4601        .F      MOV      r1,r0
        0x0000198e:    227f        ."      MOVS     r2,#0x7f
        0x00001990:    201a        .       MOVS     r0,#0x1a
        0x00001992:    f000f8c7    ....    BL       PAN216_WriteRegBits ; 0x1b24
;;;616    }
        0x00001996:    bd10        ..      POP      {r4,pc}
    i.PAN216_SetWorkMode
    PAN216_SetWorkMode
;;; ..\..\..\..\radio\pan216_ext.c
;;;563    {
        0x00001998:    b510        ..      PUSH     {r4,lr}
        0x0000199a:    2800        .(      CMP      r0,#0
;;; ..\..\..\..\radio\pan216_ext.c (563)
        0x0000199c:    d002        ..      BEQ      0x19a4 ; PAN216_SetWorkMode + 12
;;;564    
;;;565        switch (Mode)
        0x0000199e:    2801        .(      CMP      r0,#1
        0x000019a0:    d110        ..      BNE      0x19c4 ; PAN216_SetWorkMode + 44
        0x000019a2:    e001        ..      B        0x19a8 ; PAN216_SetWorkMode + 16
;;;566        {
;;;567        case PAN216_WORKMODE_NORMAL:
;;;568            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1,
        0x000019a4:    220c        ."      MOVS     r2,#0xc
        0x000019a6:    e007        ..      B        0x19b8 ; PAN216_SetWorkMode + 32
        0x000019a8:    2208        ."      MOVS     r2,#8
        0x000019aa:    4611        .F      MOV      r1,r2
        0x000019ac:    2000        .       MOVS     r0,#0
        0x000019ae:    f7fffe9a    ....    BL       PAN216_SetRegBits ; 0x16e6
        0x000019b2:    2800        .(      CMP      r0,#0
        0x000019b4:    d106        ..      BNE      0x19c4 ; PAN216_SetWorkMode + 44
        0x000019b6:    2204        ."      MOVS     r2,#4
        0x000019b8:    2108        .!      MOVS     r1,#8
        0x000019ba:    2000        .       MOVS     r0,#0
        0x000019bc:    f7fffd5c    ..\.    BL       PAN216_ResetRegBits ; 0x1478
        0x000019c0:    2800        .(      CMP      r0,#0
        0x000019c2:    d000        ..      BEQ      0x19c6 ; PAN216_SetWorkMode + 46
;;;569                                         WMODE_CFG1_NORMAL_M1 | WMODE_CFG1_ENHANCE));
;;;570            break;
;;;571        case PAN216_WORKMODE_ENHANCE:
;;;572            P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_ENHANCE));
;;;573            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;574            break;
;;;575        default:
;;;576            return PAN216_ERR;
        0x000019c4:    2001        .       MOVS     r0,#1
;;;577        }
;;;578    
;;;579        return PAN216_OK;
;;;580    }
        0x000019c6:    bd10        ..      POP      {r4,pc}
    i.PAN216_WhiteSkipAddr
    PAN216_WhiteSkipAddr
;;;581    
;;;582    PAN216_Err_t PAN216_GetChipMode(PAN216_ChipMode_t *chipMode)
;;;583    {
;;;584        *chipMode = (PAN216_ChipMode_t)_gChipMode;
;;;585        return PAN216_OK;
;;;586    }
;;;587    
;;;588    /**
;;;589     * @brief  This function set noack for tx
;;;590     * @param  NewState: ENABLE/DISABLE
;;;591     * @return Result of the operation
;;;592     *         - PAN216_OK
;;;593     *         - PAN216_ERR
;;;594     * @note  This function is called after PAN216_SetWorkMode
;;;595     */
;;;596    PAN216_Err_t PAN216_EnableTxNoAck(uint8_t NewState)
;;;597    {
;;;598        uint8_t modeCfg1 = PAN216_ReadPageReg(PAN216_PAGE0, WMODE_CFG1);
;;;599    
;;;600        if (modeCfg1 & WMODE_CFG1_ENHANCE)
;;;601        {
;;;602            if (NewState)
;;;603            {
;;;604                P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_TX_NOACK_EN));
;;;605            }
;;;606            else
;;;607            {
;;;608                P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_TX_NOACK_EN));
;;;609            }
;;;610            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;611        }
;;;612        else
;;;613        {
;;;614            if (NewState)
;;;615            {
;;;616                P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;617            }
;;;618            else
;;;619            {
;;;620                P_ASSERT(PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG1, WMODE_CFG1_NORMAL_M1));
;;;621            }
;;;622            P_ASSERT(PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_TX_NOACK_EN));
;;;623        }
;;;624    
;;;625        return PAN216_OK;
;;;626    }
;;;627    
;;;628    /**
;;;629     * @brief After receiving a packet, reads the TxNoack bit of a enhanced shockburst packet
;;;630     *
;;;631     * @return uint8_t  1 : rx need ack
;;;632     *                  0 : rx need no ack
;;;633     */
;;;634    uint8_t PAN216_ReadTxNoackBit(void)
;;;635    {
;;;636        return !(PAN216_ReadReg(0x7D) & BIT6);
;;;637    }
;;;638    
;;;639    PAN216_Err_t PAN216_SetAckPipe(uint8_t pipe)
;;;640    {
;;;641        if (pipe > 5)
;;;642        {
;;;643            return PAN216_ERR;
;;;644        }
;;;645    
;;;646        P_ASSERT(PAN216_WritePageRegBits(PAN216_PAGE0, 0x6F, pipe, 0x07));
;;;647    
;;;648        return PAN216_OK;
;;;649    }
;;;650    
;;;651    /**
;;;652     * @brief Enable CRC calculation for address field in PAN216.
;;;653     *
;;;654     * This function allows enabling or disabling
;;;655     *  CRC calculation for the address field in PAN216.
;;;656     *
;;;657     * @note By default, address field is not included in CRC calculation.
;;;658     *
;;;659     * @param[in] NewState Boolean value indicating whether to enable or disable CRC calculation for
;;;660     * address field.
;;;661     *
;;;662     * @return Result of the operation:
;;;663     *         - PAN216_OK
;;;664     *         - PAN216_ERR
;;;665     */
;;;666    PAN216_Err_t PAN216_CrcSkipAddr(bool exclude)
;;;667    {
;;;668        if (exclude)
;;;669        {
;;;670            return PAN216_SetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_ACCADDR_CRC_DIS);
;;;671        }
;;;672        else
;;;673        {
;;;674            return PAN216_ResetRegBits(PAN216_PAGE0, WMODE_CFG0, WMODE_CFG0_ACCADDR_CRC_DIS);
;;;675        }
;;;676    }
;;;677    
;;;678    /**
;;;679     * @brief whiten(scramble) configurations
;;;680     * @param addr_excluded  whiten exclude access address(already include header, payload, crc)
;;;681     * @param initital_phase initital whiten phase
;;;682     *        - channel 37: 0x53
;;;683              - channel 38: 0x33
;;;684              - channel 39: 0x73
;;;685     * @return PAN216_Err_t
;;;686     */
;;;687    PAN216_Err_t PAN216_WhiteSkipAddr(bool addr_excluded)
;;;688    {
        0x000019c8:    b510        ..      PUSH     {r4,lr}
        0x000019ca:    2800        .(      CMP      r0,#0
;;; ..\..\..\..\radio\pan216_ext.c (688)
        0x000019cc:    d005        ..      BEQ      0x19da ; PAN216_WhiteSkipAddr + 18
;;;689        PAN216_Err_t ret;
;;;690    
;;;691        if (addr_excluded)
;;;692        {
;;;693            ret = PAN216_SetRegBits(PAN216_PAGE0, SCR_CFG, SCR_CFG_ACCADDR_SCR_DIS);
        0x000019ce:    2280        ."      MOVS     r2,#0x80
        0x000019d0:    211a        .!      MOVS     r1,#0x1a
        0x000019d2:    2000        .       MOVS     r0,#0
        0x000019d4:    f7fffe87    ....    BL       PAN216_SetRegBits ; 0x16e6
        0x000019d8:    bd10        ..      POP      {r4,pc}
;;;694        }
;;;695        else
;;;696        {
;;;697            ret = PAN216_ResetRegBits(PAN216_PAGE0, SCR_CFG, SCR_CFG_ACCADDR_SCR_DIS);
        0x000019da:    2280        ."      MOVS     r2,#0x80
        0x000019dc:    211a        .!      MOVS     r1,#0x1a
        0x000019de:    2000        .       MOVS     r0,#0
        0x000019e0:    f7fffd4a    ..J.    BL       PAN216_ResetRegBits ; 0x1478
;;;698        }
;;;699    
;;;700        return ret;
;;;701    }
        0x000019e4:    bd10        ..      POP      {r4,pc}
        0x000019e6:    0000        ..      MOVS     r0,r0
    i.PAN216_Write
    PAN216_Write
;;; ..\..\..\..\radio\pan216_reg.c
;;;58     {
        0x000019e8:    b5f8        ..      PUSH     {r3-r7,lr}
        0x000019ea:    4c0b        .L      LDR      r4,[pc,#44] ; [0x1a18] = 0x20000010
;;; ..\..\..\..\radio\pan216_reg.c (58)
        0x000019ec:    4605        .F      MOV      r5,r0
        0x000019ee:    68e0        .h      LDR      r0,[r4,#0xc]
        0x000019f0:    4616        .F      MOV      r6,r2
        0x000019f2:    460f        .F      MOV      r7,r1
;;;59     #if (INTERFACE_MODE == USE_I2C)
;;;60         Pan216_Funs.i2c_write_buf(addr, buffer, len);
;;;61     #else
;;;62         Pan216_Funs.spi_cs_low();
        0x000019f4:    4780        .G      BLX      r0
;;;63         Pan216_Funs.spi_writebyte(((addr << 1) | 0x01));
        0x000019f6:    0068        h.      LSLS     r0,r5,#1
        0x000019f8:    1c40        @.      ADDS     r0,r0,#1
        0x000019fa:    6821        !h      LDR      r1,[r4,#0]
        0x000019fc:    b2c0        ..      UXTB     r0,r0
        0x000019fe:    4788        .G      BLX      r1
;;;64         for (int i = 0; i < len; i++)
        0x00001a00:    2500        .%      MOVS     r5,#0
        0x00001a02:    e003        ..      B        0x1a0c ; PAN216_Write + 36
        0x00001a04:    6821        !h      LDR      r1,[r4,#0]
        0x00001a06:    5d78        x]      LDRB     r0,[r7,r5]
        0x00001a08:    4788        .G      BLX      r1
        0x00001a0a:    1c6d        m.      ADDS     r5,r5,#1
        0x00001a0c:    42b5        .B      CMP      r5,r6
        0x00001a0e:    dbf9        ..      BLT      0x1a04 ; PAN216_Write + 28
;;;65         {
;;;66             Pan216_Funs.spi_writebyte(buffer[i]);
;;;67         }
;;;68         Pan216_Funs.spi_cs_high();
        0x00001a10:    68a0        .h      LDR      r0,[r4,#8]
        0x00001a12:    4780        .G      BLX      r0
;;;69     #endif
;;;70     }
        0x00001a14:    bdf8        ..      POP      {r3-r7,pc}
    $d
        0x00001a16:    0000        ..      DCW    0
        0x00001a18:    20000010    ...     DCD    536870928
    $t
    i.PAN216_WritePageReg
    PAN216_WritePageReg
;;;71     
;;;72     /**************************************************************************/
;;;73     /*                         Basic Register Operation                       */
;;;74     /**************************************************************************/
;;;75     
;;;76     /**
;;;77      * @brief Read one byte from the register in the current page
;;;78      * @param[in] addr Register address to read
;;;79      * @return Value read from the register
;;;80      */
;;;81     uint8_t PAN216_ReadReg(uint8_t addr)
;;;82     {
;;;83         uint8_t tmp;
;;;84     
;;;85         PAN216_Read(addr, &tmp, 1);
;;;86     
;;;87         return tmp;
;;;88     }
;;;89     
;;;90     /**
;;;91      * @brief Write to the global register in the current page and check
;;;92      * @param[in] addr Register address to write
;;;93      * @param[in] value Value to write to the register
;;;94      * @return Result
;;;95      */
;;;96     PAN216_Err_t PAN216_WriteReg(uint8_t addr, uint8_t value)
;;;97     {
;;;98         PAN216_Write(addr, &value, 1);
;;;99     
;;;100    #if SPI_CHECK_WRITE
;;;101        uint8_t tmp;
;;;102        tmp = PAN216_ReadReg(addr);
;;;103        if (tmp != value)
;;;104        {
;;;105            printf("write reg [readback:0x%02x] writeval:0x%02x error \r\n ", tmp, value);
;;;106            return PAN216_ERR;
;;;107        }
;;;108    #endif
;;;109    
;;;110        return PAN216_OK;
;;;111    }
;;;112    
;;;113    /**
;;;114     * @brief Write to the global register in the current page without check
;;;115     * @param[in] addr Register address to write
;;;116     * @param[in] value Value to write to the register
;;;117     * @return Result
;;;118     */
;;;119    PAN216_Err_t PAN216_WriteRegUnchecked(uint8_t addr, uint8_t value)
;;;120    {
;;;121        PAN216_Write(addr, &value, 1);
;;;122        return PAN216_OK;
;;;123    }
;;;124    
;;;125    /**
;;;126     * @brief Write continuous register values (buffer) in a specific address page
;;;127     * @param[in] addr Register start address
;;;128     * @param[in] buffer Values to write
;;;129     * @param[in] len Buffer length
;;;130     * @return Result
;;;131     */
;;;132    PAN216_Err_t PAN216_WriteRegs(uint8_t addr, uint8_t *buffer, uint8_t len)
;;;133    {
;;;134        PAN216_Write(addr, buffer, len);
;;;135        return PAN216_OK;
;;;136    }
;;;137    
;;;138    /**
;;;139     * @brief This function reads more than one byte from the register
;;;140     *
;;;141     * @param addr Register address
;;;142     * @param buffer Buffer provided for data from the register
;;;143     * @param len Number of bytes to read
;;;144     * @return PAN216_Err_t
;;;145     */
;;;146    PAN216_Err_t PAN216_ReadRegs(uint8_t addr, uint8_t *buffer, uint8_t len)
;;;147    {
;;;148        PAN216_Read(addr, buffer, len);
;;;149        return PAN216_OK;
;;;150    }
;;;151    
;;;152    /**
;;;153     * @brief Transfer data to the data FIFO on the chip
;;;154     * @param[in] addr Register address to write
;;;155     * @param[in] buffer Buffer provided for data to write to the register
;;;156     * @param[in] size Number of bytes to write
;;;157     * @return Result
;;;158     */
;;;159    PAN216_Err_t PAN216_WriteFifo(uint8_t addr, uint8_t *buffer, uint8_t size)
;;;160    {
;;;161        return PAN216_WriteRegs(addr, buffer, size);
;;;162    }
;;;163    
;;;164    /**
;;;165     * @brief Read more than one byte from the register
;;;166     * @param[in] addr Register address to read
;;;167     * @param[in] buffer Buffer provided for data from the register
;;;168     * @param[in] size Number of bytes to read
;;;169     * @return Result
;;;170     */
;;;171    PAN216_Err_t PAN216_ReadFifo(uint8_t addr, uint8_t *buffer, uint8_t size)
;;;172    {
;;;173        return PAN216_ReadRegs(addr, buffer, size);
;;;174    }
;;;175    
;;;176    /**
;;;177     * @brief This function writes bits to the register by mask
;;;178     *
;;;179     * @param addr Register address
;;;180     * @param val Bits value
;;;181     * @param mask Bits mask
;;;182     * @return PAN216_Err_t
;;;183     */
;;;184    PAN216_Err_t PAN216_WriteRegBits(uint8_t addr, uint8_t val, uint8_t mask)
;;;185    {
;;;186        uint8_t tmp;
;;;187        PAN216_Err_t ret;
;;;188        uint8_t shift = GET_SHIFT(mask);
;;;189    
;;;190        val <<= shift;
;;;191        if (val & (~mask))
;;;192        {
;;;193            printf("val:0x%02x mask:0x%02x error \r\n", val, mask);
;;;194            return PAN216_ERR;
;;;195        }
;;;196        val &= mask;
;;;197    
;;;198        tmp = PAN216_ReadReg(addr);
;;;199        ret = PAN216_WriteReg(addr, (tmp & (~mask)) | val);
;;;200    
;;;201        return ret;
;;;202    }
;;;203    
;;;204    /**************************************************************************/
;;;205    /*                         Page Register Operation                        */
;;;206    /**************************************************************************/
;;;207    
;;;208    /**
;;;209     * @brief Switch page
;;;210     * @param[in] page Page to switch
;;;211     * @return Result
;;;212     */
;;;213    PAN216_Err_t PAN216_SetPage(uint8_t page)
;;;214    {
;;;215        if (PAN216_OK != PAN216_WriteReg(PAGE_CFG, page))
;;;216        {
;;;217            return PAN216_ERR;
;;;218        }
;;;219    
;;;220        return PAN216_OK;
;;;221    }
;;;222    
;;;223    /**
;;;224     * @brief This function writes a value to the register in a specific page
;;;225     * @param[in] page The page of the register
;;;226     * @param[in] addr Register address
;;;227     * @param[in] value Value to write
;;;228     * @return Result
;;;229     */
;;;230    PAN216_Err_t PAN216_WritePageReg(uint8_t page, uint8_t addr, uint8_t value)
;;;231    {
        0x00001a1c:    b5f8        ..      PUSH     {r3-r7,lr}
        0x00001a1e:    4605        .F      MOV      r5,r0
        0x00001a20:    4616        .F      MOV      r6,r2
        0x00001a22:    460f        .F      MOV      r7,r1
;;;232        uint8_t original_page;
;;;233    
;;;234        original_page = PAN216_ReadReg(PAGE_CFG);
        0x00001a24:    2000        .       MOVS     r0,#0
        0x00001a26:    f7fffd1a    ....    BL       PAN216_ReadReg ; 0x145e
        0x00001a2a:    4604        .F      MOV      r4,r0
;;;235        if (page != original_page)
        0x00001a2c:    42a5        .B      CMP      r5,r4
        0x00001a2e:    d004        ..      BEQ      0x1a3a ; PAN216_WritePageReg + 30
;;;236        {
;;;237            P_ASSERT(PAN216_SetPage(page));
        0x00001a30:    4628        (F      MOV      r0,r5
        0x00001a32:    f7fffe4f    ..O.    BL       PAN216_SetPage ; 0x16d4
        0x00001a36:    2800        .(      CMP      r0,#0
        0x00001a38:    d10c        ..      BNE      0x1a54 ; PAN216_WritePageReg + 56
;;;238        }
;;;239        P_ASSERT(PAN216_WriteReg(addr, value));
        0x00001a3a:    4631        1F      MOV      r1,r6
        0x00001a3c:    4638        8F      MOV      r0,r7
        0x00001a3e:    f000f83f    ..?.    BL       PAN216_WriteReg ; 0x1ac0
        0x00001a42:    2800        .(      CMP      r0,#0
        0x00001a44:    d106        ..      BNE      0x1a54 ; PAN216_WritePageReg + 56
;;;240        if (page != original_page)
        0x00001a46:    42a5        .B      CMP      r5,r4
        0x00001a48:    d006        ..      BEQ      0x1a58 ; PAN216_WritePageReg + 60
;;;241        {
;;;242            P_ASSERT(PAN216_SetPage(original_page));
        0x00001a4a:    4620         F      MOV      r0,r4
        0x00001a4c:    f7fffe42    ..B.    BL       PAN216_SetPage ; 0x16d4
        0x00001a50:    2800        .(      CMP      r0,#0
        0x00001a52:    d001        ..      BEQ      0x1a58 ; PAN216_WritePageReg + 60
        0x00001a54:    2001        .       MOVS     r0,#1
        0x00001a56:    bdf8        ..      POP      {r3-r7,pc}
;;;243        }
;;;244    
;;;245        return PAN216_OK;
        0x00001a58:    2000        .       MOVS     r0,#0
;;;246    }
        0x00001a5a:    bdf8        ..      POP      {r3-r7,pc}
    i.PAN216_WritePageRegBits
    PAN216_WritePageRegBits
;;;247    
;;;248    /**
;;;249     * @brief This function writes a value to the register in a specific page without check
;;;250     *
;;;251     * @param page Register page
;;;252     * @param addr Register address
;;;253     * @param value Register value
;;;254     * @return PAN216_Err_t
;;;255     */
;;;256    PAN216_Err_t PAN216_WritePageRegUnchecked(uint8_t page, uint8_t addr, uint8_t value)
;;;257    {
;;;258        uint8_t original_page;
;;;259    
;;;260        original_page = PAN216_ReadReg(PAGE_CFG);
;;;261        if (page != original_page)
;;;262        {
;;;263            PAN216_SetPage(page);
;;;264        }
;;;265        PAN216_Write(addr, &value, 1);
;;;266        if (page != original_page)
;;;267        {
;;;268            PAN216_SetPage(original_page);
;;;269        }
;;;270    
;;;271        return PAN216_OK;
;;;272    }
;;;273    
;;;274    /**
;;;275     * @brief Read a value from the register in a specific page
;;;276     * @param[in] page The page of the register
;;;277     * @param[in] addr Register address
;;;278     * @return Success (register value) or failure
;;;279     */
;;;280    uint8_t PAN216_ReadPageReg(uint8_t page, uint8_t addr)
;;;281    {
;;;282        uint8_t value;
;;;283        uint8_t original_page;
;;;284    
;;;285        original_page = PAN216_ReadReg(PAGE_CFG);
;;;286        if (page != original_page)
;;;287        {
;;;288            PAN216_SetPage(page);
;;;289        }
;;;290        value = PAN216_ReadReg(addr);
;;;291        if (page != original_page)
;;;292        {
;;;293            PAN216_SetPage(original_page);
;;;294        }
;;;295    
;;;296        return value;
;;;297    }
;;;298    
;;;299    /**
;;;300     * @brief Write continuous register values (buffer) in a specific address page
;;;301     * @param[in] page The page of the register
;;;302     * @param[in] addr Register start address
;;;303     * @param[in] buffer Values to write
;;;304     * @param[in] len Buffer length
;;;305     * @return Result
;;;306     */
;;;307    PAN216_Err_t PAN216_WritePageRegs(uint8_t page, uint8_t addr, uint8_t *buffer, uint8_t len)
;;;308    {
;;;309        uint8_t original_page;
;;;310    
;;;311        original_page = PAN216_ReadReg(PAGE_CFG);
;;;312        if (page != original_page)
;;;313        {
;;;314            PAN216_SetPage(page);
;;;315        }
;;;316        PAN216_WriteRegs(addr, buffer, len);
;;;317        if (page != original_page)
;;;318        {
;;;319            PAN216_SetPage(original_page);
;;;320        }
;;;321    
;;;322        return PAN216_OK;
;;;323    }
;;;324    
;;;325    /**
;;;326     * @brief This function reads more than one byte from the register
;;;327     *
;;;328     * @param page Page of the register
;;;329     * @param addr Register address
;;;330     * @param buffer Buffer provided for data from the register
;;;331     * @param len Number of bytes to read
;;;332     * @return PAN216_Err_t
;;;333     */
;;;334    PAN216_Err_t PAN216_ReadPageRegs(uint8_t page, uint8_t addr, uint8_t *buffer, uint8_t len)
;;;335    {
;;;336        uint8_t original_page;
;;;337    
;;;338        original_page = PAN216_ReadReg(PAGE_CFG);
;;;339        if (page != original_page)
;;;340        {
;;;341            PAN216_SetPage(page);
;;;342        }
;;;343        PAN216_Read(addr, buffer, len);
;;;344        if (page != original_page)
;;;345        {
;;;346            PAN216_SetPage(original_page);
;;;347        }
;;;348    
;;;349        return PAN216_OK;
;;;350    }
;;;351    
;;;352    /**************************************************************************/
;;;353    /*                         Register Bit Operation                         */
;;;354    /**************************************************************************/
;;;355    /**
;;;356     * @brief Write bits to the register by mask
;;;357     * @param page Page of the register
;;;358     * @param addr Register address
;;;359     * @param mask Bits mask
;;;360     * @param value Bits value
;;;361     * @return PAN216_Err_t
;;;362     */
;;;363    PAN216_Err_t PAN216_WriteRegWithMask(uint8_t page, uint8_t addr, uint8_t mask, uint8_t value)
;;;364    {
;;;365        uint8_t tmp;
;;;366        PAN216_Err_t ret;
;;;367    
;;;368        value &= mask;
;;;369        tmp = PAN216_ReadPageReg(page, addr);
;;;370        ret = PAN216_WritePageReg(page, addr, (tmp & (~mask)) | value);
;;;371    
;;;372        return ret;
;;;373    }
;;;374    
;;;375    /**
;;;376     * @brief This function reads the register value with mask
;;;377     *
;;;378     * @param page Register page
;;;379     * @param addr Register address
;;;380     * @param mask Bits mask
;;;381     * @return uint8_t
;;;382     */
;;;383    uint8_t PAN216_ReadRegWithMask(uint8_t page, uint8_t addr, uint8_t mask)
;;;384    {
;;;385        uint8_t tmp;
;;;386    
;;;387        tmp = PAN216_ReadPageReg(page, addr);
;;;388    
;;;389        return tmp & mask;
;;;390    }
;;;391    
;;;392    /**
;;;393     * @brief Set bits to 1
;;;394     *
;;;395     * @param page Page of the register
;;;396     * @param addr Register address
;;;397     * @param mask Bits mask
;;;398     * @return PAN216_Err_t
;;;399     */
;;;400    PAN216_Err_t PAN216_SetRegBits(uint8_t page, uint8_t addr, uint8_t mask)
;;;401    {
;;;402        uint8_t tmp;
;;;403        PAN216_Err_t ret;
;;;404    
;;;405        tmp = PAN216_ReadPageReg(page, addr);
;;;406        ret = PAN216_WritePageReg(page, addr, tmp | mask);
;;;407    
;;;408        return ret;
;;;409    }
;;;410    
;;;411    /**
;;;412     * @brief Set bits to 0
;;;413     *
;;;414     * @param page Page of the register
;;;415     * @param addr Register address
;;;416     * @param mask Bits mask
;;;417     * @return PAN216_Err_t
;;;418     */
;;;419    PAN216_Err_t PAN216_ResetRegBits(uint8_t page, uint8_t addr, uint8_t mask)
;;;420    {
;;;421        uint8_t tmp;
;;;422        PAN216_Err_t ret;
;;;423    
;;;424        tmp = PAN216_ReadPageReg(page, addr);
;;;425        ret = PAN216_WritePageReg(page, addr, tmp & (~mask));
;;;426    
;;;427        return ret;
;;;428    }
;;;429    
;;;430    /**
;;;431     * @brief Write bits to the register by mask
;;;432     * @param page Page of the register
;;;433     * @param addr Register address
;;;434     * @param mask Bits mask
;;;435     * @param value Bits value
;;;436     * @return PAN216_Err_t
;;;437     */
;;;438    PAN216_Err_t PAN216_WritePageRegBits(uint8_t page, uint8_t addr, uint8_t val, uint8_t mask)
;;;439    {
        0x00001a5c:    b5f8        ..      PUSH     {r3-r7,lr}
        0x00001a5e:    4607        .F      MOV      r7,r0
        0x00001a60:    4614        .F      MOV      r4,r2
        0x00001a62:    460e        .F      MOV      r6,r1
        0x00001a64:    461d        .F      MOV      r5,r3
;;;440        uint8_t tmp;
;;;441        PAN216_Err_t ret;
;;;442    
;;;443        uint8_t shift = GET_SHIFT(mask);
        0x00001a66:    4618        .F      MOV      r0,r3
        0x00001a68:    f000f9e5    ....    BL       __ctz ; 0x1e36
;;;444    
;;;445        val <<= shift;
        0x00001a6c:    4084        .@      LSLS     r4,r4,r0
        0x00001a6e:    b2e4        ..      UXTB     r4,r4
;;;446        val &= mask;
        0x00001a70:    402c        ,@      ANDS     r4,r4,r5
;;;447    
;;;448        tmp = PAN216_ReadPageReg(page, addr);
        0x00001a72:    4631        1F      MOV      r1,r6
        0x00001a74:    4638        8F      MOV      r0,r7
        0x00001a76:    f7fffcdb    ....    BL       PAN216_ReadPageReg ; 0x1430
;;;449        ret = PAN216_WritePageReg(page, addr, (tmp & (~mask)) | val);
        0x00001a7a:    43a8        .C      BICS     r0,r0,r5
        0x00001a7c:    4320         C      ORRS     r0,r0,r4
        0x00001a7e:    4602        .F      MOV      r2,r0
        0x00001a80:    4631        1F      MOV      r1,r6
        0x00001a82:    4638        8F      MOV      r0,r7
        0x00001a84:    f7ffffca    ....    BL       PAN216_WritePageReg ; 0x1a1c
;;;450    
;;;451        return ret;
;;;452    }
        0x00001a88:    bdf8        ..      POP      {r3-r7,pc}
    i.PAN216_WritePageRegs
    PAN216_WritePageRegs
        0x00001a8a:    b5ff        ..      PUSH     {r0-r7,lr}
        0x00001a8c:    4605        .F      MOV      r5,r0
        0x00001a8e:    b081        ..      SUB      sp,sp,#4
        0x00001a90:    461e        .F      MOV      r6,r3
        0x00001a92:    4617        .F      MOV      r7,r2
;;; ..\..\..\..\radio\pan216_reg.c (311)
        0x00001a94:    2000        .       MOVS     r0,#0
        0x00001a96:    f7fffce2    ....    BL       PAN216_ReadReg ; 0x145e
        0x00001a9a:    4604        .F      MOV      r4,r0
;;;312        if (page != original_page)
        0x00001a9c:    42a5        .B      CMP      r5,r4
        0x00001a9e:    d002        ..      BEQ      0x1aa6 ; PAN216_WritePageRegs + 28
;;;313        {
;;;314            PAN216_SetPage(page);
        0x00001aa0:    4628        (F      MOV      r0,r5
        0x00001aa2:    f7fffe17    ....    BL       PAN216_SetPage ; 0x16d4
;;;315        }
;;;316        PAN216_WriteRegs(addr, buffer, len);
        0x00001aa6:    4632        2F      MOV      r2,r6
        0x00001aa8:    4639        9F      MOV      r1,r7
        0x00001aaa:    9802        ..      LDR      r0,[sp,#8]
        0x00001aac:    f000f86f    ..o.    BL       PAN216_WriteRegs ; 0x1b8e
;;;317        if (page != original_page)
        0x00001ab0:    42a5        .B      CMP      r5,r4
        0x00001ab2:    d002        ..      BEQ      0x1aba ; PAN216_WritePageRegs + 48
;;;318        {
;;;319            PAN216_SetPage(original_page);
        0x00001ab4:    4620         F      MOV      r0,r4
        0x00001ab6:    f7fffe0d    ....    BL       PAN216_SetPage ; 0x16d4
;;;320        }
;;;321    
;;;322        return PAN216_OK;
        0x00001aba:    2000        .       MOVS     r0,#0
;;;323    }
        0x00001abc:    b005        ..      ADD      sp,sp,#0x14
        0x00001abe:    bdf0        ..      POP      {r4-r7,pc}
    i.PAN216_WriteReg
    PAN216_WriteReg
;;; ..\..\..\..\radio\pan216_reg.c (97)
        0x00001ac0:    b513        ..      PUSH     {r0,r1,r4,lr}
        0x00001ac2:    4604        .F      MOV      r4,r0
;;;98         PAN216_Write(addr, &value, 1);
        0x00001ac4:    2201        ."      MOVS     r2,#1
        0x00001ac6:    a901        ..      ADD      r1,sp,#4
        0x00001ac8:    f7ffff8e    ....    BL       PAN216_Write ; 0x19e8
;;;99     
;;;100    #if SPI_CHECK_WRITE
;;;101        uint8_t tmp;
;;;102        tmp = PAN216_ReadReg(addr);
        0x00001acc:    4620         F      MOV      r0,r4
        0x00001ace:    f7fffcc6    ....    BL       PAN216_ReadReg ; 0x145e
        0x00001ad2:    4601        .F      MOV      r1,r0
;;;103        if (tmp != value)
        0x00001ad4:    4668        hF      MOV      r0,sp
        0x00001ad6:    7902        .y      LDRB     r2,[r0,#4]
        0x00001ad8:    4291        .B      CMP      r1,r2
        0x00001ada:    d004        ..      BEQ      0x1ae6 ; PAN216_WriteReg + 38
;;;104        {
;;;105            printf("write reg [readback:0x%02x] writeval:0x%02x error \r\n ", tmp, value);
        0x00001adc:    a003        ..      ADR      r0,{pc}+0x10 ; 0x1aec
        0x00001ade:    f000f98d    ....    BL       __0printf$8 ; 0x1dfc
;;;106            return PAN216_ERR;
        0x00001ae2:    2001        .       MOVS     r0,#1
        0x00001ae4:    bd1c        ..      POP      {r2-r4,pc}
;;;107        }
;;;108    #endif
;;;109    
;;;110        return PAN216_OK;
        0x00001ae6:    2000        .       MOVS     r0,#0
;;;111    }
        0x00001ae8:    bd1c        ..      POP      {r2-r4,pc}
    $d
        0x00001aea:    0000        ..      DCW    0
        0x00001aec:    74697277    writ    DCD    1953067639
        0x00001af0:    65722065    e re    DCD    1701978213
        0x00001af4:    725b2067    g [r    DCD    1918574695
        0x00001af8:    62646165    eadb    DCD    1650745701
        0x00001afc:    3a6b6361    ack:    DCD    980116321
        0x00001b00:    30257830    0x%0    DCD    807761968
        0x00001b04:    205d7832    2x]     DCD    542996530
        0x00001b08:    74697277    writ    DCD    1953067639
        0x00001b0c:    6c617665    eval    DCD    1818326629
        0x00001b10:    2578303a    :0x%    DCD    628633658
        0x00001b14:    20783230    02x     DCD    544748080
        0x00001b18:    6f727265    erro    DCD    1869771365
        0x00001b1c:    0a0d2072    r ..    DCD    168632434
        0x00001b20:    00000020     ...    DCD    32
    $t
    i.PAN216_WriteRegBits
    PAN216_WriteRegBits
;;;112    
;;;113    /**
;;;114     * @brief Write to the global register in the current page without check
;;;115     * @param[in] addr Register address to write
;;;116     * @param[in] value Value to write to the register
;;;117     * @return Result
;;;118     */
;;;119    PAN216_Err_t PAN216_WriteRegUnchecked(uint8_t addr, uint8_t value)
;;;120    {
;;;121        PAN216_Write(addr, &value, 1);
;;;122        return PAN216_OK;
;;;123    }
;;;124    
;;;125    /**
;;;126     * @brief Write continuous register values (buffer) in a specific address page
;;;127     * @param[in] addr Register start address
;;;128     * @param[in] buffer Values to write
;;;129     * @param[in] len Buffer length
;;;130     * @return Result
;;;131     */
;;;132    PAN216_Err_t PAN216_WriteRegs(uint8_t addr, uint8_t *buffer, uint8_t len)
;;;133    {
;;;134        PAN216_Write(addr, buffer, len);
;;;135        return PAN216_OK;
;;;136    }
;;;137    
;;;138    /**
;;;139     * @brief This function reads more than one byte from the register
;;;140     *
;;;141     * @param addr Register address
;;;142     * @param buffer Buffer provided for data from the register
;;;143     * @param len Number of bytes to read
;;;144     * @return PAN216_Err_t
;;;145     */
;;;146    PAN216_Err_t PAN216_ReadRegs(uint8_t addr, uint8_t *buffer, uint8_t len)
;;;147    {
;;;148        PAN216_Read(addr, buffer, len);
;;;149        return PAN216_OK;
;;;150    }
;;;151    
;;;152    /**
;;;153     * @brief Transfer data to the data FIFO on the chip
;;;154     * @param[in] addr Register address to write
;;;155     * @param[in] buffer Buffer provided for data to write to the register
;;;156     * @param[in] size Number of bytes to write
;;;157     * @return Result
;;;158     */
;;;159    PAN216_Err_t PAN216_WriteFifo(uint8_t addr, uint8_t *buffer, uint8_t size)
;;;160    {
;;;161        return PAN216_WriteRegs(addr, buffer, size);
;;;162    }
;;;163    
;;;164    /**
;;;165     * @brief Read more than one byte from the register
;;;166     * @param[in] addr Register address to read
;;;167     * @param[in] buffer Buffer provided for data from the register
;;;168     * @param[in] size Number of bytes to read
;;;169     * @return Result
;;;170     */
;;;171    PAN216_Err_t PAN216_ReadFifo(uint8_t addr, uint8_t *buffer, uint8_t size)
;;;172    {
;;;173        return PAN216_ReadRegs(addr, buffer, size);
;;;174    }
;;;175    
;;;176    /**
;;;177     * @brief This function writes bits to the register by mask
;;;178     *
;;;179     * @param addr Register address
;;;180     * @param val Bits value
;;;181     * @param mask Bits mask
;;;182     * @return PAN216_Err_t
;;;183     */
;;;184    PAN216_Err_t PAN216_WriteRegBits(uint8_t addr, uint8_t val, uint8_t mask)
;;;185    {
        0x00001b24:    b570        p.      PUSH     {r4-r6,lr}
        0x00001b26:    4605        .F      MOV      r5,r0
        0x00001b28:    460e        .F      MOV      r6,r1
        0x00001b2a:    4614        .F      MOV      r4,r2
;;;186        uint8_t tmp;
;;;187        PAN216_Err_t ret;
;;;188        uint8_t shift = GET_SHIFT(mask);
        0x00001b2c:    4610        .F      MOV      r0,r2
        0x00001b2e:    f000f982    ....    BL       __ctz ; 0x1e36
;;;189    
;;;190        val <<= shift;
        0x00001b32:    4086        .@      LSLS     r6,r6,r0
        0x00001b34:    b2f1        ..      UXTB     r1,r6
        0x00001b36:    4608        .F      MOV      r0,r1
;;;191        if (val & (~mask))
        0x00001b38:    43a0        .C      BICS     r0,r0,r4
        0x00001b3a:    d005        ..      BEQ      0x1b48 ; PAN216_WriteRegBits + 36
;;;192        {
;;;193            printf("val:0x%02x mask:0x%02x error \r\n", val, mask);
        0x00001b3c:    4622        "F      MOV      r2,r4
        0x00001b3e:    a008        ..      ADR      r0,{pc}+0x22 ; 0x1b60
        0x00001b40:    f000f95c    ..\.    BL       __0printf$8 ; 0x1dfc
;;;194            return PAN216_ERR;
        0x00001b44:    2001        .       MOVS     r0,#1
        0x00001b46:    bd70        p.      POP      {r4-r6,pc}
;;;195        }
;;;196        val &= mask;
        0x00001b48:    4021        !@      ANDS     r1,r1,r4
        0x00001b4a:    460e        .F      MOV      r6,r1
;;;197    
;;;198        tmp = PAN216_ReadReg(addr);
        0x00001b4c:    4628        (F      MOV      r0,r5
        0x00001b4e:    f7fffc86    ....    BL       PAN216_ReadReg ; 0x145e
;;;199        ret = PAN216_WriteReg(addr, (tmp & (~mask)) | val);
        0x00001b52:    43a0        .C      BICS     r0,r0,r4
        0x00001b54:    4330        0C      ORRS     r0,r0,r6
        0x00001b56:    4601        .F      MOV      r1,r0
        0x00001b58:    4628        (F      MOV      r0,r5
        0x00001b5a:    f7ffffb1    ....    BL       PAN216_WriteReg ; 0x1ac0
;;;200    
;;;201        return ret;
;;;202    }
        0x00001b5e:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x00001b60:    3a6c6176    val:    DCD    980181366
        0x00001b64:    30257830    0x%0    DCD    807761968
        0x00001b68:    6d207832    2x m    DCD    1830844466
        0x00001b6c:    3a6b7361    ask:    DCD    980120417
        0x00001b70:    30257830    0x%0    DCD    807761968
        0x00001b74:    65207832    2x e    DCD    1696626738
        0x00001b78:    726f7272    rror    DCD    1919906418
        0x00001b7c:    000a0d20     ...    DCD    658720
    $t
    i.PAN216_WriteRegUnchecked
    PAN216_WriteRegUnchecked
;;; ..\..\..\..\radio\pan216_reg.c (120)
        0x00001b80:    b513        ..      PUSH     {r0,r1,r4,lr}
;;;121        PAN216_Write(addr, &value, 1);
        0x00001b82:    2201        ."      MOVS     r2,#1
        0x00001b84:    a901        ..      ADD      r1,sp,#4
        0x00001b86:    f7ffff2f    ../.    BL       PAN216_Write ; 0x19e8
;;;122        return PAN216_OK;
        0x00001b8a:    2000        .       MOVS     r0,#0
;;;123    }
        0x00001b8c:    bd1c        ..      POP      {r2-r4,pc}
    i.PAN216_WriteRegs
    PAN216_WriteRegs
;;;124    
;;;125    /**
;;;126     * @brief Write continuous register values (buffer) in a specific address page
;;;127     * @param[in] addr Register start address
;;;128     * @param[in] buffer Values to write
;;;129     * @param[in] len Buffer length
;;;130     * @return Result
;;;131     */
;;;132    PAN216_Err_t PAN216_WriteRegs(uint8_t addr, uint8_t *buffer, uint8_t len)
;;;133    {
        0x00001b8e:    b510        ..      PUSH     {r4,lr}
;;;134        PAN216_Write(addr, buffer, len);
        0x00001b90:    f7ffff2a    ..*.    BL       PAN216_Write ; 0x19e8
;;;135        return PAN216_OK;
        0x00001b94:    2000        .       MOVS     r0,#0
;;;136    }
        0x00001b96:    bd10        ..      POP      {r4,pc}
    i.RF_BusInit
    RF_BusInit
;;; ..\..\..\..\radio\pan216_port.c
;;;50     {
        0x00001b98:    b510        ..      PUSH     {r4,lr}
;;;51     #if INTERFACE_MODE == USE_SPI_3LINE
;;;52         ITF_3SPIINIT();
;;;53     #elif INTERFACE_MODE == USE_I2C
;;;54         ITF_IICINIT();
;;;55     #endif
;;;56     #if INTERFACE_MODE == USE_SPI_4LINE
;;;57         ITF_4SPIINIT();
        0x00001b9a:    f7fefc31    ..1.    BL       BSP_4LineSPIInit ; 0x400
;;;58     #endif
;;;59     }
        0x00001b9e:    bd10        ..      POP      {r4,pc}
    i.SYS_ConfigMFP
    SYS_ConfigMFP
;;; ..\..\..\..\pan108\bsp.c
;;;226    {
        0x00001ba0:    b510        ..      PUSH     {r4,lr}
;;;227        uint8_t port = PinID / 0x10;
        0x00001ba2:    0902        ..      LSRS     r2,r0,#4
;;;228        uint8_t bit = PinID % 0x10;
        0x00001ba4:    0700        ..      LSLS     r0,r0,#28
        0x00001ba6:    0f00        ..      LSRS     r0,r0,#28
        0x00001ba8:    0093        ..      LSLS     r3,r2,#2
;;;229    
;;;230        (&SYS->P0_MFP)[port] = ((&SYS->P0_MFP)[port] & ~(SYS_MFP_P00_Msk << bit)) | PinFunction;
        0x00001baa:    4a04        .J      LDR      r2,[pc,#16] ; [0x1bbc] = 0x40030000
        0x00001bac:    189a        ..      ADDS     r2,r3,r2
        0x00001bae:    6813        .h      LDR      r3,[r2,#0]
        0x00001bb0:    4c03        .L      LDR      r4,[pc,#12] ; [0x1bc0] = 0x10101
        0x00001bb2:    4084        .@      LSLS     r4,r4,r0
        0x00001bb4:    43a3        .C      BICS     r3,r3,r4
        0x00001bb6:    430b        .C      ORRS     r3,r3,r1
        0x00001bb8:    6013        .`      STR      r3,[r2,#0]
;;;231    }
        0x00001bba:    bd10        ..      POP      {r4,pc}
    $d
        0x00001bbc:    40030000    ...@    DCD    1073938432
        0x00001bc0:    00010101    ....    DCD    65793
    $t
    i.SendChar
    SendChar
;;; .\..\..\..\..\pan108\device\Source\pan_retarget.c
;;;107    {
        0x00001bc4:    b500        ..      PUSH     {lr}
;;;108       SendChar_ToUART(ch);
        0x00001bc6:    f000f801    ....    BL       SendChar_ToUART ; 0x1bcc
;;;109    }
        0x00001bca:    bd00        ..      POP      {pc}
    i.SendChar_ToUART
    SendChar_ToUART
;;; ..\..\..\..\pan108\peripheral\inc\pan_uart.h
;;;531        return (UARTx->USR & UART_USR_TFNF_Msk) ? false : true;
        0x00001bcc:    4903        .I      LDR      r1,[pc,#12] ; [0x1bdc] = 0x40013000
        0x00001bce:    6fca        .o      LDR      r2,[r1,#0x7c]
        0x00001bd0:    0792        ..      LSLS     r2,r2,#30
        0x00001bd2:    17d2        ..      ASRS     r2,r2,#31
        0x00001bd4:    1c52        R.      ADDS     r2,r2,#1
;;; .\..\..\..\..\pan108\device\Source\pan_retarget.c
;;;96         while(UART_IsTxFifoFull(DEBUG_PORT));
        0x00001bd6:    d1fa        ..      BNE      0x1bce ; SendChar_ToUART + 2
;;;97         DEBUG_PORT->RBR_THR_DLL = ch;
        0x00001bd8:    6008        .`      STR      r0,[r1,#0]
;;;98     }
        0x00001bda:    4770        pG      BX       lr
    $d
        0x00001bdc:    40013000    .0.@    DCD    1073819648
    $t
    i.SystemCoreClockUpdate
    SystemCoreClockUpdate
;;; .\..\..\..\..\pan108\device\Source\system_PANSeries.c
;;;150    {
        0x00001be0:    b510        ..      PUSH     {r4,lr}
        0x00001be2:    480c        .H      LDR      r0,[pc,#48] ; [0x1c14] = 0x40040000
        0x00001be4:    6a01        .j      LDR      r1,[r0,#0x20]
        0x00001be6:    0409        ..      LSLS     r1,r1,#16
        0x00001be8:    0f09        ..      LSRS     r1,r1,#28
;;; .\..\..\..\..\pan108\device\Source\system_PANSeries.c (150)
        0x00001bea:    d00a        ..      BEQ      0x1c02 ; SystemCoreClockUpdate + 34
        0x00001bec:    1c49        I.      ADDS     r1,r1,#1
;;;151        uint32_t div = 0;
;;;152        uint32_t freq_out = 0;
;;;153        div = (CLK->CLK_TOP_CTRL & CLK_TOPCTL_AHB_DIV_Msk) >> CLK_TOPCTL_AHB_DIV_Pos;
;;;154        if(div == 0)
;;;155            div = 1;
;;;156        else
;;;157            div += 1;
;;;158    
;;;159        if(CLK->CLK_TOP_CTRL & CLK_SYS_SRCSEL_DPLL){
        0x00001bee:    6a02        .j      LDR      r2,[r0,#0x20]
        0x00001bf0:    4c09        .L      LDR      r4,[pc,#36] ; [0x1c18] = 0x20000000
        0x00001bf2:    0592        ..      LSLS     r2,r2,#22
        0x00001bf4:    d50c        ..      BPL      0x1c10 ; SystemCoreClockUpdate + 48
;;;160            freq_out = (CLK->DPLL_CTRL & CLK_DPLLCTL_FREQ_OUT_Msk);
        0x00001bf6:    6b40        @k      LDR      r0,[r0,#0x34]
        0x00001bf8:    07c0        ..      LSLS     r0,r0,#31
        0x00001bfa:    0fc0        ..      LSRS     r0,r0,#31
;;;161            if(freq_out == CLK_DPLL_OUT_64M){
        0x00001bfc:    d003        ..      BEQ      0x1c06 ; SystemCoreClockUpdate + 38
;;;162                SystemCoreClock = FREQ_64MHZ  / div;
        0x00001bfe:    4807        .H      LDR      r0,[pc,#28] ; [0x1c1c] = 0x3d09000
        0x00001c00:    e002        ..      B        0x1c08 ; SystemCoreClockUpdate + 40
        0x00001c02:    2101        .!      MOVS     r1,#1
        0x00001c04:    e7f3        ..      B        0x1bee ; SystemCoreClockUpdate + 14
;;;163            }
;;;164            else{
;;;165                SystemCoreClock = FREQ_48MHZ / div;
        0x00001c06:    4806        .H      LDR      r0,[pc,#24] ; [0x1c20] = 0x2dc6c00
;;;166            }
;;;167        }
;;;168        else{
;;;169            SystemCoreClock = FREQ_32MHZ / div;
        0x00001c08:    f7fefa82    ....    BL       __aeabi_uidiv ; 0x110
        0x00001c0c:    6020         `      STR      r0,[r4,#0]
        0x00001c0e:    bd10        ..      POP      {r4,pc}
        0x00001c10:    4804        .H      LDR      r0,[pc,#16] ; [0x1c24] = 0x1e84800
        0x00001c12:    e7f9        ..      B        0x1c08 ; SystemCoreClockUpdate + 40
    $d
        0x00001c14:    40040000    ...@    DCD    1074003968
        0x00001c18:    20000000    ...     DCD    536870912
        0x00001c1c:    03d09000    ....    DCD    64000000
        0x00001c20:    02dc6c00    .l..    DCD    48000000
        0x00001c24:    01e84800    .H..    DCD    32000000
    $t
    i.SystemInit
    SystemInit
;;; .\..\..\..\..\pan108\device\Source\system_PANSeries.c (33)
        0x00001c28:    b5f8        ..      PUSH     {r3-r7,lr}
;;;34         // (Workaround) Maximum HLDO (DVDD) electrical level to enhance system stability
;;;35         // ANA->LP_HP_LDO = (ANA->LP_HP_LDO & ~0x2) | (0xf << 3);
;;;36     
;;;37         // Use external DVDD capacitor
;;;38         ANA->LP_HP_LDO |= BIT9;
        0x00001c2a:    481e        .H      LDR      r0,[pc,#120] ; [0x1ca4] = 0x40070000
        0x00001c2c:    6a01        .j      LDR      r1,[r0,#0x20]
        0x00001c2e:    1542        B.      ASRS     r2,r0,#21
        0x00001c30:    4311        .C      ORRS     r1,r1,r2
        0x00001c32:    6201        .b      STR      r1,[r0,#0x20]
;;;39     
;;;40         // Flash io pullup enable
;;;41         ANA->ANA_MISC1 |= (0x3b << 14);
        0x00001c34:    481b        .H      LDR      r0,[pc,#108] ; [0x1ca4] = 0x40070000
        0x00001c36:    3040        @0      ADDS     r0,r0,#0x40
        0x00001c38:    6941        Ai      LDR      r1,[r0,#0x14]
        0x00001c3a:    223b        ;"      MOVS     r2,#0x3b
        0x00001c3c:    0392        ..      LSLS     r2,r2,#14
        0x00001c3e:    4311        .C      ORRS     r1,r1,r2
        0x00001c40:    6141        Aa      STR      r1,[r0,#0x14]
;;;42     
;;;43         // Clear Retention Ctrl Flag (BIT31 of GPIO_DBCTL) in GPIO module to make sure
;;;44         // IOMUX is valid to use when soc wakes up from standby mode 1.
;;;45         GPIO_DB->DBCTL &= ~BIT31;
        0x00001c42:    4819        .H      LDR      r0,[pc,#100] ; [0x1ca8] = 0x40020180
        0x00001c44:    6801        .h      LDR      r1,[r0,#0]
        0x00001c46:    0049        I.      LSLS     r1,r1,#1
        0x00001c48:    0849        I.      LSRS     r1,r1,#1
        0x00001c4a:    6001        .`      STR      r1,[r0,#0]
;;;46     
;;;47         // fix bug 227: j-link debug failed when XTL selected
;;;48         if ((CLK->XTL_CTRL & (1 << 24)))
        0x00001c4c:    4c17        .L      LDR      r4,[pc,#92] ; [0x1cac] = 0x40040000
        0x00001c4e:    6ae0        .j      LDR      r0,[r4,#0x2c]
        0x00001c50:    2604        .&      MOVS     r6,#4
        0x00001c52:    01c0        ..      LSLS     r0,r0,#7
        0x00001c54:    2800        .(      CMP      r0,#0
        0x00001c56:    da02        ..      BGE      0x1c5e ; SystemInit + 54
;;;49         {
;;;50             // XTL_EN
;;;51             CLK->CLK_TOP_CTRL |= CLK_TOPCTL_XTL_EN_Msk;
        0x00001c58:    6a20         j      LDR      r0,[r4,#0x20]
        0x00001c5a:    4330        0C      ORRS     r0,r0,r6
        0x00001c5c:    6220         b      STR      r0,[r4,#0x20]
;;;52         }
;;;53     
;;;54         // Set rx_neg to 1, which can support Flash Clock up to 80MHz
;;;55         // (We may need to do some tuning if Flash Clock is greater than 80MHz)
;;;56         FLCTL->X_FL_X_MODE |= (1 << 20);    //rx_neg
        0x00001c5e:    4d14        .M      LDR      r5,[pc,#80] ; [0x1cb0] = 0x40050000
        0x00001c60:    68e8        .h      LDR      r0,[r5,#0xc]
        0x00001c62:    2101        .!      MOVS     r1,#1
        0x00001c64:    0509        ..      LSLS     r1,r1,#20
        0x00001c66:    4308        .C      ORRS     r0,r0,r1
        0x00001c68:    60e8        .`      STR      r0,[r5,#0xc]
;;;57         // Switch flash to 4-Line mode
;;;58         FMC_SetFlashMode(FLCTL, PanFlashLineMode, PanFlashEnhanceEnable);
        0x00001c6a:    2200        ."      MOVS     r2,#0
        0x00001c6c:    2102        .!      MOVS     r1,#2
        0x00001c6e:    4628        (F      MOV      r0,r5
        0x00001c70:    f7fefe76    ..v.    BL       FMC_SetFlashMode ; 0x960
;;; ..\..\..\..\pan108\device\Include\pan_clk.h
;;;393        uint32_t reg = CLK->AHB_CLK_CTRL & (~CLK_AHBCLK_SPI_FLASH_DIV_Msk);
        0x00001c74:    6ba0        .k      LDR      r0,[r4,#0x38]
        0x00001c76:    210f        .!      MOVS     r1,#0xf
        0x00001c78:    0409        ..      LSLS     r1,r1,#16
        0x00001c7a:    4388        .C      BICS     r0,r0,r1
;;;394        CLK->AHB_CLK_CTRL = reg | ((div << CLK_AHBCLK_SPI_FLASH_DIV_Pos) & CLK_AHBCLK_SPI_FLASH_DIV_Msk);
        0x00001c7c:    2700        .'      MOVS     r7,#0
        0x00001c7e:    63a0        .c      STR      r0,[r4,#0x38]
;;; .\..\..\..\..\pan108\device\Source\system_PANSeries.c
;;;63         InitIcache(FLCTL, PanFlashLineMode);
        0x00001c80:    2102        .!      MOVS     r1,#2
        0x00001c82:    4628        (F      MOV      r0,r5
        0x00001c84:    f7feff62    ..b.    BL       InitIcache ; 0xb4c
;;;64     
;;;65     #if defined(CONFIG_MCUBOOT)
;;;66     
;;;67         uint32_t *ptr_dcdc_flag = (uint32_t *)0x2000fffc;
;;;68     
;;;69         if(*ptr_dcdc_flag == 0x12345678){
;;;70             ANA->RSV1 |= BIT17; // To avoid potential buck enabling fail right after POR
;;;71             /* Configure DCDC params in normal mode */
;;;72             uint32_t tmp_reg_dcdc = ANA->LP_BUCK;
;;;73     
;;;74             tmp_reg_dcdc &= ~0X1;
;;;75             tmp_reg_dcdc = (tmp_reg_dcdc & ~(0X7<<5)) | (0X5<<5);
;;;76             ANA->LP_BUCK = tmp_reg_dcdc;
;;;77         } else {
;;;78             /* do nothing default ldo mode */
;;;79         }
;;;80     #endif
;;;81     
;;;82     #if CONFIG_PM
;;;83         /*
;;;84          * Enable standby IRQ as early as we can in order to execute corresponding
;;;85          * isr earlier to resume system from waking up from hw standby mode.
;;;86          * NOTE:
;;;87          *   1. We enable standby IRQ after cache init, thus we can execute
;;;88          *      standby ISR faster.
;;;89          *   2. We enable standby IRQ before the auto 3v-register-sync feature enabled,
;;;90          *      thus we can load the backup-to-ram aon register values back to related
;;;91          *      registers, so these values can be correctly load to 3v area after the
;;;92          *      auto 3v-reg-sync mechanism enabled.
;;;93          */
;;;94     	// NVIC_EnableIRQ(STANDBY_IRQn);
;;;95         /* Insure we are going to enter standby isr before the Auto-3v-sync feature enabled */
;;;96         // SYS_delay_10nop(1);
;;;97     #endif
;;;98     
;;;99     #ifndef SYNC_3V_REG_MANUALLY
;;;100        /* Here we enable the auto 3v-register-sync mechanism to simplify
;;;101         * operations for registers which have copies in the 3v always-on
;;;102         * area so that content in these registers could retain even in
;;;103         * low power mode.
;;;104         * NOTE: The auto 3v-reg-sync mechanism works for all related
;;;105         *       registers except Px_DINOFF regs for P46/P47/P56 in GPIO
;;;106         *       module.
;;;107         */
;;;108        CLK_Set3vSyncAuto();
        0x00001c88:    f7fefdf0    ....    BL       CLK_Set3vSyncAuto ; 0x86c
;;;109    #endif
;;;110    
;;;111        // Enable DCDC in normal mode when CONFIG_SOC_DCDC_PAN1080 enabled
;;;112    #if (CONFIG_SOC_DCDC_PAN1080)
;;;113        ANA->RSV1 |= BIT17; // To avoid potential buck enabling fail right after POR
;;;114        /* Configure DCDC params in normal mode */
;;;115        uint32_t tmp_reg = ANA->LP_BUCK;
;;;116        tmp_reg &= ~0X1;
;;;117        tmp_reg = (tmp_reg & ~(0X7<<5)) | (0X5<<5);
;;;118        ANA->LP_BUCK = tmp_reg;
;;;119    #endif
;;;120    
;;;121        // Enable DCDC in lowpower mode only if:
;;;122        //  - CONFIG_SOC_DCDC_PAN1080 enabled
;;;123        //  - and CONFIG_PM enabled
;;;124    #if (CONFIG_SOC_DCDC_PAN1080 && CONFIG_PM)
;;;125    	/* Configure DCDC params in lowpower mode */
;;;126    	uint32_t tmp_reg1 = ANA->LP_FL_CTRL;
;;;127    	tmp_reg1 &= ~(0x6 << 12);
;;;128    	ANA->LP_FL_CTRL = tmp_reg1;
;;;129    #endif
;;;130    
;;;131        /*
;;;132         * Set this bit to make sure we can later switch pinmux of P43 to the function
;;;133         * PAN1080_PIN_FUNC_P43_UART0_TX to use for UART0 Tx.
;;;134         */
;;;135        SYS->CTRL0 |= BIT2;
        0x00001c8c:    4809        .H      LDR      r0,[pc,#36] ; [0x1cb4] = 0x40030040
        0x00001c8e:    6881        .h      LDR      r1,[r0,#8]
        0x00001c90:    4331        1C      ORRS     r1,r1,r6
        0x00001c92:    6081        .`      STR      r1,[r0,#8]
;;;136    
;;;137        /*
;;;138         * Disable eFuse VDD for power saving purpose
;;;139         */
;;;140        EFUSE->EF_VDD = 0;
        0x00001c94:    4808        .H      LDR      r0,[pc,#32] ; [0x1cb8] = 0x40080000
        0x00001c96:    6107        .a      STR      r7,[r0,#0x10]
;;;141    
;;;142        /*
;;;143         * Increase dpll ivcobias to make dpll locking more easily
;;;144         */
;;;145        CLK->DPLL_CTRL |= (0x3u << 8);
        0x00001c98:    6b60        `k      LDR      r0,[r4,#0x34]
        0x00001c9a:    2103        .!      MOVS     r1,#3
        0x00001c9c:    0209        ..      LSLS     r1,r1,#8
        0x00001c9e:    4308        .C      ORRS     r0,r0,r1
        0x00001ca0:    6360        `c      STR      r0,[r4,#0x34]
;;;146    }
        0x00001ca2:    bdf8        ..      POP      {r3-r7,pc}
    $d
        0x00001ca4:    40070000    ...@    DCD    1074200576
        0x00001ca8:    40020180    ...@    DCD    1073873280
        0x00001cac:    40040000    ...@    DCD    1074003968
        0x00001cb0:    40050000    ...@    DCD    1074069504
        0x00001cb4:    40030040    @..@    DCD    1073938496
        0x00001cb8:    40080000    ...@    DCD    1074266112
    $t
    i.TMR0_IRQHandler
    TMR0_IRQHandler
;;; ..\..\..\..\pan108\peripheral\inc\pan_timer.h
;;;340        return(timer->INTSTS & TIMER_INTSTS_TIF_Msk ? 1 : 0);
        0x00001cbc:    4805        .H      LDR      r0,[pc,#20] ; [0x1cd4] = 0x40008000
        0x00001cbe:    6881        .h      LDR      r1,[r0,#8]
        0x00001cc0:    07c9        ..      LSLS     r1,r1,#31
        0x00001cc2:    0fc9        ..      LSRS     r1,r1,#31
;;; ..\..\..\..\pan108\bsp.c
;;;85     {
        0x00001cc4:    d005        ..      BEQ      0x1cd2 ; TMR0_IRQHandler + 22
;;; ..\..\..\..\pan108\peripheral\inc\pan_timer.h
;;;350        timer->INTSTS = TIMER_INTSTS_TIF_Msk;
        0x00001cc6:    2101        .!      MOVS     r1,#1
        0x00001cc8:    6081        .`      STR      r1,[r0,#8]
;;; ..\..\..\..\pan108\bsp.c
;;;90             g_SystemTick++;
        0x00001cca:    4803        .H      LDR      r0,[pc,#12] ; [0x1cd8] = 0x20000004
        0x00001ccc:    6841        Ah      LDR      r1,[r0,#4]
        0x00001cce:    1c49        I.      ADDS     r1,r1,#1
        0x00001cd0:    6041        A`      STR      r1,[r0,#4]
;;;91             
;;;92     //        if(g_SystemTick >= 1000)
;;;93     //        {
;;;94     //            g_SystemTick = 0;
;;;95     //            SYS_TEST("1 second.\n");
;;;96     //        }
;;;97         }
;;;98     }
        0x00001cd2:    4770        pG      BX       lr
    $d
        0x00001cd4:    40008000    ...@    DCD    1073774592
        0x00001cd8:    20000004    ...     DCD    536870916
    $t
    i.UART_Init
    UART_Init
;;; .\..\..\..\..\pan108\peripheral\src\pan_uart.c
;;;26     {
        0x00001cdc:    b5f8        ..      PUSH     {r3-r7,lr}
        0x00001cde:    460d        .F      MOV      r5,r1
        0x00001ce0:    4604        .F      MOV      r4,r0
;;;27         uint32_t tmpreg = 0x00;
;;;28         uint32_t integerdivider = 0x00;
;;;29         uint32_t fractionaldivider = 0x00;
;;;30         uint64_t apbclock = 0x00;
;;;31         /*---------------------------- UART BRR Configuration -----------------------*/
;;;32         /* Configure the UART Baud Rate */
;;;33         apbclock = CLK_GetPeripheralFreq((void*)UARTx);
        0x00001ce2:    f7fefd19    ....    BL       CLK_GetPeripheralFreq ; 0x718
        0x00001ce6:    68e2        .h      LDR      r2,[r4,#0xc]
        0x00001ce8:    2100        .!      MOVS     r1,#0
;;;34     
;;;35         /*unlock to enable write & read divisor register*/
;;;36         UARTx->LCR |= UART_LCR_DLAB_Msk;
        0x00001cea:    2780        .'      MOVS     r7,#0x80
        0x00001cec:    433a        :C      ORRS     r2,r2,r7
        0x00001cee:    60e2        .`      STR      r2,[r4,#0xc]
;;;37         /* Determine the integer part baud_rate_divisor =  PCLK*100 / (16*required_baud_rate)*/
;;;38         integerdivider = ((25 * apbclock) / (4 * (UART_InitStruct->UART_BaudRate)));
        0x00001cf0:    682a        *h      LDR      r2,[r5,#0]
        0x00001cf2:    460b        .F      MOV      r3,r1
        0x00001cf4:    0096        ..      LSLS     r6,r2,#2
        0x00001cf6:    2219        ."      MOVS     r2,#0x19
        0x00001cf8:    f7fefa50    ..P.    BL       __aeabi_lmul ; 0x19c
        0x00001cfc:    4632        2F      MOV      r2,r6
        0x00001cfe:    2300        .#      MOVS     r3,#0
        0x00001d00:    f7fefa1c    ....    BL       __aeabi_uldivmod ; 0x13c
        0x00001d04:    4606        .F      MOV      r6,r0
;;;39     
;;;40         //Too high baudrate (too small divider) would cause DLL/DLH be all 0 which means UART disabled,
;;;41         //thus return false if this happens.
;;;42         if (integerdivider < 100)
        0x00001d06:    2864        d(      CMP      r0,#0x64
        0x00001d08:    d201        ..      BCS      0x1d0e ; UART_Init + 50
;;;43             return false;
        0x00001d0a:    2000        .       MOVS     r0,#0
        0x00001d0c:    bdf8        ..      POP      {r3-r7,pc}
;;;44     
;;;45         tmpreg = (integerdivider / 100);
        0x00001d0e:    2164        d!      MOVS     r1,#0x64
        0x00001d10:    f7fef9fe    ....    BL       __aeabi_uidiv ; 0x110
;;;46         UARTx->RBR_THR_DLL = tmpreg & 0xFF;
        0x00001d14:    b2c1        ..      UXTB     r1,r0
        0x00001d16:    6021        !`      STR      r1,[r4,#0]
;;;47         UARTx->IER_DLH = (tmpreg & 0xFF00 ) >> 8;
        0x00001d18:    0401        ..      LSLS     r1,r0,#16
        0x00001d1a:    0e09        ..      LSRS     r1,r1,#24
        0x00001d1c:    6061        a`      STR      r1,[r4,#4]
;;;48     
;;;49         /* Determine the fractional part */
;;;50         fractionaldivider = integerdivider - (100 * tmpreg);
        0x00001d1e:    2164        d!      MOVS     r1,#0x64
        0x00001d20:    4348        HC      MULS     r0,r1,r0
        0x00001d22:    1a30        0.      SUBS     r0,r6,r0
;;;51     
;;;52         /* Implement the fractional part in the register */
;;;53         UARTx->DLF = ((((fractionaldivider * 16) + 50) / 100)) ;
        0x00001d24:    0100        ..      LSLS     r0,r0,#4
        0x00001d26:    3032        20      ADDS     r0,r0,#0x32
        0x00001d28:    f7fef9f2    ....    BL       __aeabi_uidiv ; 0x110
        0x00001d2c:    21c0        .!      MOVS     r1,#0xc0
        0x00001d2e:    5108        .Q      STR      r0,[r1,r4]
;;;54         UARTx->LCR &=  ~UART_LCR_DLAB_Msk;
        0x00001d30:    68e0        .h      LDR      r0,[r4,#0xc]
        0x00001d32:    43b8        .C      BICS     r0,r0,r7
        0x00001d34:    60e0        .`      STR      r0,[r4,#0xc]
;;;55     
;;;56         /*---------------------------- UART Line Configuration -----------------------*/
;;;57         tmpreg = UARTx->LCR;
        0x00001d36:    68e0        .h      LDR      r0,[r4,#0xc]
;;;58         tmpreg &= ~(UART_LCR_SP_Msk | UART_LCR_EPS_Msk | UART_LCR_PEN_Msk | UART_LCR_STOP_Msk | UART_LCR_DLS_Msk);
        0x00001d38:    0981        ..      LSRS     r1,r0,#6
        0x00001d3a:    7928        (y      LDRB     r0,[r5,#4]
        0x00001d3c:    0189        ..      LSLS     r1,r1,#6
;;;59         tmpreg |= (UART_InitStruct->UART_LineCtrl);
        0x00001d3e:    4308        .C      ORRS     r0,r0,r1
;;;60         UARTx->LCR = tmpreg;
        0x00001d40:    60e0        .`      STR      r0,[r4,#0xc]
;;;61     
;;;62         return true;
        0x00001d42:    2001        .       MOVS     r0,#1
;;;63     }
        0x00001d44:    bdf8        ..      POP      {r3-r7,pc}
        0x00001d46:    0000        ..      MOVS     r0,r0
    i.WriteRxDemodConfig
    WriteRxDemodConfig
;;; ..\..\..\..\radio\pan216_ext.c
;;;207    {
        0x00001d48:    b570        p.      PUSH     {r4-r6,lr}
        0x00001d4a:    4914        .I      LDR      r1,[pc,#80] ; [0x1d9c] = 0x20000028
        0x00001d4c:    4a14        .J      LDR      r2,[pc,#80] ; [0x1da0] = 0x2f38
        0x00001d4e:    780b        .x      LDRB     r3,[r1,#0]
;;;208        for (int i = 0; i < sizeof(RxDemodIndex) / sizeof(RxDemodIndex[0]); i++)
        0x00001d50:    2000        .       MOVS     r0,#0
;;;209        {
;;;210            if (_gChipMode == RxDemodIndex[i].ChipMode && _gDataRate == RxDemodIndex[i].DataRate &&
        0x00001d52:    0084        ..      LSLS     r4,r0,#2
        0x00001d54:    5d15        .]      LDRB     r5,[r2,r4]
        0x00001d56:    429d        .B      CMP      r5,r3
        0x00001d58:    d11b        ..      BNE      0x1d92 ; WriteRxDemodConfig + 74
        0x00001d5a:    18a5        ..      ADDS     r5,r4,r2
        0x00001d5c:    786c        lx      LDRB     r4,[r5,#1]
        0x00001d5e:    784e        Nx      LDRB     r6,[r1,#1]
        0x00001d60:    42b4        .B      CMP      r4,r6
        0x00001d62:    d116        ..      BNE      0x1d92 ; WriteRxDemodConfig + 74
;;;211                _gS2S8Mode == RxDemodIndex[i].S2S8Mode)
        0x00001d64:    78ac        .x      LDRB     r4,[r5,#2]
        0x00001d66:    788e        .x      LDRB     r6,[r1,#2]
        0x00001d68:    42b4        .B      CMP      r4,r6
        0x00001d6a:    d112        ..      BNE      0x1d92 ; WriteRxDemodConfig + 74
        0x00001d6c:    4e0c        .N      LDR      r6,[pc,#48] ; [0x1da0] = 0x2f38
;;;212            {
;;;213                for (int j = 0; j < 16; j++)
        0x00001d6e:    2400        .$      MOVS     r4,#0
        0x00001d70:    3e90        .>      SUBS     r6,r6,#0x90
        0x00001d72:    78e8        .x      LDRB     r0,[r5,#3]
        0x00001d74:    1982        ..      ADDS     r2,r0,r6
        0x00001d76:    00e0        ..      LSLS     r0,r4,#3
        0x00001d78:    1820         .      ADDS     r0,r4,r0
        0x00001d7a:    1c81        ..      ADDS     r1,r0,#2
        0x00001d7c:    5c52        R\      LDRB     r2,[r2,r1]
        0x00001d7e:    1981        ..      ADDS     r1,r0,r6
        0x00001d80:    7a0b        .z      LDRB     r3,[r1,#8]
        0x00001d82:    7849        Ix      LDRB     r1,[r1,#1]
        0x00001d84:    5c30        0\      LDRB     r0,[r6,r0]
        0x00001d86:    f7fffe69    ..i.    BL       PAN216_WritePageRegBits ; 0x1a5c
        0x00001d8a:    1c64        d.      ADDS     r4,r4,#1
        0x00001d8c:    2c10        .,      CMP      r4,#0x10
        0x00001d8e:    dbf0        ..      BLT      0x1d72 ; WriteRxDemodConfig + 42
;;;214                {
;;;215                    PAN216_WritePageRegBits(RxDemodTable[j].page, RxDemodTable[j].addr,
;;;216                                            RxDemodTable[j].cfg[RxDemodIndex[i].index],
;;;217                                            RxDemodTable[j].mask);
;;;218                }
;;;219                return;
;;;220            }
;;;221        }
;;;222    }
        0x00001d90:    bd70        p.      POP      {r4-r6,pc}
        0x00001d92:    1c40        @.      ADDS     r0,r0,#1
        0x00001d94:    2810        .(      CMP      r0,#0x10
        0x00001d96:    d3dc        ..      BCC      0x1d52 ; WriteRxDemodConfig + 10
        0x00001d98:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x00001d9a:    0000        ..      DCW    0
        0x00001d9c:    20000028    (..     DCD    536870952
        0x00001da0:    00002f38    8/..    DCD    12088
    $t
    i.WriteTxDemodConfig
    WriteTxDemodConfig
;;; ..\..\..\..\radio\pan216_ext.c (141)
        0x00001da4:    b570        p.      PUSH     {r4-r6,lr}
        0x00001da6:    4c13        .L      LDR      r4,[pc,#76] ; [0x1df4] = 0x20000028
        0x00001da8:    4913        .I      LDR      r1,[pc,#76] ; [0x1df8] = 0x2e84
        0x00001daa:    7823        #x      LDRB     r3,[r4,#0]
;;;142        for (int i = 0; i < sizeof(TxDemodIndex) / sizeof(TxDemodIndex[0]); i++)
        0x00001dac:    2000        .       MOVS     r0,#0
;;;143        {
;;;144            if (_gChipMode == TxDemodIndex[i].ChipMode && _gDataRate == TxDemodIndex[i].DataRate)
        0x00001dae:    0042        B.      LSLS     r2,r0,#1
        0x00001db0:    1882        ..      ADDS     r2,r0,r2
        0x00001db2:    5c8d        .\      LDRB     r5,[r1,r2]
        0x00001db4:    429d        .B      CMP      r5,r3
        0x00001db6:    d118        ..      BNE      0x1dea ; WriteTxDemodConfig + 70
        0x00001db8:    1852        R.      ADDS     r2,r2,r1
        0x00001dba:    7852        Rx      LDRB     r2,[r2,#1]
        0x00001dbc:    7865        ex      LDRB     r5,[r4,#1]
        0x00001dbe:    42aa        .B      CMP      r2,r5
        0x00001dc0:    d113        ..      BNE      0x1dea ; WriteTxDemodConfig + 70
;;;145            {
;;;146                uint8_t index = TxDemodIndex[i].index;
        0x00001dc2:    0042        B.      LSLS     r2,r0,#1
        0x00001dc4:    1880        ..      ADDS     r0,r0,r2
        0x00001dc6:    1840        @.      ADDS     r0,r0,r1
        0x00001dc8:    490b        .I      LDR      r1,[pc,#44] ; [0x1df8] = 0x2e84
        0x00001dca:    7880        .x      LDRB     r0,[r0,#2]
;;;147                PAN216_WritePageRegBits(TxDemodTable[0].page, TxDemodTable[0].addr,
        0x00001dcc:    3924        $9      SUBS     r1,r1,#0x24
        0x00001dce:    180c        ..      ADDS     r4,r1,r0
        0x00001dd0:    78e2        .x      LDRB     r2,[r4,#3]
        0x00001dd2:    231f        .#      MOVS     r3,#0x1f
        0x00001dd4:    2132        2!      MOVS     r1,#0x32
        0x00001dd6:    2001        .       MOVS     r0,#1
        0x00001dd8:    f7fffe40    ..@.    BL       PAN216_WritePageRegBits ; 0x1a5c
;;;148                                        TxDemodTable[0].config[index], TxDemodTable[0].mask);
;;;149                PAN216_WritePageRegBits(TxDemodTable[1].page, TxDemodTable[1].addr,
        0x00001ddc:    7d62        b}      LDRB     r2,[r4,#0x15]
        0x00001dde:    233f        ?#      MOVS     r3,#0x3f
        0x00001de0:    2133        3!      MOVS     r1,#0x33
        0x00001de2:    2001        .       MOVS     r0,#1
        0x00001de4:    f7fffe3a    ..:.    BL       PAN216_WritePageRegBits ; 0x1a5c
;;;150                                        TxDemodTable[1].config[index], TxDemodTable[1].mask);
;;;151                return;
;;;152            }
;;;153        }
;;;154    }
        0x00001de8:    bd70        p.      POP      {r4-r6,pc}
        0x00001dea:    1c40        @.      ADDS     r0,r0,#1
        0x00001dec:    280c        .(      CMP      r0,#0xc
        0x00001dee:    d3de        ..      BCC      0x1dae ; WriteTxDemodConfig + 10
        0x00001df0:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x00001df2:    0000        ..      DCW    0
        0x00001df4:    20000028    (..     DCD    536870952
        0x00001df8:    00002e84    ....    DCD    11908
    $t
    i.__0printf$8
    __0printf$8
    __1printf$8
    __2printf
        0x00001dfc:    b40f        ..      PUSH     {r0-r3}
        0x00001dfe:    b510        ..      PUSH     {r4,lr}
        0x00001e00:    a903        ..      ADD      r1,sp,#0xc
        0x00001e02:    4b04        .K      LDR      r3,[pc,#16] ; [0x1e14] = 0x2551
        0x00001e04:    4a04        .J      LDR      r2,[pc,#16] ; [0x1e18] = 0x20000050
        0x00001e06:    9802        ..      LDR      r0,[sp,#8]
        0x00001e08:    f000f832    ..2.    BL       _printf_core ; 0x1e70
        0x00001e0c:    bc10        ..      POP      {r4}
        0x00001e0e:    bc08        ..      POP      {r3}
        0x00001e10:    b004        ..      ADD      sp,sp,#0x10
        0x00001e12:    4718        .G      BX       r3
    $d
        0x00001e14:    00002551    Q%..    DCD    9553
        0x00001e18:    20000050    P..     DCD    536870992
    $t
    i.__ARM_common_switch8
    __ARM_common_switch8
        0x00001e1c:    b430        0.      PUSH     {r4,r5}
        0x00001e1e:    4674        tF      MOV      r4,lr
        0x00001e20:    1e64        d.      SUBS     r4,r4,#1
        0x00001e22:    7825        %x      LDRB     r5,[r4,#0]
        0x00001e24:    1c64        d.      ADDS     r4,r4,#1
        0x00001e26:    42ab        .B      CMP      r3,r5
        0x00001e28:    d200        ..      BCS      0x1e2c ; __ARM_common_switch8 + 16
        0x00001e2a:    461d        .F      MOV      r5,r3
        0x00001e2c:    5d63        c]      LDRB     r3,[r4,r5]
        0x00001e2e:    005b        [.      LSLS     r3,r3,#1
        0x00001e30:    18e3        ..      ADDS     r3,r4,r3
        0x00001e32:    bc30        0.      POP      {r4,r5}
        0x00001e34:    4718        .G      BX       r3
    i.__ctz
    __ctz
;;; ..\..\..\..\radio\pan216_reg.c
;;;11         for (int i = 0; i < 8; i++)
        0x00001e36:    2100        .!      MOVS     r1,#0
        0x00001e38:    2301        .#      MOVS     r3,#1
        0x00001e3a:    461a        .F      MOV      r2,r3
        0x00001e3c:    408a        .@      LSLS     r2,r2,r1
        0x00001e3e:    4202        .B      TST      r2,r0
        0x00001e40:    d001        ..      BEQ      0x1e46 ; __ctz + 16
        0x00001e42:    b2c8        ..      UXTB     r0,r1
        0x00001e44:    4770        pG      BX       lr
        0x00001e46:    1c49        I.      ADDS     r1,r1,#1
        0x00001e48:    2908        .)      CMP      r1,#8
        0x00001e4a:    dbf6        ..      BLT      0x1e3a ; __ctz + 4
;;;12         {
;;;13             if (val & (1 << i))
;;;14             {
;;;15                 return i;
;;;16             }
;;;17         }
;;;18     
;;;19         return 8;
        0x00001e4c:    2008        .       MOVS     r0,#8
;;;20     }
        0x00001e4e:    4770        pG      BX       lr
    i.__scatterload_copy
    __scatterload_copy
        0x00001e50:    e002        ..      B        0x1e58 ; __scatterload_copy + 8
        0x00001e52:    c808        ..      LDM      r0!,{r3}
        0x00001e54:    1f12        ..      SUBS     r2,r2,#4
        0x00001e56:    c108        ..      STM      r1!,{r3}
        0x00001e58:    2a00        .*      CMP      r2,#0
        0x00001e5a:    d1fa        ..      BNE      0x1e52 ; __scatterload_copy + 2
        0x00001e5c:    4770        pG      BX       lr
    i.__scatterload_null
    __scatterload_null
        0x00001e5e:    4770        pG      BX       lr
    i.__scatterload_zeroinit
    __scatterload_zeroinit
        0x00001e60:    2000        .       MOVS     r0,#0
        0x00001e62:    e001        ..      B        0x1e68 ; __scatterload_zeroinit + 8
        0x00001e64:    c101        ..      STM      r1!,{r0}
        0x00001e66:    1f12        ..      SUBS     r2,r2,#4
        0x00001e68:    2a00        .*      CMP      r2,#0
        0x00001e6a:    d1fb        ..      BNE      0x1e64 ; __scatterload_zeroinit + 4
        0x00001e6c:    4770        pG      BX       lr
        0x00001e6e:    0000        ..      MOVS     r0,r0
    i._printf_core
    _printf_core
        0x00001e70:    b5ff        ..      PUSH     {r0-r7,lr}
        0x00001e72:    b091        ..      SUB      sp,sp,#0x44
        0x00001e74:    460f        .F      MOV      r7,r1
        0x00001e76:    4605        .F      MOV      r5,r0
        0x00001e78:    2600        .&      MOVS     r6,#0
        0x00001e7a:    e006        ..      B        0x1e8a ; _printf_core + 26
        0x00001e7c:    2825        %(      CMP      r0,#0x25
        0x00001e7e:    d00a        ..      BEQ      0x1e96 ; _printf_core + 38
        0x00001e80:    9a14        ..      LDR      r2,[sp,#0x50]
        0x00001e82:    9913        ..      LDR      r1,[sp,#0x4c]
        0x00001e84:    4790        .G      BLX      r2
        0x00001e86:    1c6d        m.      ADDS     r5,r5,#1
        0x00001e88:    1c76        v.      ADDS     r6,r6,#1
        0x00001e8a:    7828        (x      LDRB     r0,[r5,#0]
        0x00001e8c:    2800        .(      CMP      r0,#0
        0x00001e8e:    d1f5        ..      BNE      0x1e7c ; _printf_core + 12
        0x00001e90:    4630        0F      MOV      r0,r6
        0x00001e92:    b015        ..      ADD      sp,sp,#0x54
        0x00001e94:    bdf0        ..      POP      {r4-r7,pc}
        0x00001e96:    2400        .$      MOVS     r4,#0
        0x00001e98:    9400        ..      STR      r4,[sp,#0]
        0x00001e9a:    2101        .!      MOVS     r1,#1
        0x00001e9c:    4af3        .J      LDR      r2,[pc,#972] ; [0x226c] = 0x12809
        0x00001e9e:    9402        ..      STR      r4,[sp,#8]
        0x00001ea0:    e000        ..      B        0x1ea4 ; _printf_core + 52
        0x00001ea2:    4304        .C      ORRS     r4,r4,r0
        0x00001ea4:    1c6d        m.      ADDS     r5,r5,#1
        0x00001ea6:    782b        +x      LDRB     r3,[r5,#0]
        0x00001ea8:    4608        .F      MOV      r0,r1
        0x00001eaa:    3b20         ;      SUBS     r3,r3,#0x20
        0x00001eac:    4098        .@      LSLS     r0,r0,r3
        0x00001eae:    4210        .B      TST      r0,r2
        0x00001eb0:    d1f7        ..      BNE      0x1ea2 ; _printf_core + 50
        0x00001eb2:    7828        (x      LDRB     r0,[r5,#0]
        0x00001eb4:    282a        *(      CMP      r0,#0x2a
        0x00001eb6:    d00e        ..      BEQ      0x1ed6 ; _printf_core + 102
        0x00001eb8:    2202        ."      MOVS     r2,#2
        0x00001eba:    7828        (x      LDRB     r0,[r5,#0]
        0x00001ebc:    4601        .F      MOV      r1,r0
        0x00001ebe:    3930        09      SUBS     r1,r1,#0x30
        0x00001ec0:    2909        .)      CMP      r1,#9
        0x00001ec2:    d815        ..      BHI      0x1ef0 ; _printf_core + 128
        0x00001ec4:    9900        ..      LDR      r1,[sp,#0]
        0x00001ec6:    230a        .#      MOVS     r3,#0xa
        0x00001ec8:    4359        YC      MULS     r1,r3,r1
        0x00001eca:    3930        09      SUBS     r1,r1,#0x30
        0x00001ecc:    1840        @.      ADDS     r0,r0,r1
        0x00001ece:    4314        .C      ORRS     r4,r4,r2
        0x00001ed0:    1c6d        m.      ADDS     r5,r5,#1
        0x00001ed2:    9000        ..      STR      r0,[sp,#0]
        0x00001ed4:    e7f1        ..      B        0x1eba ; _printf_core + 74
        0x00001ed6:    cf01        ..      LDM      r7!,{r0}
        0x00001ed8:    9000        ..      STR      r0,[sp,#0]
        0x00001eda:    2800        .(      CMP      r0,#0
        0x00001edc:    da05        ..      BGE      0x1eea ; _printf_core + 122
        0x00001ede:    2001        .       MOVS     r0,#1
        0x00001ee0:    0340        @.      LSLS     r0,r0,#13
        0x00001ee2:    4304        .C      ORRS     r4,r4,r0
        0x00001ee4:    9800        ..      LDR      r0,[sp,#0]
        0x00001ee6:    4240        @B      RSBS     r0,r0,#0
        0x00001ee8:    9000        ..      STR      r0,[sp,#0]
        0x00001eea:    2002        .       MOVS     r0,#2
        0x00001eec:    4304        .C      ORRS     r4,r4,r0
        0x00001eee:    1c6d        m.      ADDS     r5,r5,#1
        0x00001ef0:    7828        (x      LDRB     r0,[r5,#0]
        0x00001ef2:    282e        .(      CMP      r0,#0x2e
        0x00001ef4:    d115        ..      BNE      0x1f22 ; _printf_core + 178
        0x00001ef6:    2004        .       MOVS     r0,#4
        0x00001ef8:    4304        .C      ORRS     r4,r4,r0
        0x00001efa:    7868        hx      LDRB     r0,[r5,#1]
        0x00001efc:    1c6d        m.      ADDS     r5,r5,#1
        0x00001efe:    282a        *(      CMP      r0,#0x2a
        0x00001f00:    d10a        ..      BNE      0x1f18 ; _printf_core + 168
        0x00001f02:    cf01        ..      LDM      r7!,{r0}
        0x00001f04:    1c6d        m.      ADDS     r5,r5,#1
        0x00001f06:    9002        ..      STR      r0,[sp,#8]
        0x00001f08:    e00b        ..      B        0x1f22 ; _printf_core + 178
        0x00001f0a:    9902        ..      LDR      r1,[sp,#8]
        0x00001f0c:    220a        ."      MOVS     r2,#0xa
        0x00001f0e:    4351        QC      MULS     r1,r2,r1
        0x00001f10:    3930        09      SUBS     r1,r1,#0x30
        0x00001f12:    1840        @.      ADDS     r0,r0,r1
        0x00001f14:    1c6d        m.      ADDS     r5,r5,#1
        0x00001f16:    9002        ..      STR      r0,[sp,#8]
        0x00001f18:    7828        (x      LDRB     r0,[r5,#0]
        0x00001f1a:    4601        .F      MOV      r1,r0
        0x00001f1c:    3930        09      SUBS     r1,r1,#0x30
        0x00001f1e:    2909        .)      CMP      r1,#9
        0x00001f20:    d9f3        ..      BLS      0x1f0a ; _printf_core + 154
        0x00001f22:    7828        (x      LDRB     r0,[r5,#0]
        0x00001f24:    286c        l(      CMP      r0,#0x6c
        0x00001f26:    d010        ..      BEQ      0x1f4a ; _printf_core + 218
        0x00001f28:    dc06        ..      BGT      0x1f38 ; _printf_core + 200
        0x00001f2a:    284c        L(      CMP      r0,#0x4c
        0x00001f2c:    d01a        ..      BEQ      0x1f64 ; _printf_core + 244
        0x00001f2e:    2868        h(      CMP      r0,#0x68
        0x00001f30:    d00e        ..      BEQ      0x1f50 ; _printf_core + 224
        0x00001f32:    286a        j(      CMP      r0,#0x6a
        0x00001f34:    d117        ..      BNE      0x1f66 ; _printf_core + 246
        0x00001f36:    e004        ..      B        0x1f42 ; _printf_core + 210
        0x00001f38:    2874        t(      CMP      r0,#0x74
        0x00001f3a:    d013        ..      BEQ      0x1f64 ; _printf_core + 244
        0x00001f3c:    287a        z(      CMP      r0,#0x7a
        0x00001f3e:    d112        ..      BNE      0x1f66 ; _printf_core + 246
        0x00001f40:    e010        ..      B        0x1f64 ; _printf_core + 244
        0x00001f42:    2001        .       MOVS     r0,#1
        0x00001f44:    0540        @.      LSLS     r0,r0,#21
        0x00001f46:    4304        .C      ORRS     r4,r4,r0
        0x00001f48:    e00c        ..      B        0x1f64 ; _printf_core + 244
        0x00001f4a:    2101        .!      MOVS     r1,#1
        0x00001f4c:    0509        ..      LSLS     r1,r1,#20
        0x00001f4e:    e001        ..      B        0x1f54 ; _printf_core + 228
        0x00001f50:    2103        .!      MOVS     r1,#3
        0x00001f52:    0509        ..      LSLS     r1,r1,#20
        0x00001f54:    430c        .C      ORRS     r4,r4,r1
        0x00001f56:    7869        ix      LDRB     r1,[r5,#1]
        0x00001f58:    4281        .B      CMP      r1,r0
        0x00001f5a:    d103        ..      BNE      0x1f64 ; _printf_core + 244
        0x00001f5c:    2001        .       MOVS     r0,#1
        0x00001f5e:    0500        ..      LSLS     r0,r0,#20
        0x00001f60:    1824        $.      ADDS     r4,r4,r0
        0x00001f62:    1c6d        m.      ADDS     r5,r5,#1
        0x00001f64:    1c6d        m.      ADDS     r5,r5,#1
        0x00001f66:    7828        (x      LDRB     r0,[r5,#0]
        0x00001f68:    286e        n(      CMP      r0,#0x6e
        0x00001f6a:    d01e        ..      BEQ      0x1faa ; _printf_core + 314
        0x00001f6c:    dc0c        ..      BGT      0x1f88 ; _printf_core + 280
        0x00001f6e:    2863        c(      CMP      r0,#0x63
        0x00001f70:    d031        1.      BEQ      0x1fd6 ; _printf_core + 358
        0x00001f72:    dc04        ..      BGT      0x1f7e ; _printf_core + 270
        0x00001f74:    2800        .(      CMP      r0,#0
        0x00001f76:    d08b        ..      BEQ      0x1e90 ; _printf_core + 32
        0x00001f78:    2858        X(      CMP      r0,#0x58
        0x00001f7a:    d111        ..      BNE      0x1fa0 ; _printf_core + 304
        0x00001f7c:    e0b2        ..      B        0x20e4 ; _printf_core + 628
        0x00001f7e:    2864        d(      CMP      r0,#0x64
        0x00001f80:    d07b        {.      BEQ      0x207a ; _printf_core + 522
        0x00001f82:    2869        i(      CMP      r0,#0x69
        0x00001f84:    d10c        ..      BNE      0x1fa0 ; _printf_core + 304
        0x00001f86:    e078        x.      B        0x207a ; _printf_core + 522
        0x00001f88:    2873        s(      CMP      r0,#0x73
        0x00001f8a:    d02d        -.      BEQ      0x1fe8 ; _printf_core + 376
        0x00001f8c:    dc04        ..      BGT      0x1f98 ; _printf_core + 296
        0x00001f8e:    286f        o(      CMP      r0,#0x6f
        0x00001f90:    d070        p.      BEQ      0x2074 ; _printf_core + 516
        0x00001f92:    2870        p(      CMP      r0,#0x70
        0x00001f94:    d104        ..      BNE      0x1fa0 ; _printf_core + 304
        0x00001f96:    e0a7        ..      B        0x20e8 ; _printf_core + 632
        0x00001f98:    2875        u(      CMP      r0,#0x75
        0x00001f9a:    d06c        l.      BEQ      0x2076 ; _printf_core + 518
        0x00001f9c:    2878        x(      CMP      r0,#0x78
        0x00001f9e:    d06b        k.      BEQ      0x2078 ; _printf_core + 520
        0x00001fa0:    9a14        ..      LDR      r2,[sp,#0x50]
        0x00001fa2:    9913        ..      LDR      r1,[sp,#0x4c]
        0x00001fa4:    4790        .G      BLX      r2
        0x00001fa6:    1c76        v.      ADDS     r6,r6,#1
        0x00001fa8:    e062        b.      B        0x2070 ; _printf_core + 512
        0x00001faa:    0260        `.      LSLS     r0,r4,#9
        0x00001fac:    0f40        @.      LSRS     r0,r0,#29
        0x00001fae:    2802        .(      CMP      r0,#2
        0x00001fb0:    d007        ..      BEQ      0x1fc2 ; _printf_core + 338
        0x00001fb2:    2803        .(      CMP      r0,#3
        0x00001fb4:    d00a        ..      BEQ      0x1fcc ; _printf_core + 348
        0x00001fb6:    2804        .(      CMP      r0,#4
        0x00001fb8:    6838        8h      LDR      r0,[r7,#0]
        0x00001fba:    d00a        ..      BEQ      0x1fd2 ; _printf_core + 354
        0x00001fbc:    6006        .`      STR      r6,[r0,#0]
        0x00001fbe:    1d3f        ?.      ADDS     r7,r7,#4
        0x00001fc0:    e056        V.      B        0x2070 ; _printf_core + 512
        0x00001fc2:    6838        8h      LDR      r0,[r7,#0]
        0x00001fc4:    17f1        ..      ASRS     r1,r6,#31
        0x00001fc6:    6006        .`      STR      r6,[r0,#0]
        0x00001fc8:    6041        A`      STR      r1,[r0,#4]
        0x00001fca:    e7f8        ..      B        0x1fbe ; _printf_core + 334
        0x00001fcc:    6838        8h      LDR      r0,[r7,#0]
        0x00001fce:    8006        ..      STRH     r6,[r0,#0]
        0x00001fd0:    e7f5        ..      B        0x1fbe ; _printf_core + 334
        0x00001fd2:    7006        .p      STRB     r6,[r0,#0]
        0x00001fd4:    e7f3        ..      B        0x1fbe ; _printf_core + 334
        0x00001fd6:    7838        8x      LDRB     r0,[r7,#0]
        0x00001fd8:    4669        iF      MOV      r1,sp
        0x00001fda:    7408        .t      STRB     r0,[r1,#0x10]
        0x00001fdc:    2000        .       MOVS     r0,#0
        0x00001fde:    7448        Ht      STRB     r0,[r1,#0x11]
        0x00001fe0:    a804        ..      ADD      r0,sp,#0x10
        0x00001fe2:    9003        ..      STR      r0,[sp,#0xc]
        0x00001fe4:    2001        .       MOVS     r0,#1
        0x00001fe6:    e003        ..      B        0x1ff0 ; _printf_core + 384
        0x00001fe8:    6838        8h      LDR      r0,[r7,#0]
        0x00001fea:    9003        ..      STR      r0,[sp,#0xc]
        0x00001fec:    2000        .       MOVS     r0,#0
        0x00001fee:    43c0        .C      MVNS     r0,r0
        0x00001ff0:    1d3f        ?.      ADDS     r7,r7,#4
        0x00001ff2:    0761        a.      LSLS     r1,r4,#29
        0x00001ff4:    d50f        ..      BPL      0x2016 ; _printf_core + 422
        0x00001ff6:    2100        .!      MOVS     r1,#0
        0x00001ff8:    e001        ..      B        0x1ffe ; _printf_core + 398
        0x00001ffa:    9901        ..      LDR      r1,[sp,#4]
        0x00001ffc:    1c49        I.      ADDS     r1,r1,#1
        0x00001ffe:    9a02        ..      LDR      r2,[sp,#8]
        0x00002000:    9101        ..      STR      r1,[sp,#4]
        0x00002002:    4291        .B      CMP      r1,r2
        0x00002004:    da13        ..      BGE      0x202e ; _printf_core + 446
        0x00002006:    4281        .B      CMP      r1,r0
        0x00002008:    dbf7        ..      BLT      0x1ffa ; _printf_core + 394
        0x0000200a:    9a01        ..      LDR      r2,[sp,#4]
        0x0000200c:    9903        ..      LDR      r1,[sp,#0xc]
        0x0000200e:    5c89        .\      LDRB     r1,[r1,r2]
        0x00002010:    2900        .)      CMP      r1,#0
        0x00002012:    d1f2        ..      BNE      0x1ffa ; _printf_core + 394
        0x00002014:    e00b        ..      B        0x202e ; _printf_core + 446
        0x00002016:    2100        .!      MOVS     r1,#0
        0x00002018:    e001        ..      B        0x201e ; _printf_core + 430
        0x0000201a:    9901        ..      LDR      r1,[sp,#4]
        0x0000201c:    1c49        I.      ADDS     r1,r1,#1
        0x0000201e:    9101        ..      STR      r1,[sp,#4]
        0x00002020:    4281        .B      CMP      r1,r0
        0x00002022:    dbfa        ..      BLT      0x201a ; _printf_core + 426
        0x00002024:    9a01        ..      LDR      r2,[sp,#4]
        0x00002026:    9903        ..      LDR      r1,[sp,#0xc]
        0x00002028:    5c89        .\      LDRB     r1,[r1,r2]
        0x0000202a:    2900        .)      CMP      r1,#0
        0x0000202c:    d1f5        ..      BNE      0x201a ; _printf_core + 426
        0x0000202e:    9901        ..      LDR      r1,[sp,#4]
        0x00002030:    9800        ..      LDR      r0,[sp,#0]
        0x00002032:    9a13        ..      LDR      r2,[sp,#0x4c]
        0x00002034:    1a40        @.      SUBS     r0,r0,r1
        0x00002036:    9000        ..      STR      r0,[sp,#0]
        0x00002038:    4621        !F      MOV      r1,r4
        0x0000203a:    9b14        ..      LDR      r3,[sp,#0x50]
        0x0000203c:    f000f93c    ..<.    BL       _printf_pre_padding ; 0x22b8
        0x00002040:    9901        ..      LDR      r1,[sp,#4]
        0x00002042:    1980        ..      ADDS     r0,r0,r6
        0x00002044:    1846        F.      ADDS     r6,r0,r1
        0x00002046:    e007        ..      B        0x2058 ; _printf_core + 488
        0x00002048:    9803        ..      LDR      r0,[sp,#0xc]
        0x0000204a:    9903        ..      LDR      r1,[sp,#0xc]
        0x0000204c:    7800        .x      LDRB     r0,[r0,#0]
        0x0000204e:    1c49        I.      ADDS     r1,r1,#1
        0x00002050:    9103        ..      STR      r1,[sp,#0xc]
        0x00002052:    9a14        ..      LDR      r2,[sp,#0x50]
        0x00002054:    9913        ..      LDR      r1,[sp,#0x4c]
        0x00002056:    4790        .G      BLX      r2
        0x00002058:    9801        ..      LDR      r0,[sp,#4]
        0x0000205a:    1e40        @.      SUBS     r0,r0,#1
        0x0000205c:    9001        ..      STR      r0,[sp,#4]
        0x0000205e:    1c40        @.      ADDS     r0,r0,#1
        0x00002060:    d1f2        ..      BNE      0x2048 ; _printf_core + 472
        0x00002062:    4621        !F      MOV      r1,r4
        0x00002064:    9b14        ..      LDR      r3,[sp,#0x50]
        0x00002066:    9a13        ..      LDR      r2,[sp,#0x4c]
        0x00002068:    9800        ..      LDR      r0,[sp,#0]
        0x0000206a:    f000f915    ....    BL       _printf_post_padding ; 0x2298
        0x0000206e:    1986        ..      ADDS     r6,r0,r6
        0x00002070:    1c6d        m.      ADDS     r5,r5,#1
        0x00002072:    e70a        ..      B        0x1e8a ; _printf_core + 26
        0x00002074:    e041        A.      B        0x20fa ; _printf_core + 650
        0x00002076:    e033        3.      B        0x20e0 ; _printf_core + 624
        0x00002078:    e034        4.      B        0x20e4 ; _printf_core + 628
        0x0000207a:    200a        .       MOVS     r0,#0xa
        0x0000207c:    2100        .!      MOVS     r1,#0
        0x0000207e:    9004        ..      STR      r0,[sp,#0x10]
        0x00002080:    9105        ..      STR      r1,[sp,#0x14]
        0x00002082:    0260        `.      LSLS     r0,r4,#9
        0x00002084:    0f41        A.      LSRS     r1,r0,#29
        0x00002086:    2902        .)      CMP      r1,#2
        0x00002088:    d005        ..      BEQ      0x2096 ; _printf_core + 550
        0x0000208a:    cf01        ..      LDM      r7!,{r0}
        0x0000208c:    17c2        ..      ASRS     r2,r0,#31
        0x0000208e:    4694        .F      MOV      r12,r2
        0x00002090:    2903        .)      CMP      r1,#3
        0x00002092:    d005        ..      BEQ      0x20a0 ; _printf_core + 560
        0x00002094:    e007        ..      B        0x20a6 ; _printf_core + 566
        0x00002096:    1dff        ..      ADDS     r7,r7,#7
        0x00002098:    08ff        ..      LSRS     r7,r7,#3
        0x0000209a:    00ff        ..      LSLS     r7,r7,#3
        0x0000209c:    cf03        ..      LDM      r7!,{r0,r1}
        0x0000209e:    e006        ..      B        0x20ae ; _printf_core + 574
        0x000020a0:    b200        ..      SXTH     r0,r0
        0x000020a2:    17c2        ..      ASRS     r2,r0,#31
        0x000020a4:    4694        .F      MOV      r12,r2
        0x000020a6:    2904        .)      CMP      r1,#4
        0x000020a8:    d102        ..      BNE      0x20b0 ; _printf_core + 576
        0x000020aa:    b240        @.      SXTB     r0,r0
        0x000020ac:    17c1        ..      ASRS     r1,r0,#31
        0x000020ae:    468c        .F      MOV      r12,r1
        0x000020b0:    2200        ."      MOVS     r2,#0
        0x000020b2:    4661        aF      MOV      r1,r12
        0x000020b4:    4594        .E      CMP      r12,r2
        0x000020b6:    da06        ..      BGE      0x20c6 ; _printf_core + 598
        0x000020b8:    460a        .F      MOV      r2,r1
        0x000020ba:    2100        .!      MOVS     r1,#0
        0x000020bc:    4240        @B      RSBS     r0,r0,#0
        0x000020be:    4191        .A      SBCS     r1,r1,r2
        0x000020c0:    468c        .F      MOV      r12,r1
        0x000020c2:    212d        -!      MOVS     r1,#0x2d
        0x000020c4:    e002        ..      B        0x20cc ; _printf_core + 604
        0x000020c6:    0521        !.      LSLS     r1,r4,#20
        0x000020c8:    d504        ..      BPL      0x20d4 ; _printf_core + 612
        0x000020ca:    212b        +!      MOVS     r1,#0x2b
        0x000020cc:    466a        jF      MOV      r2,sp
        0x000020ce:    7611        .v      STRB     r1,[r2,#0x18]
        0x000020d0:    2101        .!      MOVS     r1,#1
        0x000020d2:    e003        ..      B        0x20dc ; _printf_core + 620
        0x000020d4:    07e1        ..      LSLS     r1,r4,#31
        0x000020d6:    d001        ..      BEQ      0x20dc ; _printf_core + 620
        0x000020d8:    2120         !      MOVS     r1,#0x20
        0x000020da:    e7f7        ..      B        0x20cc ; _printf_core + 604
        0x000020dc:    9101        ..      STR      r1,[sp,#4]
        0x000020de:    e055        U.      B        0x218c ; _printf_core + 796
        0x000020e0:    200a        .       MOVS     r0,#0xa
        0x000020e2:    e00b        ..      B        0x20fc ; _printf_core + 652
        0x000020e4:    2010        .       MOVS     r0,#0x10
        0x000020e6:    e009        ..      B        0x20fc ; _printf_core + 652
        0x000020e8:    2010        .       MOVS     r0,#0x10
        0x000020ea:    9004        ..      STR      r0,[sp,#0x10]
        0x000020ec:    2100        .!      MOVS     r1,#0
        0x000020ee:    2004        .       MOVS     r0,#4
        0x000020f0:    4304        .C      ORRS     r4,r4,r0
        0x000020f2:    2008        .       MOVS     r0,#8
        0x000020f4:    9105        ..      STR      r1,[sp,#0x14]
        0x000020f6:    9002        ..      STR      r0,[sp,#8]
        0x000020f8:    e003        ..      B        0x2102 ; _printf_core + 658
        0x000020fa:    2008        .       MOVS     r0,#8
        0x000020fc:    2100        .!      MOVS     r1,#0
        0x000020fe:    9105        ..      STR      r1,[sp,#0x14]
        0x00002100:    9004        ..      STR      r0,[sp,#0x10]
        0x00002102:    0260        `.      LSLS     r0,r4,#9
        0x00002104:    0f41        A.      LSRS     r1,r0,#29
        0x00002106:    2902        .)      CMP      r1,#2
        0x00002108:    d005        ..      BEQ      0x2116 ; _printf_core + 678
        0x0000210a:    cf01        ..      LDM      r7!,{r0}
        0x0000210c:    2200        ."      MOVS     r2,#0
        0x0000210e:    4694        .F      MOV      r12,r2
        0x00002110:    2903        .)      CMP      r1,#3
        0x00002112:    d006        ..      BEQ      0x2122 ; _printf_core + 690
        0x00002114:    e006        ..      B        0x2124 ; _printf_core + 692
        0x00002116:    1dff        ..      ADDS     r7,r7,#7
        0x00002118:    08ff        ..      LSRS     r7,r7,#3
        0x0000211a:    00ff        ..      LSLS     r7,r7,#3
        0x0000211c:    cf03        ..      LDM      r7!,{r0,r1}
        0x0000211e:    468c        .F      MOV      r12,r1
        0x00002120:    e003        ..      B        0x212a ; _printf_core + 698
        0x00002122:    b280        ..      UXTH     r0,r0
        0x00002124:    2904        .)      CMP      r1,#4
        0x00002126:    d100        ..      BNE      0x212a ; _printf_core + 698
        0x00002128:    b2c0        ..      UXTB     r0,r0
        0x0000212a:    2100        .!      MOVS     r1,#0
        0x0000212c:    9101        ..      STR      r1,[sp,#4]
        0x0000212e:    0721        !.      LSLS     r1,r4,#28
        0x00002130:    d52c        ,.      BPL      0x218c ; _printf_core + 796
        0x00002132:    7829        )x      LDRB     r1,[r5,#0]
        0x00002134:    9103        ..      STR      r1,[sp,#0xc]
        0x00002136:    2970        p)      CMP      r1,#0x70
        0x00002138:    d006        ..      BEQ      0x2148 ; _printf_core + 728
        0x0000213a:    9a04        ..      LDR      r2,[sp,#0x10]
        0x0000213c:    2110        .!      MOVS     r1,#0x10
        0x0000213e:    9b05        ..      LDR      r3,[sp,#0x14]
        0x00002140:    404a        J@      EORS     r2,r2,r1
        0x00002142:    431a        .C      ORRS     r2,r2,r3
        0x00002144:    d005        ..      BEQ      0x2152 ; _printf_core + 738
        0x00002146:    e00e        ..      B        0x2166 ; _printf_core + 758
        0x00002148:    2140        @!      MOVS     r1,#0x40
        0x0000214a:    466a        jF      MOV      r2,sp
        0x0000214c:    7611        .v      STRB     r1,[r2,#0x18]
        0x0000214e:    2101        .!      MOVS     r1,#1
        0x00002150:    e008        ..      B        0x2164 ; _printf_core + 756
        0x00002152:    4661        aF      MOV      r1,r12
        0x00002154:    4301        .C      ORRS     r1,r1,r0
        0x00002156:    d006        ..      BEQ      0x2166 ; _printf_core + 758
        0x00002158:    2130        0!      MOVS     r1,#0x30
        0x0000215a:    466a        jF      MOV      r2,sp
        0x0000215c:    7611        .v      STRB     r1,[r2,#0x18]
        0x0000215e:    9903        ..      LDR      r1,[sp,#0xc]
        0x00002160:    7651        Qv      STRB     r1,[r2,#0x19]
        0x00002162:    2102        .!      MOVS     r1,#2
        0x00002164:    9101        ..      STR      r1,[sp,#4]
        0x00002166:    9a04        ..      LDR      r2,[sp,#0x10]
        0x00002168:    2108        .!      MOVS     r1,#8
        0x0000216a:    9b05        ..      LDR      r3,[sp,#0x14]
        0x0000216c:    404a        J@      EORS     r2,r2,r1
        0x0000216e:    431a        .C      ORRS     r2,r2,r3
        0x00002170:    d10c        ..      BNE      0x218c ; _printf_core + 796
        0x00002172:    4661        aF      MOV      r1,r12
        0x00002174:    4301        .C      ORRS     r1,r1,r0
        0x00002176:    d101        ..      BNE      0x217c ; _printf_core + 780
        0x00002178:    0761        a.      LSLS     r1,r4,#29
        0x0000217a:    d507        ..      BPL      0x218c ; _printf_core + 796
        0x0000217c:    2130        0!      MOVS     r1,#0x30
        0x0000217e:    466a        jF      MOV      r2,sp
        0x00002180:    7611        .v      STRB     r1,[r2,#0x18]
        0x00002182:    2101        .!      MOVS     r1,#1
        0x00002184:    9101        ..      STR      r1,[sp,#4]
        0x00002186:    9902        ..      LDR      r1,[sp,#8]
        0x00002188:    1e49        I.      SUBS     r1,r1,#1
        0x0000218a:    9102        ..      STR      r1,[sp,#8]
        0x0000218c:    7829        )x      LDRB     r1,[r5,#0]
        0x0000218e:    2958        X)      CMP      r1,#0x58
        0x00002190:    d004        ..      BEQ      0x219c ; _printf_core + 812
        0x00002192:    a137        7.      ADR      r1,{pc}+0xde ; 0x2270
        0x00002194:    9103        ..      STR      r1,[sp,#0xc]
        0x00002196:    a90f        ..      ADD      r1,sp,#0x3c
        0x00002198:    910f        ..      STR      r1,[sp,#0x3c]
        0x0000219a:    e00d        ..      B        0x21b8 ; _printf_core + 840
        0x0000219c:    a139        9.      ADR      r1,{pc}+0xe8 ; 0x2284
        0x0000219e:    e7f9        ..      B        0x2194 ; _printf_core + 804
        0x000021a0:    4661        aF      MOV      r1,r12
        0x000021a2:    9b05        ..      LDR      r3,[sp,#0x14]
        0x000021a4:    9a04        ..      LDR      r2,[sp,#0x10]
        0x000021a6:    f7fdffc9    ....    BL       __aeabi_uldivmod ; 0x13c
        0x000021aa:    9b03        ..      LDR      r3,[sp,#0xc]
        0x000021ac:    468c        .F      MOV      r12,r1
        0x000021ae:    5c9b        .\      LDRB     r3,[r3,r2]
        0x000021b0:    9a0f        ..      LDR      r2,[sp,#0x3c]
        0x000021b2:    1e52        R.      SUBS     r2,r2,#1
        0x000021b4:    920f        ..      STR      r2,[sp,#0x3c]
        0x000021b6:    7013        .p      STRB     r3,[r2,#0]
        0x000021b8:    4661        aF      MOV      r1,r12
        0x000021ba:    4301        .C      ORRS     r1,r1,r0
        0x000021bc:    d1f0        ..      BNE      0x21a0 ; _printf_core + 816
        0x000021be:    980f        ..      LDR      r0,[sp,#0x3c]
        0x000021c0:    a907        ..      ADD      r1,sp,#0x1c
        0x000021c2:    1a08        ..      SUBS     r0,r1,r0
        0x000021c4:    3020         0      ADDS     r0,r0,#0x20
        0x000021c6:    9003        ..      STR      r0,[sp,#0xc]
        0x000021c8:    0760        `.      LSLS     r0,r4,#29
        0x000021ca:    d504        ..      BPL      0x21d6 ; _printf_core + 870
        0x000021cc:    2001        .       MOVS     r0,#1
        0x000021ce:    0400        ..      LSLS     r0,r0,#16
        0x000021d0:    4384        .C      BICS     r4,r4,r0
        0x000021d2:    9802        ..      LDR      r0,[sp,#8]
        0x000021d4:    e001        ..      B        0x21da ; _printf_core + 874
        0x000021d6:    2001        .       MOVS     r0,#1
        0x000021d8:    9002        ..      STR      r0,[sp,#8]
        0x000021da:    9903        ..      LDR      r1,[sp,#0xc]
        0x000021dc:    4288        .B      CMP      r0,r1
        0x000021de:    dd01        ..      BLE      0x21e4 ; _printf_core + 884
        0x000021e0:    1a40        @.      SUBS     r0,r0,r1
        0x000021e2:    e000        ..      B        0x21e6 ; _printf_core + 886
        0x000021e4:    2000        .       MOVS     r0,#0
        0x000021e6:    1841        A.      ADDS     r1,r0,r1
        0x000021e8:    9002        ..      STR      r0,[sp,#8]
        0x000021ea:    9801        ..      LDR      r0,[sp,#4]
        0x000021ec:    1809        ..      ADDS     r1,r1,r0
        0x000021ee:    9800        ..      LDR      r0,[sp,#0]
        0x000021f0:    1a40        @.      SUBS     r0,r0,r1
        0x000021f2:    9000        ..      STR      r0,[sp,#0]
        0x000021f4:    03e0        ..      LSLS     r0,r4,#15
        0x000021f6:    d406        ..      BMI      0x2206 ; _printf_core + 918
        0x000021f8:    4621        !F      MOV      r1,r4
        0x000021fa:    9b14        ..      LDR      r3,[sp,#0x50]
        0x000021fc:    9a13        ..      LDR      r2,[sp,#0x4c]
        0x000021fe:    9800        ..      LDR      r0,[sp,#0]
        0x00002200:    f000f85a    ..Z.    BL       _printf_pre_padding ; 0x22b8
        0x00002204:    1986        ..      ADDS     r6,r0,r6
        0x00002206:    2000        .       MOVS     r0,#0
        0x00002208:    9004        ..      STR      r0,[sp,#0x10]
        0x0000220a:    e008        ..      B        0x221e ; _printf_core + 942
        0x0000220c:    a906        ..      ADD      r1,sp,#0x18
        0x0000220e:    5c08        .\      LDRB     r0,[r1,r0]
        0x00002210:    9a14        ..      LDR      r2,[sp,#0x50]
        0x00002212:    9913        ..      LDR      r1,[sp,#0x4c]
        0x00002214:    4790        .G      BLX      r2
        0x00002216:    9804        ..      LDR      r0,[sp,#0x10]
        0x00002218:    1c40        @.      ADDS     r0,r0,#1
        0x0000221a:    1c76        v.      ADDS     r6,r6,#1
        0x0000221c:    9004        ..      STR      r0,[sp,#0x10]
        0x0000221e:    9901        ..      LDR      r1,[sp,#4]
        0x00002220:    4288        .B      CMP      r0,r1
        0x00002222:    dbf3        ..      BLT      0x220c ; _printf_core + 924
        0x00002224:    03e0        ..      LSLS     r0,r4,#15
        0x00002226:    d50c        ..      BPL      0x2242 ; _printf_core + 978
        0x00002228:    4621        !F      MOV      r1,r4
        0x0000222a:    9b14        ..      LDR      r3,[sp,#0x50]
        0x0000222c:    9a13        ..      LDR      r2,[sp,#0x4c]
        0x0000222e:    9800        ..      LDR      r0,[sp,#0]
        0x00002230:    f000f842    ..B.    BL       _printf_pre_padding ; 0x22b8
        0x00002234:    1986        ..      ADDS     r6,r0,r6
        0x00002236:    e004        ..      B        0x2242 ; _printf_core + 978
        0x00002238:    9a14        ..      LDR      r2,[sp,#0x50]
        0x0000223a:    2030        0       MOVS     r0,#0x30
        0x0000223c:    9913        ..      LDR      r1,[sp,#0x4c]
        0x0000223e:    4790        .G      BLX      r2
        0x00002240:    1c76        v.      ADDS     r6,r6,#1
        0x00002242:    9902        ..      LDR      r1,[sp,#8]
        0x00002244:    1e48        H.      SUBS     r0,r1,#1
        0x00002246:    9002        ..      STR      r0,[sp,#8]
        0x00002248:    2900        .)      CMP      r1,#0
        0x0000224a:    dcf5        ..      BGT      0x2238 ; _printf_core + 968
        0x0000224c:    e008        ..      B        0x2260 ; _printf_core + 1008
        0x0000224e:    980f        ..      LDR      r0,[sp,#0x3c]
        0x00002250:    990f        ..      LDR      r1,[sp,#0x3c]
        0x00002252:    7800        .x      LDRB     r0,[r0,#0]
        0x00002254:    1c49        I.      ADDS     r1,r1,#1
        0x00002256:    910f        ..      STR      r1,[sp,#0x3c]
        0x00002258:    9a14        ..      LDR      r2,[sp,#0x50]
        0x0000225a:    9913        ..      LDR      r1,[sp,#0x4c]
        0x0000225c:    4790        .G      BLX      r2
        0x0000225e:    1c76        v.      ADDS     r6,r6,#1
        0x00002260:    9903        ..      LDR      r1,[sp,#0xc]
        0x00002262:    1e48        H.      SUBS     r0,r1,#1
        0x00002264:    9003        ..      STR      r0,[sp,#0xc]
        0x00002266:    2900        .)      CMP      r1,#0
        0x00002268:    dcf1        ..      BGT      0x224e ; _printf_core + 990
        0x0000226a:    e6fa        ..      B        0x2062 ; _printf_core + 498
    $d
        0x0000226c:    00012809    .(..    DCD    75785
        0x00002270:    33323130    0123    DCD    858927408
        0x00002274:    37363534    4567    DCD    926299444
        0x00002278:    62613938    89ab    DCD    1650538808
        0x0000227c:    66656463    cdef    DCD    1717920867
        0x00002280:    00000000    ....    DCD    0
        0x00002284:    33323130    0123    DCD    858927408
        0x00002288:    37363534    4567    DCD    926299444
        0x0000228c:    42413938    89AB    DCD    1111570744
        0x00002290:    46454443    CDEF    DCD    1178944579
        0x00002294:    00000000    ....    DCD    0
    $t
    i._printf_post_padding
    _printf_post_padding
        0x00002298:    b5f8        ..      PUSH     {r3-r7,lr}
        0x0000229a:    4604        .F      MOV      r4,r0
        0x0000229c:    2500        .%      MOVS     r5,#0
        0x0000229e:    461e        .F      MOV      r6,r3
        0x000022a0:    4617        .F      MOV      r7,r2
        0x000022a2:    0488        ..      LSLS     r0,r1,#18
        0x000022a4:    d404        ..      BMI      0x22b0 ; _printf_post_padding + 24
        0x000022a6:    e005        ..      B        0x22b4 ; _printf_post_padding + 28
        0x000022a8:    4639        9F      MOV      r1,r7
        0x000022aa:    2020                MOVS     r0,#0x20
        0x000022ac:    47b0        .G      BLX      r6
        0x000022ae:    1c6d        m.      ADDS     r5,r5,#1
        0x000022b0:    1e64        d.      SUBS     r4,r4,#1
        0x000022b2:    d5f9        ..      BPL      0x22a8 ; _printf_post_padding + 16
        0x000022b4:    4628        (F      MOV      r0,r5
        0x000022b6:    bdf8        ..      POP      {r3-r7,pc}
    i._printf_pre_padding
    _printf_pre_padding
        0x000022b8:    b5ff        ..      PUSH     {r0-r7,lr}
        0x000022ba:    4604        .F      MOV      r4,r0
        0x000022bc:    2500        .%      MOVS     r5,#0
        0x000022be:    b081        ..      SUB      sp,sp,#4
        0x000022c0:    461e        .F      MOV      r6,r3
        0x000022c2:    03c8        ..      LSLS     r0,r1,#15
        0x000022c4:    d501        ..      BPL      0x22ca ; _printf_pre_padding + 18
        0x000022c6:    2730        0'      MOVS     r7,#0x30
        0x000022c8:    e000        ..      B        0x22cc ; _printf_pre_padding + 20
        0x000022ca:    2720         '      MOVS     r7,#0x20
        0x000022cc:    0488        ..      LSLS     r0,r1,#18
        0x000022ce:    d504        ..      BPL      0x22da ; _printf_pre_padding + 34
        0x000022d0:    e005        ..      B        0x22de ; _printf_pre_padding + 38
        0x000022d2:    4638        8F      MOV      r0,r7
        0x000022d4:    9903        ..      LDR      r1,[sp,#0xc]
        0x000022d6:    47b0        .G      BLX      r6
        0x000022d8:    1c6d        m.      ADDS     r5,r5,#1
        0x000022da:    1e64        d.      SUBS     r4,r4,#1
        0x000022dc:    d5f9        ..      BPL      0x22d2 ; _printf_pre_padding + 26
        0x000022de:    4628        (F      MOV      r0,r5
        0x000022e0:    b005        ..      ADD      sp,sp,#0x14
        0x000022e2:    bdf0        ..      POP      {r4-r7,pc}
    i.a7535_format
    a7535_format
;;; ..\src\main.c
;;;355    {
        0x000022e4:    b538        8.      PUSH     {r3-r5,lr}
        0x000022e6:    20ff        .       MOVS     r0,#0xff
        0x000022e8:    7548        Hu      STRB     r0,[r1,#0x15]
;;; ..\src\main.c (355)
        0x000022ea:    460c        .F      MOV      r4,r1
;;;356        // ????0xFF
;;;357        controlData->ctrl_data.reserved = 0xFF;
;;;358    
;;;359        printf("\n");
        0x000022ec:    a01e        ..      ADR      r0,{pc}+0x7c ; 0x2368
        0x000022ee:    f7fffd85    ....    BL       __0printf$8 ; 0x1dfc
;;;360        printf("===================================\n");
        0x000022f2:    a01e        ..      ADR      r0,{pc}+0x7a ; 0x236c
        0x000022f4:    f7fffd82    ....    BL       __0printf$8 ; 0x1dfc
;;;361    		printf("unique_id      : 0x%02x 0x%02x 0x%02x 0x%02x\n", controlData->unique_id[0], controlData->unique_id[1], controlData->unique_id[2], controlData->unique_id[3]);
        0x000022f8:    7a60        `z      LDRB     r0,[r4,#9]
        0x000022fa:    9000        ..      STR      r0,[sp,#0]
        0x000022fc:    7a23        #z      LDRB     r3,[r4,#8]
        0x000022fe:    79e2        .y      LDRB     r2,[r4,#7]
        0x00002300:    79a1        .y      LDRB     r1,[r4,#6]
        0x00002302:    a024        $.      ADR      r0,{pc}+0x92 ; 0x2394
        0x00002304:    f7fffd7a    ..z.    BL       __0printf$8 ; 0x1dfc
;;;362        printf("main_mode      : 0x%02x\n", controlData->ctrl_data.main_mode);
        0x00002308:    7aa1        .z      LDRB     r1,[r4,#0xa]
        0x0000230a:    a02e        ..      ADR      r0,{pc}+0xba ; 0x23c4
        0x0000230c:    f7fffd76    ..v.    BL       __0printf$8 ; 0x1dfc
;;;363        printf("fan_speed      : 0x%02x\n", controlData->ctrl_data.fan_speed);
        0x00002310:    7ae1        .z      LDRB     r1,[r4,#0xb]
        0x00002312:    a033        3.      ADR      r0,{pc}+0xce ; 0x23e0
        0x00002314:    f7fffd72    ..r.    BL       __0printf$8 ; 0x1dfc
;;;364        printf("air_direction  : 0x%02x\n", controlData->ctrl_data.air_direction);
        0x00002318:    7b21        !{      LDRB     r1,[r4,#0xc]
        0x0000231a:    a038        8.      ADR      r0,{pc}+0xe2 ; 0x23fc
        0x0000231c:    f7fffd6e    ..n.    BL       __0printf$8 ; 0x1dfc
;;;365        printf("air_type       : 0x%02x\n", controlData->ctrl_data.air_type);
        0x00002320:    7b61        a{      LDRB     r1,[r4,#0xd]
        0x00002322:    a03d        =.      ADR      r0,{pc}+0xf6 ; 0x2418
        0x00002324:    f7fffd6a    ..j.    BL       __0printf$8 ; 0x1dfc
;;;366        printf("time_setting   : 0x%02x\n", controlData->ctrl_data.time_setting);
        0x00002328:    7ba1        .{      LDRB     r1,[r4,#0xe]
        0x0000232a:    a042        B.      ADR      r0,{pc}+0x10a ; 0x2434
        0x0000232c:    f7fffd66    ..f.    BL       __0printf$8 ; 0x1dfc
;;;367        printf("remain_hours   : 0x%02x\n", controlData->ctrl_data.remain_hours);
        0x00002330:    7be1        .{      LDRB     r1,[r4,#0xf]
        0x00002332:    a047        G.      ADR      r0,{pc}+0x11e ; 0x2450
        0x00002334:    f7fffd62    ..b.    BL       __0printf$8 ; 0x1dfc
;;;368        printf("remain_minutes : 0x%02x\n", controlData->ctrl_data.remain_minutes);
        0x00002338:    7c21        !|      LDRB     r1,[r4,#0x10]
        0x0000233a:    a04c        L.      ADR      r0,{pc}+0x132 ; 0x246c
        0x0000233c:    f7fffd5e    ..^.    BL       __0printf$8 ; 0x1dfc
;;;369        printf("light_ctrl     : 0x%02x\n", controlData->ctrl_data.light_ctrl);
        0x00002340:    7c61        a|      LDRB     r1,[r4,#0x11]
        0x00002342:    a051        Q.      ADR      r0,{pc}+0x146 ; 0x2488
        0x00002344:    f7fffd5a    ..Z.    BL       __0printf$8 ; 0x1dfc
;;;370        printf("wifi_ctrl      : 0x%02x\n", controlData->ctrl_data.wifi_ctrl);
        0x00002348:    7ca1        .|      LDRB     r1,[r4,#0x12]
        0x0000234a:    a056        V.      ADR      r0,{pc}+0x15a ; 0x24a4
        0x0000234c:    f7fffd56    ..V.    BL       __0printf$8 ; 0x1dfc
;;;371        printf("voice_ctrl     : 0x%02x\n", controlData->ctrl_data.voice_ctrl);
        0x00002350:    7ce1        .|      LDRB     r1,[r4,#0x13]
        0x00002352:    a05b        [.      ADR      r0,{pc}+0x16e ; 0x24c0
        0x00002354:    f7fffd52    ..R.    BL       __0printf$8 ; 0x1dfc
;;;372        printf("model_type     : 0x%02x\n", controlData->ctrl_data.model_type);
        0x00002358:    7d21        !}      LDRB     r1,[r4,#0x14]
        0x0000235a:    a060        `.      ADR      r0,{pc}+0x182 ; 0x24dc
        0x0000235c:    f7fffd4e    ..N.    BL       __0printf$8 ; 0x1dfc
;;;373        printf("===================================\n");
        0x00002360:    a002        ..      ADR      r0,{pc}+0xc ; 0x236c
        0x00002362:    f7fffd4b    ..K.    BL       __0printf$8 ; 0x1dfc
;;;374    
;;;375    }
        0x00002366:    bd38        8.      POP      {r3-r5,pc}
    $d
        0x00002368:    0000000a    ....    DCD    10
        0x0000236c:    3d3d3d3d    ====    DCD    1027423549
        0x00002370:    3d3d3d3d    ====    DCD    1027423549
        0x00002374:    3d3d3d3d    ====    DCD    1027423549
        0x00002378:    3d3d3d3d    ====    DCD    1027423549
        0x0000237c:    3d3d3d3d    ====    DCD    1027423549
        0x00002380:    3d3d3d3d    ====    DCD    1027423549
        0x00002384:    3d3d3d3d    ====    DCD    1027423549
        0x00002388:    3d3d3d3d    ====    DCD    1027423549
        0x0000238c:    0a3d3d3d    ===.    DCD    171785533
        0x00002390:    00000000    ....    DCD    0
        0x00002394:    71696e75    uniq    DCD    1902734965
        0x00002398:    695f6575    ue_i    DCD    1767859573
        0x0000239c:    20202064    d       DCD    538976356
        0x000023a0:    3a202020       :    DCD    975183904
        0x000023a4:    25783020     0x%    DCD    628633632
        0x000023a8:    20783230    02x     DCD    544748080
        0x000023ac:    30257830    0x%0    DCD    807761968
        0x000023b0:    30207832    2x 0    DCD    807434290
        0x000023b4:    32302578    x%02    DCD    842016120
        0x000023b8:    78302078    x 0x    DCD    2016419960
        0x000023bc:    78323025    %02x    DCD    2016555045
        0x000023c0:    0000000a    ....    DCD    10
        0x000023c4:    6e69616d    main    DCD    1852399981
        0x000023c8:    646f6d5f    _mod    DCD    1685024095
        0x000023cc:    20202065    e       DCD    538976357
        0x000023d0:    3a202020       :    DCD    975183904
        0x000023d4:    25783020     0x%    DCD    628633632
        0x000023d8:    0a783230    02x.    DCD    175649328
        0x000023dc:    00000000    ....    DCD    0
        0x000023e0:    5f6e6166    fan_    DCD    1601069414
        0x000023e4:    65657073    spee    DCD    1701146739
        0x000023e8:    20202064    d       DCD    538976356
        0x000023ec:    3a202020       :    DCD    975183904
        0x000023f0:    25783020     0x%    DCD    628633632
        0x000023f4:    0a783230    02x.    DCD    175649328
        0x000023f8:    00000000    ....    DCD    0
        0x000023fc:    5f726961    air_    DCD    1601333601
        0x00002400:    65726964    dire    DCD    1701996900
        0x00002404:    6f697463    ctio    DCD    1869182051
        0x00002408:    3a20206e    n  :    DCD    975183982
        0x0000240c:    25783020     0x%    DCD    628633632
        0x00002410:    0a783230    02x.    DCD    175649328
        0x00002414:    00000000    ....    DCD    0
        0x00002418:    5f726961    air_    DCD    1601333601
        0x0000241c:    65707974    type    DCD    1701869940
        0x00002420:    20202020            DCD    538976288
        0x00002424:    3a202020       :    DCD    975183904
        0x00002428:    25783020     0x%    DCD    628633632
        0x0000242c:    0a783230    02x.    DCD    175649328
        0x00002430:    00000000    ....    DCD    0
        0x00002434:    656d6974    time    DCD    1701669236
        0x00002438:    7465735f    _set    DCD    1952805727
        0x0000243c:    676e6974    ting    DCD    1735289204
        0x00002440:    3a202020       :    DCD    975183904
        0x00002444:    25783020     0x%    DCD    628633632
        0x00002448:    0a783230    02x.    DCD    175649328
        0x0000244c:    00000000    ....    DCD    0
        0x00002450:    616d6572    rema    DCD    1634559346
        0x00002454:    685f6e69    in_h    DCD    1751084649
        0x00002458:    7372756f    ours    DCD    1936881007
        0x0000245c:    3a202020       :    DCD    975183904
        0x00002460:    25783020     0x%    DCD    628633632
        0x00002464:    0a783230    02x.    DCD    175649328
        0x00002468:    00000000    ....    DCD    0
        0x0000246c:    616d6572    rema    DCD    1634559346
        0x00002470:    6d5f6e69    in_m    DCD    1834970729
        0x00002474:    74756e69    inut    DCD    1953853033
        0x00002478:    3a207365    es :    DCD    975205221
        0x0000247c:    25783020     0x%    DCD    628633632
        0x00002480:    0a783230    02x.    DCD    175649328
        0x00002484:    00000000    ....    DCD    0
        0x00002488:    6867696c    ligh    DCD    1751607660
        0x0000248c:    74635f74    t_ct    DCD    1952669556
        0x00002490:    20206c72    rl      DCD    538995826
        0x00002494:    3a202020       :    DCD    975183904
        0x00002498:    25783020     0x%    DCD    628633632
        0x0000249c:    0a783230    02x.    DCD    175649328
        0x000024a0:    00000000    ....    DCD    0
        0x000024a4:    69666977    wifi    DCD    1768319351
        0x000024a8:    7274635f    _ctr    DCD    1920230239
        0x000024ac:    2020206c    l       DCD    538976364
        0x000024b0:    3a202020       :    DCD    975183904
        0x000024b4:    25783020     0x%    DCD    628633632
        0x000024b8:    0a783230    02x.    DCD    175649328
        0x000024bc:    00000000    ....    DCD    0
        0x000024c0:    63696f76    voic    DCD    1667854198
        0x000024c4:    74635f65    e_ct    DCD    1952669541
        0x000024c8:    20206c72    rl      DCD    538995826
        0x000024cc:    3a202020       :    DCD    975183904
        0x000024d0:    25783020     0x%    DCD    628633632
        0x000024d4:    0a783230    02x.    DCD    175649328
        0x000024d8:    00000000    ....    DCD    0
        0x000024dc:    65646f6d    mode    DCD    1701080941
        0x000024e0:    79745f6c    l_ty    DCD    2037669740
        0x000024e4:    20206570    pe      DCD    538994032
        0x000024e8:    3a202020       :    DCD    975183904
        0x000024ec:    25783020     0x%    DCD    628633632
        0x000024f0:    0a783230    02x.    DCD    175649328
        0x000024f4:    00000000    ....    DCD    0
    $t
    i.decode_data_1mbps_to_500kbps
    decode_data_1mbps_to_500kbps
;;; ..\src\main.c (341)
        0x000024f8:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000024fa:    460d        .F      MOV      r5,r1
        0x000024fc:    4616        .F      MOV      r6,r2
        0x000024fe:    4607        .F      MOV      r7,r0
        0x00002500:    42ab        .B      CMP      r3,r5
;;; ..\src\main.c (341)
        0x00002502:    d309        ..      BCC      0x2518 ; decode_data_1mbps_to_500kbps + 32
;;;342        if (decoded_len < encoded_len)
;;;343            return;
;;;344    
;;;345        for (int i = 0; i < encoded_len; i++)
        0x00002504:    2400        .$      MOVS     r4,#0
        0x00002506:    e005        ..      B        0x2514 ; decode_data_1mbps_to_500kbps + 28
        0x00002508:    0060        `.      LSLS     r0,r4,#1
        0x0000250a:    5a38        8Z      LDRH     r0,[r7,r0]
        0x0000250c:    f000f805    ....    BL       decode_double_bits ; 0x251a
        0x00002510:    5530        0U      STRB     r0,[r6,r4]
        0x00002512:    1c64        d.      ADDS     r4,r4,#1
        0x00002514:    42ac        .B      CMP      r4,r5
        0x00002516:    dbf7        ..      BLT      0x2508 ; decode_data_1mbps_to_500kbps + 16
;;;346        {
;;;347            decoded[i] = decode_double_bits(encoded[i]);
;;;348        }
;;;349    }
        0x00002518:    bdf0        ..      POP      {r4-r7,pc}
    i.decode_double_bits
    decode_double_bits
        0x0000251a:    b5f0        ..      PUSH     {r4-r7,lr}
;;; ..\src\main.c (309)
        0x0000251c:    2200        ."      MOVS     r2,#0
        0x0000251e:    250e        .%      MOVS     r5,#0xe
        0x00002520:    2607        .&      MOVS     r6,#7
;;;310        for (int i = 0; i < 8; i++)
        0x00002522:    4611        .F      MOV      r1,r2
        0x00002524:    2401        .$      MOVS     r4,#1
;;;311        {
;;;312            uint16_t two_bits = (encoded >> (14 - i * 2)) & 0x3; // 0x3 = 0b11
        0x00002526:    004b        K.      LSLS     r3,r1,#1
        0x00002528:    1aeb        ..      SUBS     r3,r5,r3
        0x0000252a:    4607        .F      MOV      r7,r0
        0x0000252c:    40df        .@      LSRS     r7,r7,r3
        0x0000252e:    07bb        ..      LSLS     r3,r7,#30
        0x00002530:    0f9b        ..      LSRS     r3,r3,#30
;;;313    
;;;314            if (two_bits == 0x3)       // 11 -> 1
        0x00002532:    2b03        .+      CMP      r3,#3
        0x00002534:    d104        ..      BNE      0x2540 ; decode_double_bits + 38
;;;315            {
;;;316                result |= (1 << (7 - i));
        0x00002536:    1a77        w.      SUBS     r7,r6,r1
        0x00002538:    4623        #F      MOV      r3,r4
        0x0000253a:    40bb        .@      LSLS     r3,r3,r7
        0x0000253c:    4313        .C      ORRS     r3,r3,r2
        0x0000253e:    b2da        ..      UXTB     r2,r3
        0x00002540:    1c49        I.      ADDS     r1,r1,#1
        0x00002542:    2908        .)      CMP      r1,#8
        0x00002544:    dbef        ..      BLT      0x2526 ; decode_double_bits + 12
;;;317            }
;;;318            else if (two_bits == 0x0)  // 00 -> 0
;;;319            {
;;;320                // result
;;;321            }
;;;322        }
;;;323        return ((result & 0xF0) >> 4) | ((result & 0x0F) << 4);
        0x00002546:    0910        ..      LSRS     r0,r2,#4
        0x00002548:    0711        ..      LSLS     r1,r2,#28
        0x0000254a:    0e09        ..      LSRS     r1,r1,#24
        0x0000254c:    4308        .C      ORRS     r0,r0,r1
;;;324    }
        0x0000254e:    bdf0        ..      POP      {r4-r7,pc}
    i.fputc
    fputc
;;; .\..\..\..\..\pan108\device\Source\pan_retarget.c
;;;139    {
        0x00002550:    b510        ..      PUSH     {r4,lr}
        0x00002552:    4604        .F      MOV      r4,r0
;;;140        SendChar(ch);
        0x00002554:    f7fffb36    ..6.    BL       SendChar ; 0x1bc4
;;;141        return ch;
        0x00002558:    4620         F      MOV      r0,r4
;;;142    }
        0x0000255a:    bd10        ..      POP      {r4,pc}
    i.main
    main
;;; ..\src\main.c
;;;107    {
        0x0000255c:    b08c        ..      SUB      sp,sp,#0x30
;;;108        BSP_ClockInit();
        0x0000255e:    f7fdff85    ....    BL       BSP_ClockInit ; 0x46c
;;;109        BSP_UartInit();
        0x00002562:    f7fef86d    ..m.    BL       BSP_UartInit ; 0x640
;;;110        BSP_GpioInit();
        0x00002566:    f7fdffcd    ....    BL       BSP_GpioInit ; 0x504
;;;111        BSP_KeyInit();
        0x0000256a:    f7fdffe3    ....    BL       BSP_KeyInit ; 0x534
;;;112    		BSP_OLEDInit();
        0x0000256e:    f7fef833    ..3.    BL       BSP_OLEDInit ; 0x5d8
;;;113    		OLED_Init();
        0x00002572:    f7fefb39    ..9.    BL       OLED_Init ; 0xbe8
;;;114        SYS_TEST("CPU @ %dHz\n", SystemCoreClock);
        0x00002576:    489a        .H      LDR      r0,[pc,#616] ; [0x27e0] = 0x20000000
        0x00002578:    6801        .h      LDR      r1,[r0,#0]
        0x0000257a:    a09a        ..      ADR      r0,{pc}+0x26a ; 0x27e4
        0x0000257c:    f7fffc3e    ..>.    BL       __0printf$8 ; 0x1dfc
;;;115    
;;;116    #if (INTERFACE_MODE == USE_SPI_3LINE)
;;;117        SYS_TEST("SPI-3LINE\n");
;;;118    #elif (INTERFACE_MODE == USE_I2C)
;;;119        SYS_TEST("IIC\n");
;;;120    #endif
;;;121    #if INTERFACE_MODE == USE_SPI_4LINE
;;;122        SYS_TEST("SPI-4LINE\n");
        0x00002580:    a09b        ..      ADR      r0,{pc}+0x270 ; 0x27f0
        0x00002582:    f7fffc3b    ..;.    BL       __0printf$8 ; 0x1dfc
;;;123    #endif
;;;124    
;;;125        RF_BusInit();
        0x00002586:    f7fffb07    ....    BL       RF_BusInit ; 0x1b98
;;;126        PAN216_Err_t ret = PAN216_Init();
        0x0000258a:    f7fefea1    ....    BL       PAN216_Init ; 0x12d0
        0x0000258e:    4c9b        .L      LDR      r4,[pc,#620] ; [0x27fc] = 0x40020200
;;;127        if (ret != PAN216_OK)
        0x00002590:    2800        .(      CMP      r0,#0
        0x00002592:    d005        ..      BEQ      0x25a0 ; main + 68
        0x00002594:    a09a        ..      ADR      r0,{pc}+0x26c ; 0x2800
        0x00002596:    f7fffc31    ..1.    BL       __0printf$8 ; 0x1dfc
        0x0000259a:    2001        .       MOVS     r0,#1
        0x0000259c:    6220         b      STR      r0,[r4,#0x20]
        0x0000259e:    e7fe        ..      B        0x259e ; main + 66
;;;128            goto err_init;
;;;129    #if (!EASY_RF)
;;;130        ret = PAN216_SetUpConfig((RFConfig_t *)&a7535_gRfConfig);
        0x000025a0:    489d        .H      LDR      r0,[pc,#628] ; [0x2818] = 0x32c0
        0x000025a2:    f7fff94f    ..O.    BL       PAN216_SetUpConfig ; 0x1844
;;;131    		now_rfconfig = (RFConfig_t *)&a7535_gRfConfig;
        0x000025a6:    4d9d        .M      LDR      r5,[pc,#628] ; [0x281c] = 0x20000040
        0x000025a8:    499b        .I      LDR      r1,[pc,#620] ; [0x2818] = 0x32c0
;;;132        if (ret != PAN216_OK)
        0x000025aa:    60e9        .`      STR      r1,[r5,#0xc]
        0x000025ac:    2800        .(      CMP      r0,#0
        0x000025ae:    d175        u.      BNE      0x269c ; main + 320
;;;133            goto err_setup;
;;;134    #endif
;;;135    		SYS_TEST("rf_init_ok\n");
        0x000025b0:    a09b        ..      ADR      r0,{pc}+0x270 ; 0x2820
        0x000025b2:    f7fffc23    ..#.    BL       __0printf$8 ; 0x1dfc
;;;136        PAN216_EnableInterfaceMuxIRQ(true);
        0x000025b6:    2001        .       MOVS     r0,#1
        0x000025b8:    f7fefd41    ..A.    BL       PAN216_EnableInterfaceMuxIRQ ; 0x103e
;;;137        PAN216_ConfigIT(RF_IT_RX_IRQ | RF_IT_CRC_ERR_IRQ);
        0x000025bc:    2011        .       MOVS     r0,#0x11
        0x000025be:    f7fefc91    ....    BL       PAN216_ConfigIT ; 0xee4
;;;138        PAN216_ClearIRQFlags(0xFF);
        0x000025c2:    20ff        .       MOVS     r0,#0xff
        0x000025c4:    f7fefc88    ....    BL       PAN216_ClearIRQFlags ; 0xed8
;;;139        PAN216_PrepareTRxWithAck(PAN216_RX, false);
        0x000025c8:    2100        .!      MOVS     r1,#0
        0x000025ca:    2001        .       MOVS     r0,#1
        0x000025cc:    f7fefef8    ....    BL       PAN216_PrepareTRxWithAck ; 0x13c0
;;;140        PAN216_RxStart();
        0x000025d0:    f7feff6e    ..n.    BL       PAN216_RxStart ; 0x14b0
;;;141    		OLED_Clear();
        0x000025d4:    f7fefad6    ....    BL       OLED_Clear ; 0xb84
;;;142    		OLED_ShowString(0, 16, "A7535", 12);
        0x000025d8:    230c        .#      MOVS     r3,#0xc
        0x000025da:    a294        ..      ADR      r2,{pc}+0x252 ; 0x282c
        0x000025dc:    2110        .!      MOVS     r1,#0x10
        0x000025de:    2000        .       MOVS     r0,#0
        0x000025e0:    f7fefbfa    ....    BL       OLED_ShowString ; 0xdd8
;;;143    		OLED_Refresh_Gram();
        0x000025e4:    f7fefb7a    ..z.    BL       OLED_Refresh_Gram ; 0xcdc
;;;144    		BSP_DelayMs(500);
        0x000025e8:    20ff        .       MOVS     r0,#0xff
        0x000025ea:    30f5        .0      ADDS     r0,r0,#0xf5
        0x000025ec:    f7fdff70    ..p.    BL       BSP_DelayMs ; 0x4d0
;;;145    
;;;146        while (1)
;;;147        {
;;;148    				u8 flag = 0;
;;;149    			
;;;150    				while (!IRQ_DETECTED && KEY1_UP && KEY2_UP && KEY3_UP && KEY4_UP)
        0x000025f0:    4f82        .O      LDR      r7,[pc,#520] ; [0x27fc] = 0x40020200
        0x000025f2:    4e82        .N      LDR      r6,[pc,#520] ; [0x27fc] = 0x40020200
        0x000025f4:    3780        .7      ADDS     r7,r7,#0x80
;;;151    				{
;;;152    					if (KEY1_UP && KEY2_UP && KEY3_UP && KEY4_UP)
        0x000025f6:    3640        @6      ADDS     r6,r6,#0x40
        0x000025f8:    e00e        ..      B        0x2618 ; main + 188
        0x000025fa:    6a70        pj      LDR      r0,[r6,#0x24]
        0x000025fc:    2801        .(      CMP      r0,#1
        0x000025fe:    d108        ..      BNE      0x2612 ; main + 182
        0x00002600:    6860        `h      LDR      r0,[r4,#4]
        0x00002602:    2801        .(      CMP      r0,#1
        0x00002604:    d105        ..      BNE      0x2612 ; main + 182
        0x00002606:    6ba0        .k      LDR      r0,[r4,#0x38]
        0x00002608:    2801        .(      CMP      r0,#1
        0x0000260a:    d102        ..      BNE      0x2612 ; main + 182
        0x0000260c:    6be0        .k      LDR      r0,[r4,#0x3c]
        0x0000260e:    2801        .(      CMP      r0,#1
        0x00002610:    d009        ..      BEQ      0x2626 ; main + 202
        0x00002612:    2001        .       MOVS     r0,#1
;;;153    					{
;;;154    						BSP_DelayMs(5);
        0x00002614:    f7fdff5c    ..\.    BL       BSP_DelayMs ; 0x4d0
        0x00002618:    6978        xi      LDR      r0,[r7,#0x14]
        0x0000261a:    2800        .(      CMP      r0,#0
        0x0000261c:    d00e        ..      BEQ      0x263c ; main + 224
        0x0000261e:    6a70        pj      LDR      r0,[r6,#0x24]
        0x00002620:    2801        .(      CMP      r0,#1
        0x00002622:    d002        ..      BEQ      0x262a ; main + 206
        0x00002624:    e00a        ..      B        0x263c ; main + 224
        0x00002626:    2005        .       MOVS     r0,#5
        0x00002628:    e7f4        ..      B        0x2614 ; main + 184
        0x0000262a:    6860        `h      LDR      r0,[r4,#4]
        0x0000262c:    2801        .(      CMP      r0,#1
        0x0000262e:    d105        ..      BNE      0x263c ; main + 224
        0x00002630:    6ba0        .k      LDR      r0,[r4,#0x38]
        0x00002632:    2801        .(      CMP      r0,#1
        0x00002634:    d102        ..      BNE      0x263c ; main + 224
        0x00002636:    6be0        .k      LDR      r0,[r4,#0x3c]
        0x00002638:    2801        .(      CMP      r0,#1
        0x0000263a:    d0de        ..      BEQ      0x25fa ; main + 158
;;;155    					}
;;;156    					else
;;;157    					{
;;;158    						BSP_DelayMs(1);
;;;159    					}
;;;160    						
;;;161    				}
;;;162    					
;;;163    				
;;;164    				if (KEY1_DOWN)
        0x0000263c:    6a70        pj      LDR      r0,[r6,#0x24]
        0x0000263e:    2800        .(      CMP      r0,#0
        0x00002640:    d009        ..      BEQ      0x2656 ; main + 250
        0x00002642:    6860        `h      LDR      r0,[r4,#4]
        0x00002644:    2800        .(      CMP      r0,#0
        0x00002646:    d02a        *.      BEQ      0x269e ; main + 322
        0x00002648:    6ba0        .k      LDR      r0,[r4,#0x38]
        0x0000264a:    2800        .(      CMP      r0,#0
        0x0000264c:    d042        B.      BEQ      0x26d4 ; main + 376
        0x0000264e:    6be0        .k      LDR      r0,[r4,#0x3c]
        0x00002650:    2800        .(      CMP      r0,#0
        0x00002652:    d051        Q.      BEQ      0x26f8 ; main + 412
        0x00002654:    e067        g.      B        0x2726 ; main + 458
;;;165            {
;;;166    						OLED_Clear();
        0x00002656:    f7fefa95    ....    BL       OLED_Clear ; 0xb84
;;;167    						OLED_ShowString(0, 16, "A7535", 12);
        0x0000265a:    230c        .#      MOVS     r3,#0xc
        0x0000265c:    a273        s.      ADR      r2,{pc}+0x1d0 ; 0x282c
        0x0000265e:    2110        .!      MOVS     r1,#0x10
        0x00002660:    2000        .       MOVS     r0,#0
        0x00002662:    f7fefbb9    ....    BL       OLED_ShowString ; 0xdd8
;;;168    						OLED_Refresh_Gram();
        0x00002666:    f7fefb39    ..9.    BL       OLED_Refresh_Gram ; 0xcdc
;;;169    					  BSP_DelayMs(500);
        0x0000266a:    20ff        .       MOVS     r0,#0xff
        0x0000266c:    30f5        .0      ADDS     r0,r0,#0xf5
        0x0000266e:    f7fdff2f    ../.    BL       BSP_DelayMs ; 0x4d0
;;;170    						
;;;171    						now_rfconfig = (RFConfig_t *)&a7535_gRfConfig;
        0x00002672:    4869        iH      LDR      r0,[pc,#420] ; [0x2818] = 0x32c0
;;;172    						now_channel = 78;
        0x00002674:    214e        N!      MOVS     r1,#0x4e
;;;173    						ret = PAN216_SetUpConfig((RFConfig_t *)now_rfconfig);
;;;174    						if (ret != PAN216_OK)
        0x00002676:    60e8        .`      STR      r0,[r5,#0xc]
        0x00002678:    e023        #.      B        0x26c2 ; main + 358
;;;175    								goto err_setup;
;;;176    						
;;;177    						PAN216_EnableInterfaceMuxIRQ(true);
        0x0000267a:    2001        .       MOVS     r0,#1
        0x0000267c:    f7fefcdf    ....    BL       PAN216_EnableInterfaceMuxIRQ ; 0x103e
;;;178    						PAN216_ConfigIT(RF_IT_RX_IRQ | RF_IT_CRC_ERR_IRQ);
        0x00002680:    2011        .       MOVS     r0,#0x11
        0x00002682:    f7fefc2f    ../.    BL       PAN216_ConfigIT ; 0xee4
;;;179    						PAN216_ClearIRQFlags(0xFF);
        0x00002686:    20ff        .       MOVS     r0,#0xff
        0x00002688:    f7fefc26    ..&.    BL       PAN216_ClearIRQFlags ; 0xed8
;;;180    						PAN216_PrepareTRxWithAck(PAN216_RX, false);
        0x0000268c:    2100        .!      MOVS     r1,#0
        0x0000268e:    2001        .       MOVS     r0,#1
        0x00002690:    f7fefe96    ....    BL       PAN216_PrepareTRxWithAck ; 0x13c0
;;;181    						PAN216_RxStart();
        0x00002694:    f7feff0c    ....    BL       PAN216_RxStart ; 0x14b0
;;;182    						BSP_DelayMs(50);
        0x00002698:    2032        2       MOVS     r0,#0x32
        0x0000269a:    e042        B.      B        0x2722 ; main + 454
        0x0000269c:    e016        ..      B        0x26cc ; main + 368
;;;183    
;;;184            }
;;;185            else if (KEY2_DOWN)
;;;186            {
;;;187    						OLED_Clear();
        0x0000269e:    f7fefa71    ..q.    BL       OLED_Clear ; 0xb84
;;;188    						OLED_ShowString(0, 16, "XN297L 35", 12);
        0x000026a2:    230c        .#      MOVS     r3,#0xc
        0x000026a4:    a263        c.      ADR      r2,{pc}+0x190 ; 0x2834
        0x000026a6:    2110        .!      MOVS     r1,#0x10
        0x000026a8:    2000        .       MOVS     r0,#0
        0x000026aa:    f7fefb95    ....    BL       OLED_ShowString ; 0xdd8
;;;189    						OLED_Refresh_Gram();
        0x000026ae:    f7fefb15    ....    BL       OLED_Refresh_Gram ; 0xcdc
;;;190    					  BSP_DelayMs(500);
        0x000026b2:    20ff        .       MOVS     r0,#0xff
        0x000026b4:    30f5        .0      ADDS     r0,r0,#0xf5
        0x000026b6:    f7fdff0b    ....    BL       BSP_DelayMs ; 0x4d0
;;;191    					
;;;192    						now_rfconfig = (RFConfig_t *)&xn297l_gRfConfig;
        0x000026ba:    4857        WH      LDR      r0,[pc,#348] ; [0x2818] = 0x32c0
        0x000026bc:    3044        D0      ADDS     r0,r0,#0x44
;;;193    						now_channel = 35;
        0x000026be:    2123        #!      MOVS     r1,#0x23
        0x000026c0:    60e8        .`      STR      r0,[r5,#0xc]
        0x000026c2:    7029        )p      STRB     r1,[r5,#0]
;;;194    						ret = PAN216_SetUpConfig((RFConfig_t *)now_rfconfig);
        0x000026c4:    f7fff8be    ....    BL       PAN216_SetUpConfig ; 0x1844
;;;195    						if (ret != PAN216_OK)
        0x000026c8:    2800        .(      CMP      r0,#0
        0x000026ca:    d0d6        ..      BEQ      0x267a ; main + 286
        0x000026cc:    a05c        \.      ADR      r0,{pc}+0x174 ; 0x2840
        0x000026ce:    f7fffb95    ....    BL       __0printf$8 ; 0x1dfc
        0x000026d2:    e7fe        ..      B        0x26d2 ; main + 374
;;;196    								goto err_setup;		
;;;197    						
;;;198    						PAN216_EnableInterfaceMuxIRQ(true);
;;;199    						PAN216_ConfigIT(RF_IT_RX_IRQ | RF_IT_CRC_ERR_IRQ);
;;;200    						PAN216_ClearIRQFlags(0xFF);
;;;201    						PAN216_PrepareTRxWithAck(PAN216_RX, false);
;;;202    						PAN216_RxStart();
;;;203    						BSP_DelayMs(50);
;;;204            }	
;;;205    				else if (KEY3_DOWN)
;;;206            {
;;;207    						OLED_Clear();
        0x000026d4:    f7fefa56    ..V.    BL       OLED_Clear ; 0xb84
;;;208    						OLED_ShowString(0, 16, "XN297L 45", 12);
        0x000026d8:    230c        .#      MOVS     r3,#0xc
        0x000026da:    a261        a.      ADR      r2,{pc}+0x186 ; 0x2860
        0x000026dc:    2110        .!      MOVS     r1,#0x10
        0x000026de:    2000        .       MOVS     r0,#0
        0x000026e0:    f7fefb7a    ..z.    BL       OLED_ShowString ; 0xdd8
;;;209    						OLED_Refresh_Gram();
        0x000026e4:    f7fefafa    ....    BL       OLED_Refresh_Gram ; 0xcdc
;;;210    					  BSP_DelayMs(500);
        0x000026e8:    20ff        .       MOVS     r0,#0xff
        0x000026ea:    30f5        .0      ADDS     r0,r0,#0xf5
        0x000026ec:    f7fdfef0    ....    BL       BSP_DelayMs ; 0x4d0
;;;211    					
;;;212    						PAN216_SetChannel((now_channel = channel_table[1]));
        0x000026f0:    484a        JH      LDR      r0,[pc,#296] ; [0x281c] = 0x20000040
        0x000026f2:    1c80        ..      ADDS     r0,r0,#2
        0x000026f4:    7840        @x      LDRB     r0,[r0,#1]
;;;213    						BSP_DelayMs(10);
        0x000026f6:    e010        ..      B        0x271a ; main + 446
;;;214            }
;;;215    				else if (KEY4_DOWN)
;;;216            {
;;;217    						OLED_Clear();
        0x000026f8:    f7fefa44    ..D.    BL       OLED_Clear ; 0xb84
;;;218    						OLED_ShowString(0, 16, "XN297L 55", 12);
        0x000026fc:    230c        .#      MOVS     r3,#0xc
        0x000026fe:    a25b        [.      ADR      r2,{pc}+0x16e ; 0x286c
        0x00002700:    2110        .!      MOVS     r1,#0x10
        0x00002702:    2000        .       MOVS     r0,#0
        0x00002704:    f7fefb68    ..h.    BL       OLED_ShowString ; 0xdd8
;;;219    						OLED_Refresh_Gram();
        0x00002708:    f7fefae8    ....    BL       OLED_Refresh_Gram ; 0xcdc
;;;220    					  BSP_DelayMs(500);
        0x0000270c:    20ff        .       MOVS     r0,#0xff
        0x0000270e:    30f5        .0      ADDS     r0,r0,#0xf5
        0x00002710:    f7fdfede    ....    BL       BSP_DelayMs ; 0x4d0
;;;221    					
;;;222    						PAN216_SetChannel((now_channel = channel_table[2]));
        0x00002714:    4841        AH      LDR      r0,[pc,#260] ; [0x281c] = 0x20000040
        0x00002716:    1c80        ..      ADDS     r0,r0,#2
        0x00002718:    7880        .x      LDRB     r0,[r0,#2]
        0x0000271a:    7028        (p      STRB     r0,[r5,#0]
        0x0000271c:    f7fefefc    ....    BL       PAN216_SetChannel ; 0x1518
;;;223    						BSP_DelayMs(10);
        0x00002720:    200a        .       MOVS     r0,#0xa
        0x00002722:    f7fdfed5    ....    BL       BSP_DelayMs ; 0x4d0
;;;224            }
;;;225    
;;;226    				flag = PAN216_GetIRQFlags();
        0x00002726:    f7fefd52    ..R.    BL       PAN216_GetIRQFlags ; 0x11ce
;;;227    				
;;;228    				while (KEY1_UP && KEY2_UP && (flag & RF_IT_RX_IRQ))
        0x0000272a:    e04f        O.      B        0x27cc ; main + 624
;;;229    				{		
;;;230    						if (flag & RF_IT_RX_IRQ)
        0x0000272c:    07c1        ..      LSLS     r1,r0,#31
        0x0000272e:    d04d        M.      BEQ      0x27cc ; main + 624
;;;231    						{
;;;232    								u8 RecvLen = PAN216_GetRecvLen();
        0x00002730:    f7fefd52    ..R.    BL       PAN216_GetRecvLen ; 0x11d8
;;;233    								RfSendType temp;
;;;234    							
;;;235    								if (PAN216_GetRxPipeNum())
        0x00002734:    9000        ..      STR      r0,[sp,#0]
        0x00002736:    f7fefdc4    ....    BL       PAN216_GetRxPipeNum ; 0x12c2
        0x0000273a:    2800        .(      CMP      r0,#0
        0x0000273c:    d000        ..      BEQ      0x2740 ; main + 484
;;;236    									is_pair = 1;
        0x0000273e:    2001        .       MOVS     r0,#1
;;;237    								else
;;;238    									is_pair = 0;
        0x00002740:    7068        hp      STRB     r0,[r5,#1]
;;;239    								
;;;240    								PAN216_ReadFifo(TRX_FIFO, RxBuf, RecvLen);
        0x00002742:    494d        MI      LDR      r1,[pc,#308] ; [0x2878] = 0x20000054
        0x00002744:    2001        .       MOVS     r0,#1
        0x00002746:    9a00        ..      LDR      r2,[sp,#0]
        0x00002748:    f7fefe6e    ..n.    BL       PAN216_ReadFifo ; 0x1428
;;;241    								int rssi = PAN216_GetRssiDBm();
        0x0000274c:    f7fefdae    ....    BL       PAN216_GetRssiDBm ; 0x12ac
;;;242    								PAN216_ClearIRQFlags(RF_IT_RX_IRQ);
        0x00002750:    900a        ..      STR      r0,[sp,#0x28]
        0x00002752:    2001        .       MOVS     r0,#1
        0x00002754:    f7fefbc0    ....    BL       PAN216_ClearIRQFlags ; 0xed8
;;;243    								printf("+RecvLen = %d, cnt = %d, now_channel = %d\n", RecvLen, ++count, now_channel);
        0x00002758:    68aa        .h      LDR      r2,[r5,#8]
        0x0000275a:    a048        H.      ADR      r0,{pc}+0x122 ; 0x287c
        0x0000275c:    1c52        R.      ADDS     r2,r2,#1
        0x0000275e:    60aa        .`      STR      r2,[r5,#8]
        0x00002760:    782b        +x      LDRB     r3,[r5,#0]
        0x00002762:    9900        ..      LDR      r1,[sp,#0]
        0x00002764:    f7fffb4a    ..J.    BL       __0printf$8 ; 0x1dfc
;;;244    
;;;245    								if (now_rfconfig == &a7535_gRfConfig)
        0x00002768:    482b        +H      LDR      r0,[pc,#172] ; [0x2818] = 0x32c0
        0x0000276a:    68e9        .h      LDR      r1,[r5,#0xc]
        0x0000276c:    4281        .B      CMP      r1,r0
        0x0000276e:    d118        ..      BNE      0x27a2 ; main + 582
;;;246    								{
;;;247    									decode_data_1mbps_to_500kbps((uint16_t *)RxBuf, sizeof(a7535_decodeBuf), a7535_decodeBuf, sizeof(a7535_decodeBuf));
        0x00002770:    4a41        AJ      LDR      r2,[pc,#260] ; [0x2878] = 0x20000054
        0x00002772:    2317        .#      MOVS     r3,#0x17
        0x00002774:    322e        .2      ADDS     r2,r2,#0x2e
        0x00002776:    4619        .F      MOV      r1,r3
        0x00002778:    483f        ?H      LDR      r0,[pc,#252] ; [0x2878] = 0x20000054
        0x0000277a:    f7fffebd    ....    BL       decode_data_1mbps_to_500kbps ; 0x24f8
;;;248    									
;;;249    									CtrlPayload_A7535 a7535_frame;
;;;250    									memcpy(&a7535_frame.unique_id, &a7535_decodeBuf, sizeof(a7535_frame));
        0x0000277e:    493e        >I      LDR      r1,[pc,#248] ; [0x2878] = 0x20000054
        0x00002780:    a801        ..      ADD      r0,sp,#4
        0x00002782:    2217        ."      MOVS     r2,#0x17
        0x00002784:    312e        .1      ADDS     r1,r1,#0x2e
        0x00002786:    3002        .0      ADDS     r0,#2
        0x00002788:    f7fdfd45    ..E.    BL       __aeabi_memcpy ; 0x216
;;;251    									a7535_format(temp, &a7535_frame);
        0x0000278c:    4669        iF      MOV      r1,sp
        0x0000278e:    4620         F      MOV      r0,r4
        0x00002790:    f7fffda8    ....    BL       a7535_format ; 0x22e4
;;;252    									printf("\r\n");
        0x00002794:    a044        D.      ADR      r0,{pc}+0x114 ; 0x28a8
        0x00002796:    f7fffb31    ..1.    BL       __0printf$8 ; 0x1dfc
;;;253    									printHex(a7535_decodeBuf, sizeof(a7535_decodeBuf)-6);
        0x0000279a:    4837        7H      LDR      r0,[pc,#220] ; [0x2878] = 0x20000054
        0x0000279c:    2111        .!      MOVS     r1,#0x11
        0x0000279e:    302e        .0      ADDS     r0,r0,#0x2e
;;;254    								}
        0x000027a0:    e00b        ..      B        0x27ba ; main + 606
;;;255    								else
;;;256    								{
;;;257    									CtrlPayload_XN297L xn297l_frame;
;;;258    									memcpy(&xn297l_frame, &RxBuf[1], sizeof(xn297l_frame));
        0x000027a2:    4935        5I      LDR      r1,[pc,#212] ; [0x2878] = 0x20000054
        0x000027a4:    221d        ."      MOVS     r2,#0x1d
        0x000027a6:    1c49        I.      ADDS     r1,r1,#1
        0x000027a8:    a801        ..      ADD      r0,sp,#4
        0x000027aa:    f7fdfd34    ..4.    BL       __aeabi_memcpy ; 0x216
;;;259    									xn297l_format(temp, &xn297l_frame);
        0x000027ae:    a901        ..      ADD      r1,sp,#4
        0x000027b0:    4620         F      MOV      r0,r4
        0x000027b2:    f000f97b    ..{.    BL       xn297l_format ; 0x2aac
;;;260    									printHex(RxBuf, RecvLen);									
        0x000027b6:    4830        0H      LDR      r0,[pc,#192] ; [0x2878] = 0x20000054
        0x000027b8:    9900        ..      LDR      r1,[sp,#0]
        0x000027ba:    f000f87f    ....    BL       printHex ; 0x28bc
;;;261    								}
;;;262    							  
;;;263    								printf("RSSI=%ddBm\r\n", rssi);
        0x000027be:    a03b        ;.      ADR      r0,{pc}+0xee ; 0x28ac
        0x000027c0:    990a        ..      LDR      r1,[sp,#0x28]
        0x000027c2:    f7fffb1b    ....    BL       __0printf$8 ; 0x1dfc
;;;264    								BSP_Led3Toggle();
        0x000027c6:    f7fdfefb    ....    BL       BSP_Led3Toggle ; 0x5c0
;;;265    								break;
        0x000027ca:    e725        %.      B        0x2618 ; main + 188
        0x000027cc:    6a71        qj      LDR      r1,[r6,#0x24]
        0x000027ce:    2901        .)      CMP      r1,#1
        0x000027d0:    d1fb        ..      BNE      0x27ca ; main + 622
        0x000027d2:    6861        ah      LDR      r1,[r4,#4]
        0x000027d4:    2901        .)      CMP      r1,#1
        0x000027d6:    d1f8        ..      BNE      0x27ca ; main + 622
        0x000027d8:    07c1        ..      LSLS     r1,r0,#31
        0x000027da:    d0f6        ..      BEQ      0x27ca ; main + 622
        0x000027dc:    e7a6        ..      B        0x272c ; main + 464
    $d
        0x000027de:    0000        ..      DCW    0
        0x000027e0:    20000000    ...     DCD    536870912
        0x000027e4:    20555043    CPU     DCD    542462019
        0x000027e8:    64252040    @ %d    DCD    1680154688
        0x000027ec:    000a7a48    Hz..    DCD    686664
        0x000027f0:    2d495053    SPI-    DCD    759779411
        0x000027f4:    4e494c34    4LIN    DCD    1313426484
        0x000027f8:    00000a45    E...    DCD    2629
        0x000027fc:    40020200    ...@    DCD    1073873408
        0x00002800:    324e4150    PAN2    DCD    843989328
        0x00002804:    495f3631    16_I    DCD    1230976561
        0x00002808:    2074696e    nit     DCD    544500078
        0x0000280c:    6c696166    fail    DCD    1818845542
        0x00002810:    0d2e6465    ed..    DCD    221144165
        0x00002814:    0000000a    ....    DCD    10
        0x00002818:    000032c0    .2..    DCD    12992
        0x0000281c:    20000040    @..     DCD    536870976
        0x00002820:    695f6672    rf_i    DCD    1767859826
        0x00002824:    5f74696e    nit_    DCD    1601464686
        0x00002828:    000a6b6f    ok..    DCD    682863
        0x0000282c:    33353741    A753    DCD    859125569
        0x00002830:    00000035    5...    DCD    53
        0x00002834:    39324e58    XN29    DCD    959598168
        0x00002838:    33204c37    7L 3    DCD    857754679
        0x0000283c:    00000035    5...    DCD    53
        0x00002840:    324e4150    PAN2    DCD    843989328
        0x00002844:    535f3631    16_S    DCD    1398748721
        0x00002848:    70557465    etUp    DCD    1884648549
        0x0000284c:    666e6f43    Conf    DCD    1718513475
        0x00002850:    66206769    ig f    DCD    1713399657
        0x00002854:    656c6961    aile    DCD    1701603681
        0x00002858:    0a0d2e64    d...    DCD    168636004
        0x0000285c:    00000000    ....    DCD    0
        0x00002860:    39324e58    XN29    DCD    959598168
        0x00002864:    34204c37    7L 4    DCD    874531895
        0x00002868:    00000035    5...    DCD    53
        0x0000286c:    39324e58    XN29    DCD    959598168
        0x00002870:    35204c37    7L 5    DCD    891309111
        0x00002874:    00000035    5...    DCD    53
        0x00002878:    20000054    T..     DCD    536870996
        0x0000287c:    6365522b    +Rec    DCD    1667584555
        0x00002880:    6e654c76    vLen    DCD    1852132470
        0x00002884:    25203d20     = %    DCD    622869792
        0x00002888:    63202c64    d, c    DCD    1663052900
        0x0000288c:    3d20746e    nt =    DCD    1025537134
        0x00002890:    2c642520     %d,    DCD    744760608
        0x00002894:    776f6e20     now    DCD    2003791392
        0x00002898:    6168635f    _cha    DCD    1634231135
        0x0000289c:    6c656e6e    nnel    DCD    1818586734
        0x000028a0:    25203d20     = %    DCD    622869792
        0x000028a4:    00000a64    d...    DCD    2660
        0x000028a8:    00000a0d    ....    DCD    2573
        0x000028ac:    49535352    RSSI    DCD    1230197586
        0x000028b0:    6464253d    =%dd    DCD    1684284733
        0x000028b4:    0a0d6d42    Bm..    DCD    168652098
        0x000028b8:    00000000    ....    DCD    0
    $t
    i.printHex
    printHex
;;; ..\..\..\..\middleware\log.c
;;;15     {
        0x000028bc:    b570        p.      PUSH     {r4-r6,lr}
        0x000028be:    460d        .F      MOV      r5,r1
        0x000028c0:    4606        .F      MOV      r6,r0
        0x000028c2:    2400        .$      MOVS     r4,#0
;;; ..\..\..\..\middleware\log.c (15)
        0x000028c4:    e004        ..      B        0x28d0 ; printHex + 20
        0x000028c6:    5d31        1]      LDRB     r1,[r6,r4]
        0x000028c8:    a004        ..      ADR      r0,{pc}+0x14 ; 0x28dc
        0x000028ca:    f7fffa97    ....    BL       __0printf$8 ; 0x1dfc
        0x000028ce:    1c64        d.      ADDS     r4,r4,#1
;;;16         for (int i = 0; i < len; i++)
        0x000028d0:    42ac        .B      CMP      r4,r5
        0x000028d2:    dbf8        ..      BLT      0x28c6 ; printHex + 10
;;;17         {
;;;18             printf("%02X ", buf[i]);
;;;19         }
;;;20         printf("\r\n");
        0x000028d4:    a003        ..      ADR      r0,{pc}+0x10 ; 0x28e4
        0x000028d6:    f7fffa91    ....    BL       __0printf$8 ; 0x1dfc
;;;21     }
        0x000028da:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x000028dc:    58323025    %02X    DCD    1479684133
        0x000028e0:    00000020     ...    DCD    32
        0x000028e4:    00000a0d    ....    DCD    2573
    $t
    i.spi_4line_readbyte
    spi_4line_readbyte
;;; ..\..\..\..\radio\pan216_port.c
;;;166        u8 value = 0;
        0x000028e8:    2000        .       MOVS     r0,#0
;;;167    
;;;168        for (i = 0; i < 8; i++)
        0x000028ea:    2100        .!      MOVS     r1,#0
        0x000028ec:    e025        %.      B        0x293a ; spi_4line_readbyte + 82
;;;169        {
;;;170            SPI_SCK_LOW;
        0x000028ee:    2200        ."      MOVS     r2,#0
        0x000028f0:    4b15        .K      LDR      r3,[pc,#84] ; [0x2948] = 0x40020280
        0x000028f2:    601a        .`      STR      r2,[r3,#0]
;;;171            value <<= 1;
        0x000028f4:    0642        B.      LSLS     r2,r0,#25
        0x000028f6:    0e10        ..      LSRS     r0,r2,#24
;;;172            DELAY();
        0x000028f8:    bf00        ..      NOP      
        0x000028fa:    bf00        ..      NOP      
        0x000028fc:    bf00        ..      NOP      
        0x000028fe:    bf00        ..      NOP      
        0x00002900:    bf00        ..      NOP      
        0x00002902:    bf00        ..      NOP      
        0x00002904:    bf00        ..      NOP      
        0x00002906:    bf00        ..      NOP      
        0x00002908:    bf00        ..      NOP      
        0x0000290a:    bf00        ..      NOP      
        0x0000290c:    bf00        ..      NOP      
;;;173            SPI_SCK_HIGH;
        0x0000290e:    2201        ."      MOVS     r2,#1
        0x00002910:    4b0d        .K      LDR      r3,[pc,#52] ; [0x2948] = 0x40020280
        0x00002912:    601a        .`      STR      r2,[r3,#0]
;;;174            DELAY();
        0x00002914:    bf00        ..      NOP      
        0x00002916:    bf00        ..      NOP      
        0x00002918:    bf00        ..      NOP      
        0x0000291a:    bf00        ..      NOP      
        0x0000291c:    bf00        ..      NOP      
        0x0000291e:    bf00        ..      NOP      
        0x00002920:    bf00        ..      NOP      
        0x00002922:    bf00        ..      NOP      
        0x00002924:    bf00        ..      NOP      
        0x00002926:    bf00        ..      NOP      
        0x00002928:    bf00        ..      NOP      
;;;175            if (SPI_DATA_STATUS)
        0x0000292a:    4a07        .J      LDR      r2,[pc,#28] ; [0x2948] = 0x40020280
        0x0000292c:    6892        .h      LDR      r2,[r2,#8]
        0x0000292e:    2a00        .*      CMP      r2,#0
        0x00002930:    d001        ..      BEQ      0x2936 ; spi_4line_readbyte + 78
;;;176            {
;;;177                value |= 0x01;
        0x00002932:    2201        ."      MOVS     r2,#1
        0x00002934:    4310        .C      ORRS     r0,r0,r2
        0x00002936:    1c4a        J.      ADDS     r2,r1,#1
        0x00002938:    b2d1        ..      UXTB     r1,r2
        0x0000293a:    2908        .)      CMP      r1,#8
        0x0000293c:    dbd7        ..      BLT      0x28ee ; spi_4line_readbyte + 6
;;;178            }
;;;179        }
;;;180        SPI_SCK_LOW;
        0x0000293e:    2200        ."      MOVS     r2,#0
        0x00002940:    4b01        .K      LDR      r3,[pc,#4] ; [0x2948] = 0x40020280
        0x00002942:    601a        .`      STR      r2,[r3,#0]
;;;181    
;;;182        return value;
;;;183    }
        0x00002944:    4770        pG      BX       lr
    $d
        0x00002946:    0000        ..      DCW    0
        0x00002948:    40020280    ...@    DCD    1073873536
    $t
    i.spi_4line_writebyte
    spi_4line_writebyte
;;; ..\..\..\..\radio\pan216_port.c (141)
        0x0000294c:    2100        .!      MOVS     r1,#0
;;; ..\..\..\..\radio\pan216_port.c (141)
        0x0000294e:    e035        5.      B        0x29bc ; spi_4line_writebyte + 112
;;;142        {
;;;143            SPI_SCK_LOW;
        0x00002950:    2200        ."      MOVS     r2,#0
        0x00002952:    4b1d        .K      LDR      r3,[pc,#116] ; [0x29c8] = 0x40020280
        0x00002954:    601a        .`      STR      r2,[r3,#0]
;;;144            DELAY();
        0x00002956:    bf00        ..      NOP      
        0x00002958:    bf00        ..      NOP      
        0x0000295a:    bf00        ..      NOP      
        0x0000295c:    bf00        ..      NOP      
        0x0000295e:    bf00        ..      NOP      
        0x00002960:    bf00        ..      NOP      
        0x00002962:    bf00        ..      NOP      
        0x00002964:    bf00        ..      NOP      
        0x00002966:    bf00        ..      NOP      
        0x00002968:    bf00        ..      NOP      
        0x0000296a:    bf00        ..      NOP      
;;;145            if (value & 0x80)
        0x0000296c:    2280        ."      MOVS     r2,#0x80
        0x0000296e:    4002        .@      ANDS     r2,r2,r0
        0x00002970:    2a00        .*      CMP      r2,#0
        0x00002972:    d003        ..      BEQ      0x297c ; spi_4line_writebyte + 48
;;;146            {
;;;147                SPI_DATA_HIGH;
        0x00002974:    2201        ."      MOVS     r2,#1
        0x00002976:    4b14        .K      LDR      r3,[pc,#80] ; [0x29c8] = 0x40020280
        0x00002978:    60da        .`      STR      r2,[r3,#0xc]
        0x0000297a:    e002        ..      B        0x2982 ; spi_4line_writebyte + 54
;;;148            }
;;;149            else
;;;150            {
;;;151                SPI_DATA_LOW;
        0x0000297c:    2200        ."      MOVS     r2,#0
        0x0000297e:    4b12        .K      LDR      r3,[pc,#72] ; [0x29c8] = 0x40020280
        0x00002980:    60da        .`      STR      r2,[r3,#0xc]
;;;152            }
;;;153    
;;;154            value <<= 1;
        0x00002982:    0642        B.      LSLS     r2,r0,#25
        0x00002984:    0e10        ..      LSRS     r0,r2,#24
;;;155            DELAY();
        0x00002986:    bf00        ..      NOP      
        0x00002988:    bf00        ..      NOP      
        0x0000298a:    bf00        ..      NOP      
        0x0000298c:    bf00        ..      NOP      
        0x0000298e:    bf00        ..      NOP      
        0x00002990:    bf00        ..      NOP      
        0x00002992:    bf00        ..      NOP      
        0x00002994:    bf00        ..      NOP      
        0x00002996:    bf00        ..      NOP      
        0x00002998:    bf00        ..      NOP      
        0x0000299a:    bf00        ..      NOP      
;;;156            SPI_SCK_HIGH;
        0x0000299c:    2201        ."      MOVS     r2,#1
        0x0000299e:    4b0a        .K      LDR      r3,[pc,#40] ; [0x29c8] = 0x40020280
        0x000029a0:    601a        .`      STR      r2,[r3,#0]
;;;157            DELAY();
        0x000029a2:    bf00        ..      NOP      
        0x000029a4:    bf00        ..      NOP      
        0x000029a6:    bf00        ..      NOP      
        0x000029a8:    bf00        ..      NOP      
        0x000029aa:    bf00        ..      NOP      
        0x000029ac:    bf00        ..      NOP      
        0x000029ae:    bf00        ..      NOP      
        0x000029b0:    bf00        ..      NOP      
        0x000029b2:    bf00        ..      NOP      
        0x000029b4:    bf00        ..      NOP      
        0x000029b6:    bf00        ..      NOP      
        0x000029b8:    1c4a        J.      ADDS     r2,r1,#1
        0x000029ba:    b2d1        ..      UXTB     r1,r2
        0x000029bc:    2908        .)      CMP      r1,#8
        0x000029be:    dbc7        ..      BLT      0x2950 ; spi_4line_writebyte + 4
;;;158        }
;;;159    
;;;160        SPI_SCK_LOW;
        0x000029c0:    2200        ."      MOVS     r2,#0
        0x000029c2:    4b01        .K      LDR      r3,[pc,#4] ; [0x29c8] = 0x40020280
        0x000029c4:    601a        .`      STR      r2,[r3,#0]
;;;161    }
        0x000029c6:    4770        pG      BX       lr
    $d
        0x000029c8:    40020280    ...@    DCD    1073873536
    $t
    i.spi_cs_set_high
    spi_cs_set_high
;;; ..\..\..\..\radio\pan216_port.c (69)
        0x000029cc:    2001        .       MOVS     r0,#1
        0x000029ce:    4901        .I      LDR      r1,[pc,#4] ; [0x29d4] = 0x40020280
        0x000029d0:    6048        H`      STR      r0,[r1,#4]
;;;70     }
        0x000029d2:    4770        pG      BX       lr
    $d
        0x000029d4:    40020280    ...@    DCD    1073873536
    $t
    i.spi_cs_set_low
    spi_cs_set_low
;;;71     
;;;72     /**
;;;73      * @brief Set SPI CS low, use STM32 GPIOA4 as SPI CS pin
;;;74      * @param[in] none
;;;75      * @return none
;;;76      */
;;;77     void spi_cs_set_low(void)
;;;78     {
;;;79         SPI_CS_LOW;
        0x000029d8:    2000        .       MOVS     r0,#0
        0x000029da:    4901        .I      LDR      r1,[pc,#4] ; [0x29e0] = 0x40020280
        0x000029dc:    6048        H`      STR      r0,[r1,#4]
;;;80     }
        0x000029de:    4770        pG      BX       lr
    $d
        0x000029e0:    40020280    ...@    DCD    1073873536
    $t
    i.stackDump
    stackDump
;;; .\..\..\..\..\pan108\device\Source\pan_retarget.c
;;;33     {
        0x000029e4:    b510        ..      PUSH     {r4,lr}
        0x000029e6:    4604        .F      MOV      r4,r0
;;;34         printf("r0  = 0x%x\r\n", stack[r0]);
        0x000029e8:    6801        .h      LDR      r1,[r0,#0]
        0x000029ea:    a010        ..      ADR      r0,{pc}+0x42 ; 0x2a2c
        0x000029ec:    f7fffa06    ....    BL       __0printf$8 ; 0x1dfc
;;;35         printf("r1  = 0x%x\r\n", stack[r1]);
        0x000029f0:    a012        ..      ADR      r0,{pc}+0x4c ; 0x2a3c
        0x000029f2:    6861        ah      LDR      r1,[r4,#4]
        0x000029f4:    f7fffa02    ....    BL       __0printf$8 ; 0x1dfc
;;;36         printf("r2  = 0x%x\r\n", stack[r2]);
        0x000029f8:    a014        ..      ADR      r0,{pc}+0x54 ; 0x2a4c
        0x000029fa:    68a1        .h      LDR      r1,[r4,#8]
        0x000029fc:    f7fff9fe    ....    BL       __0printf$8 ; 0x1dfc
;;;37         printf("r3  = 0x%x\r\n", stack[r3]);
        0x00002a00:    a016        ..      ADR      r0,{pc}+0x5c ; 0x2a5c
        0x00002a02:    68e1        .h      LDR      r1,[r4,#0xc]
        0x00002a04:    f7fff9fa    ....    BL       __0printf$8 ; 0x1dfc
;;;38         printf("r12 = 0x%x\r\n", stack[r12]);
        0x00002a08:    a018        ..      ADR      r0,{pc}+0x64 ; 0x2a6c
        0x00002a0a:    6921        !i      LDR      r1,[r4,#0x10]
        0x00002a0c:    f7fff9f6    ....    BL       __0printf$8 ; 0x1dfc
;;;39         printf("lr  = 0x%x\r\n", stack[lr]);
        0x00002a10:    a01a        ..      ADR      r0,{pc}+0x6c ; 0x2a7c
        0x00002a12:    6961        ai      LDR      r1,[r4,#0x14]
        0x00002a14:    f7fff9f2    ....    BL       __0printf$8 ; 0x1dfc
;;;40         printf("pc  = 0x%x\r\n", stack[pc]);
        0x00002a18:    a01c        ..      ADR      r0,{pc}+0x74 ; 0x2a8c
        0x00002a1a:    69a1        .i      LDR      r1,[r4,#0x18]
        0x00002a1c:    f7fff9ee    ....    BL       __0printf$8 ; 0x1dfc
;;;41         printf("psr = 0x%x\r\n", stack[psr]);
        0x00002a20:    a01e        ..      ADR      r0,{pc}+0x7c ; 0x2a9c
        0x00002a22:    69e1        .i      LDR      r1,[r4,#0x1c]
        0x00002a24:    f7fff9ea    ....    BL       __0printf$8 ; 0x1dfc
;;;42     }
        0x00002a28:    bd10        ..      POP      {r4,pc}
    $d
        0x00002a2a:    0000        ..      DCW    0
        0x00002a2c:    20203072    r0      DCD    538980466
        0x00002a30:    7830203d    = 0x    DCD    2016419901
        0x00002a34:    0a0d7825    %x..    DCD    168654885
        0x00002a38:    00000000    ....    DCD    0
        0x00002a3c:    20203172    r1      DCD    538980722
        0x00002a40:    7830203d    = 0x    DCD    2016419901
        0x00002a44:    0a0d7825    %x..    DCD    168654885
        0x00002a48:    00000000    ....    DCD    0
        0x00002a4c:    20203272    r2      DCD    538980978
        0x00002a50:    7830203d    = 0x    DCD    2016419901
        0x00002a54:    0a0d7825    %x..    DCD    168654885
        0x00002a58:    00000000    ....    DCD    0
        0x00002a5c:    20203372    r3      DCD    538981234
        0x00002a60:    7830203d    = 0x    DCD    2016419901
        0x00002a64:    0a0d7825    %x..    DCD    168654885
        0x00002a68:    00000000    ....    DCD    0
        0x00002a6c:    20323172    r12     DCD    540160370
        0x00002a70:    7830203d    = 0x    DCD    2016419901
        0x00002a74:    0a0d7825    %x..    DCD    168654885
        0x00002a78:    00000000    ....    DCD    0
        0x00002a7c:    2020726c    lr      DCD    538997356
        0x00002a80:    7830203d    = 0x    DCD    2016419901
        0x00002a84:    0a0d7825    %x..    DCD    168654885
        0x00002a88:    00000000    ....    DCD    0
        0x00002a8c:    20206370    pc      DCD    538993520
        0x00002a90:    7830203d    = 0x    DCD    2016419901
        0x00002a94:    0a0d7825    %x..    DCD    168654885
        0x00002a98:    00000000    ....    DCD    0
        0x00002a9c:    20727370    psr     DCD    544371568
        0x00002aa0:    7830203d    = 0x    DCD    2016419901
        0x00002aa4:    0a0d7825    %x..    DCD    168654885
        0x00002aa8:    00000000    ....    DCD    0
    $t
    i.xn297l_format
    xn297l_format
;;; ..\src\main.c
;;;378    {	
        0x00002aac:    b538        8.      PUSH     {r3-r5,lr}
        0x00002aae:    484a        JH      LDR      r0,[pc,#296] ; [0x2bd8] = 0x20000040
;;; ..\src\main.c (378)
        0x00002ab0:    460c        .F      MOV      r4,r1
        0x00002ab2:    7840        @x      LDRB     r0,[r0,#1]
        0x00002ab4:    2800        .(      CMP      r0,#0
        0x00002ab6:    a049        I.      ADR      r0,{pc}+0x126 ; 0x2bdc
        0x00002ab8:    d048        H.      BEQ      0x2b4c ; xn297l_format + 160
;;;379        if (!is_pair)
;;;380        {
;;;381            printf("\n");
;;;382            printf("===================================\n");
;;;383            printf("unique_id      : 0x%02x 0x%02x 0x%02x 0x%02x\n", controlData->unique_id[0], controlData->unique_id[1], controlData->unique_id[2], controlData->unique_id[3]);
;;;384            printf("main_mode      : 0x%02x\n", controlData->ctrl_data.main_mode);
;;;385            printf("fan_speed      : 0x%02x\n", controlData->ctrl_data.fan_speed);
;;;386            printf("air_direction  : 0x%02x\n", controlData->ctrl_data.air_direction);
;;;387            printf("air_type       : 0x%02x\n", controlData->ctrl_data.air_type);
;;;388            printf("time_setting   : 0x%02x\n", controlData->ctrl_data.time_setting);
;;;389            printf("remain_hours   : 0x%02x\n", controlData->ctrl_data.remain_hours);
;;;390            printf("remain_minutes : 0x%02x\n", controlData->ctrl_data.remain_minutes);
;;;391            printf("light_ctrl     : 0x%02x\n", controlData->ctrl_data.light_ctrl);
;;;392            printf("wifi_ctrl      : 0x%02x\n", controlData->ctrl_data.wifi_ctrl);
;;;393            printf("voice_ctrl     : 0x%02x\n", controlData->ctrl_data.voice_ctrl);
;;;394            printf("model_type     : 0x%02x\n", controlData->ctrl_data.model_type);
;;;395            printf("smell          : 0x%02x\n", controlData->ctrl_data.smell);
;;;396            printf("bluetooth_music: 0x%02x\n", controlData->ctrl_data.bluetooth_music);
;;;397            printf("filter         : 0x%02x\n", controlData->ctrl_data.filter);
;;;398            printf("===================================\n");
;;;399        }
;;;400        else
;;;401        {
;;;402            PairPayload_XN297L *pair_data = (PairPayload_XN297L *)controlData;
;;;403            printf("\n");
        0x00002aba:    f7fff99f    ....    BL       __0printf$8 ; 0x1dfc
;;;404            printf("================éå¯¹===============\n");
        0x00002abe:    a048        H.      ADR      r0,{pc}+0x122 ; 0x2be0
        0x00002ac0:    f7fff99c    ....    BL       __0printf$8 ; 0x1dfc
;;;405            
;;;406            printf("ID: ");
        0x00002ac4:    a050        P.      ADR      r0,{pc}+0x144 ; 0x2c08
        0x00002ac6:    f7fff999    ....    BL       __0printf$8 ; 0x1dfc
;;;407            for (int i = 0; i < sizeof(pair_data->id); i++) {
        0x00002aca:    2500        .%      MOVS     r5,#0
        0x00002acc:    1960        `.      ADDS     r0,r4,r5
        0x00002ace:    7981        .y      LDRB     r1,[r0,#6]
        0x00002ad0:    a04f        O.      ADR      r0,{pc}+0x140 ; 0x2c10
        0x00002ad2:    f7fff993    ....    BL       __0printf$8 ; 0x1dfc
        0x00002ad6:    1c6d        m.      ADDS     r5,r5,#1
        0x00002ad8:    2d04        .-      CMP      r5,#4
        0x00002ada:    d3f7        ..      BCC      0x2acc ; xn297l_format + 32
;;;408                printf("%02X ", pair_data->id[i]);
;;;409            }
;;;410            printf("\n");
        0x00002adc:    a03f        ?.      ADR      r0,{pc}+0x100 ; 0x2bdc
        0x00002ade:    f7fff98d    ....    BL       __0printf$8 ; 0x1dfc
;;;411        
;;;412            printf("unique_ID: ");
        0x00002ae2:    a04d        M.      ADR      r0,{pc}+0x136 ; 0x2c18
        0x00002ae4:    f7fff98a    ....    BL       __0printf$8 ; 0x1dfc
;;;413            for (int i = 0; i < sizeof(pair_data->unique_id); i++) {
        0x00002ae8:    2500        .%      MOVS     r5,#0
        0x00002aea:    1960        `.      ADDS     r0,r4,r5
        0x00002aec:    7a81        .z      LDRB     r1,[r0,#0xa]
        0x00002aee:    a048        H.      ADR      r0,{pc}+0x122 ; 0x2c10
        0x00002af0:    f7fff984    ....    BL       __0printf$8 ; 0x1dfc
        0x00002af4:    1c6d        m.      ADDS     r5,r5,#1
        0x00002af6:    2d04        .-      CMP      r5,#4
        0x00002af8:    d3f7        ..      BCC      0x2aea ; xn297l_format + 62
;;;414                printf("%02X ", pair_data->unique_id[i]);
;;;415            }
;;;416            printf("\n");
        0x00002afa:    a038        8.      ADR      r0,{pc}+0xe2 ; 0x2bdc
        0x00002afc:    f7fff97e    ..~.    BL       __0printf$8 ; 0x1dfc
;;;417        
;;;418            printf("placeholder: ");
        0x00002b00:    a048        H.      ADR      r0,{pc}+0x124 ; 0x2c24
        0x00002b02:    f7fff97b    ..{.    BL       __0printf$8 ; 0x1dfc
;;;419            for (int i = 0; i < sizeof(pair_data->placeholder); i++) {
        0x00002b06:    2500        .%      MOVS     r5,#0
        0x00002b08:    1960        `.      ADDS     r0,r4,r5
        0x00002b0a:    7b81        .{      LDRB     r1,[r0,#0xe]
        0x00002b0c:    a040        @.      ADR      r0,{pc}+0x104 ; 0x2c10
        0x00002b0e:    f7fff975    ..u.    BL       __0printf$8 ; 0x1dfc
        0x00002b12:    1c6d        m.      ADDS     r5,r5,#1
        0x00002b14:    2d06        .-      CMP      r5,#6
        0x00002b16:    d3f7        ..      BCC      0x2b08 ; xn297l_format + 92
;;;420                printf("%02X ", pair_data->placeholder[i]);
;;;421            }
;;;422            printf("\n");
        0x00002b18:    a030        0.      ADR      r0,{pc}+0xc4 ; 0x2bdc
        0x00002b1a:    f7fff96f    ..o.    BL       __0printf$8 ; 0x1dfc
;;;423        
;;;424            printf("model_type: %02X\n", pair_data->model_type);
        0x00002b1e:    7d21        !}      LDRB     r1,[r4,#0x14]
        0x00002b20:    a044        D.      ADR      r0,{pc}+0x114 ; 0x2c34
        0x00002b22:    f7fff96b    ..k.    BL       __0printf$8 ; 0x1dfc
;;;425        
;;;426            printf("reserved: ");
        0x00002b26:    a048        H.      ADR      r0,{pc}+0x122 ; 0x2c48
        0x00002b28:    f7fff968    ..h.    BL       __0printf$8 ; 0x1dfc
;;;427            for (int i = 0; i < sizeof(pair_data->reserved); i++) {
        0x00002b2c:    2500        .%      MOVS     r5,#0
        0x00002b2e:    1960        `.      ADDS     r0,r4,r5
        0x00002b30:    7d41        A}      LDRB     r1,[r0,#0x15]
        0x00002b32:    a037        7.      ADR      r0,{pc}+0xde ; 0x2c10
        0x00002b34:    f7fff962    ..b.    BL       __0printf$8 ; 0x1dfc
        0x00002b38:    1c6d        m.      ADDS     r5,r5,#1
        0x00002b3a:    2d07        .-      CMP      r5,#7
        0x00002b3c:    d3f7        ..      BCC      0x2b2e ; xn297l_format + 130
;;;428                printf("%02X ", pair_data->reserved[i]);
;;;429            }
;;;430            printf("\n");
        0x00002b3e:    a027        '.      ADR      r0,{pc}+0x9e ; 0x2bdc
        0x00002b40:    f7fff95c    ..\.    BL       __0printf$8 ; 0x1dfc
        0x00002b44:    a043        C.      ADR      r0,{pc}+0x110 ; 0x2c54
        0x00002b46:    f7fff959    ..Y.    BL       __0printf$8 ; 0x1dfc
;;;431        
;;;432        
;;;433            printf("===================================\n");
;;;434        
;;;435    	}
;;;436        
;;;437    }
        0x00002b4a:    bd38        8.      POP      {r3-r5,pc}
        0x00002b4c:    f7fff956    ..V.    BL       __0printf$8 ; 0x1dfc
        0x00002b50:    a040        @.      ADR      r0,{pc}+0x104 ; 0x2c54
        0x00002b52:    f7fff953    ..S.    BL       __0printf$8 ; 0x1dfc
        0x00002b56:    7a60        `z      LDRB     r0,[r4,#9]
        0x00002b58:    9000        ..      STR      r0,[sp,#0]
        0x00002b5a:    7a23        #z      LDRB     r3,[r4,#8]
        0x00002b5c:    79e2        .y      LDRB     r2,[r4,#7]
        0x00002b5e:    79a1        .y      LDRB     r1,[r4,#6]
        0x00002b60:    a046        F.      ADR      r0,{pc}+0x11c ; 0x2c7c
        0x00002b62:    f7fff94b    ..K.    BL       __0printf$8 ; 0x1dfc
        0x00002b66:    7aa1        .z      LDRB     r1,[r4,#0xa]
        0x00002b68:    a050        P.      ADR      r0,{pc}+0x144 ; 0x2cac
        0x00002b6a:    f7fff947    ..G.    BL       __0printf$8 ; 0x1dfc
        0x00002b6e:    7ae1        .z      LDRB     r1,[r4,#0xb]
        0x00002b70:    a055        U.      ADR      r0,{pc}+0x158 ; 0x2cc8
        0x00002b72:    f7fff943    ..C.    BL       __0printf$8 ; 0x1dfc
        0x00002b76:    7b21        !{      LDRB     r1,[r4,#0xc]
        0x00002b78:    a05a        Z.      ADR      r0,{pc}+0x16c ; 0x2ce4
        0x00002b7a:    f7fff93f    ..?.    BL       __0printf$8 ; 0x1dfc
        0x00002b7e:    7b61        a{      LDRB     r1,[r4,#0xd]
        0x00002b80:    a05f        _.      ADR      r0,{pc}+0x180 ; 0x2d00
        0x00002b82:    f7fff93b    ..;.    BL       __0printf$8 ; 0x1dfc
        0x00002b86:    7ba1        .{      LDRB     r1,[r4,#0xe]
        0x00002b88:    a064        d.      ADR      r0,{pc}+0x194 ; 0x2d1c
        0x00002b8a:    f7fff937    ..7.    BL       __0printf$8 ; 0x1dfc
        0x00002b8e:    7be1        .{      LDRB     r1,[r4,#0xf]
        0x00002b90:    a069        i.      ADR      r0,{pc}+0x1a8 ; 0x2d38
        0x00002b92:    f7fff933    ..3.    BL       __0printf$8 ; 0x1dfc
        0x00002b96:    7c21        !|      LDRB     r1,[r4,#0x10]
        0x00002b98:    a06e        n.      ADR      r0,{pc}+0x1bc ; 0x2d54
        0x00002b9a:    f7fff92f    ../.    BL       __0printf$8 ; 0x1dfc
        0x00002b9e:    7c61        a|      LDRB     r1,[r4,#0x11]
        0x00002ba0:    a073        s.      ADR      r0,{pc}+0x1d0 ; 0x2d70
        0x00002ba2:    f7fff92b    ..+.    BL       __0printf$8 ; 0x1dfc
        0x00002ba6:    7ca1        .|      LDRB     r1,[r4,#0x12]
        0x00002ba8:    a078        x.      ADR      r0,{pc}+0x1e4 ; 0x2d8c
        0x00002baa:    f7fff927    ..'.    BL       __0printf$8 ; 0x1dfc
        0x00002bae:    7ce1        .|      LDRB     r1,[r4,#0x13]
        0x00002bb0:    a07d        }.      ADR      r0,{pc}+0x1f8 ; 0x2da8
        0x00002bb2:    f7fff923    ..#.    BL       __0printf$8 ; 0x1dfc
        0x00002bb6:    7d21        !}      LDRB     r1,[r4,#0x14]
        0x00002bb8:    a082        ..      ADR      r0,{pc}+0x20c ; 0x2dc4
        0x00002bba:    f7fff91f    ....    BL       __0printf$8 ; 0x1dfc
        0x00002bbe:    7d61        a}      LDRB     r1,[r4,#0x15]
        0x00002bc0:    a087        ..      ADR      r0,{pc}+0x220 ; 0x2de0
        0x00002bc2:    f7fff91b    ....    BL       __0printf$8 ; 0x1dfc
        0x00002bc6:    7da1        .}      LDRB     r1,[r4,#0x16]
        0x00002bc8:    a08c        ..      ADR      r0,{pc}+0x234 ; 0x2dfc
        0x00002bca:    f7fff917    ....    BL       __0printf$8 ; 0x1dfc
        0x00002bce:    7de1        .}      LDRB     r1,[r4,#0x17]
        0x00002bd0:    a091        ..      ADR      r0,{pc}+0x248 ; 0x2e18
        0x00002bd2:    f7fff913    ....    BL       __0printf$8 ; 0x1dfc
        0x00002bd6:    e7b5        ..      B        0x2b44 ; xn297l_format + 152
    $d
        0x00002bd8:    20000040    @..     DCD    536870976
        0x00002bdc:    0000000a    ....    DCD    10
        0x00002be0:    3d3d3d3d    ====    DCD    1027423549
        0x00002be4:    3d3d3d3d    ====    DCD    1027423549
        0x00002be8:    3d3d3d3d    ====    DCD    1027423549
        0x00002bec:    3d3d3d3d    ====    DCD    1027423549
        0x00002bf0:    e58d85e9    ....    DCD    3851257321
        0x00002bf4:    3d3db9af    ..==    DCD    1027455407
        0x00002bf8:    3d3d3d3d    ====    DCD    1027423549
        0x00002bfc:    3d3d3d3d    ====    DCD    1027423549
        0x00002c00:    3d3d3d3d    ====    DCD    1027423549
        0x00002c04:    00000a3d    =...    DCD    2621
        0x00002c08:    203a4449    ID:     DCD    540689481
        0x00002c0c:    00000000    ....    DCD    0
        0x00002c10:    58323025    %02X    DCD    1479684133
        0x00002c14:    00000020     ...    DCD    32
        0x00002c18:    71696e75    uniq    DCD    1902734965
        0x00002c1c:    495f6575    ue_I    DCD    1230988661
        0x00002c20:    00203a44    D: .    DCD    2112068
        0x00002c24:    63616c70    plac    DCD    1667329136
        0x00002c28:    6c6f6865    ehol    DCD    1819240549
        0x00002c2c:    3a726564    der:    DCD    980575588
        0x00002c30:    00000020     ...    DCD    32
        0x00002c34:    65646f6d    mode    DCD    1701080941
        0x00002c38:    79745f6c    l_ty    DCD    2037669740
        0x00002c3c:    203a6570    pe:     DCD    540697968
        0x00002c40:    58323025    %02X    DCD    1479684133
        0x00002c44:    0000000a    ....    DCD    10
        0x00002c48:    65736572    rese    DCD    1702061426
        0x00002c4c:    64657672    rved    DCD    1684371058
        0x00002c50:    0000203a    : ..    DCD    8250
        0x00002c54:    3d3d3d3d    ====    DCD    1027423549
        0x00002c58:    3d3d3d3d    ====    DCD    1027423549
        0x00002c5c:    3d3d3d3d    ====    DCD    1027423549
        0x00002c60:    3d3d3d3d    ====    DCD    1027423549
        0x00002c64:    3d3d3d3d    ====    DCD    1027423549
        0x00002c68:    3d3d3d3d    ====    DCD    1027423549
        0x00002c6c:    3d3d3d3d    ====    DCD    1027423549
        0x00002c70:    3d3d3d3d    ====    DCD    1027423549
        0x00002c74:    0a3d3d3d    ===.    DCD    171785533
        0x00002c78:    00000000    ....    DCD    0
        0x00002c7c:    71696e75    uniq    DCD    1902734965
        0x00002c80:    695f6575    ue_i    DCD    1767859573
        0x00002c84:    20202064    d       DCD    538976356
        0x00002c88:    3a202020       :    DCD    975183904
        0x00002c8c:    25783020     0x%    DCD    628633632
        0x00002c90:    20783230    02x     DCD    544748080
        0x00002c94:    30257830    0x%0    DCD    807761968
        0x00002c98:    30207832    2x 0    DCD    807434290
        0x00002c9c:    32302578    x%02    DCD    842016120
        0x00002ca0:    78302078    x 0x    DCD    2016419960
        0x00002ca4:    78323025    %02x    DCD    2016555045
        0x00002ca8:    0000000a    ....    DCD    10
        0x00002cac:    6e69616d    main    DCD    1852399981
        0x00002cb0:    646f6d5f    _mod    DCD    1685024095
        0x00002cb4:    20202065    e       DCD    538976357
        0x00002cb8:    3a202020       :    DCD    975183904
        0x00002cbc:    25783020     0x%    DCD    628633632
        0x00002cc0:    0a783230    02x.    DCD    175649328
        0x00002cc4:    00000000    ....    DCD    0
        0x00002cc8:    5f6e6166    fan_    DCD    1601069414
        0x00002ccc:    65657073    spee    DCD    1701146739
        0x00002cd0:    20202064    d       DCD    538976356
        0x00002cd4:    3a202020       :    DCD    975183904
        0x00002cd8:    25783020     0x%    DCD    628633632
        0x00002cdc:    0a783230    02x.    DCD    175649328
        0x00002ce0:    00000000    ....    DCD    0
        0x00002ce4:    5f726961    air_    DCD    1601333601
        0x00002ce8:    65726964    dire    DCD    1701996900
        0x00002cec:    6f697463    ctio    DCD    1869182051
        0x00002cf0:    3a20206e    n  :    DCD    975183982
        0x00002cf4:    25783020     0x%    DCD    628633632
        0x00002cf8:    0a783230    02x.    DCD    175649328
        0x00002cfc:    00000000    ....    DCD    0
        0x00002d00:    5f726961    air_    DCD    1601333601
        0x00002d04:    65707974    type    DCD    1701869940
        0x00002d08:    20202020            DCD    538976288
        0x00002d0c:    3a202020       :    DCD    975183904
        0x00002d10:    25783020     0x%    DCD    628633632
        0x00002d14:    0a783230    02x.    DCD    175649328
        0x00002d18:    00000000    ....    DCD    0
        0x00002d1c:    656d6974    time    DCD    1701669236
        0x00002d20:    7465735f    _set    DCD    1952805727
        0x00002d24:    676e6974    ting    DCD    1735289204
        0x00002d28:    3a202020       :    DCD    975183904
        0x00002d2c:    25783020     0x%    DCD    628633632
        0x00002d30:    0a783230    02x.    DCD    175649328
        0x00002d34:    00000000    ....    DCD    0
        0x00002d38:    616d6572    rema    DCD    1634559346
        0x00002d3c:    685f6e69    in_h    DCD    1751084649
        0x00002d40:    7372756f    ours    DCD    1936881007
        0x00002d44:    3a202020       :    DCD    975183904
        0x00002d48:    25783020     0x%    DCD    628633632
        0x00002d4c:    0a783230    02x.    DCD    175649328
        0x00002d50:    00000000    ....    DCD    0
        0x00002d54:    616d6572    rema    DCD    1634559346
        0x00002d58:    6d5f6e69    in_m    DCD    1834970729
        0x00002d5c:    74756e69    inut    DCD    1953853033
        0x00002d60:    3a207365    es :    DCD    975205221
        0x00002d64:    25783020     0x%    DCD    628633632
        0x00002d68:    0a783230    02x.    DCD    175649328
        0x00002d6c:    00000000    ....    DCD    0
        0x00002d70:    6867696c    ligh    DCD    1751607660
        0x00002d74:    74635f74    t_ct    DCD    1952669556
        0x00002d78:    20206c72    rl      DCD    538995826
        0x00002d7c:    3a202020       :    DCD    975183904
        0x00002d80:    25783020     0x%    DCD    628633632
        0x00002d84:    0a783230    02x.    DCD    175649328
        0x00002d88:    00000000    ....    DCD    0
        0x00002d8c:    69666977    wifi    DCD    1768319351
        0x00002d90:    7274635f    _ctr    DCD    1920230239
        0x00002d94:    2020206c    l       DCD    538976364
        0x00002d98:    3a202020       :    DCD    975183904
        0x00002d9c:    25783020     0x%    DCD    628633632
        0x00002da0:    0a783230    02x.    DCD    175649328
        0x00002da4:    00000000    ....    DCD    0
        0x00002da8:    63696f76    voic    DCD    1667854198
        0x00002dac:    74635f65    e_ct    DCD    1952669541
        0x00002db0:    20206c72    rl      DCD    538995826
        0x00002db4:    3a202020       :    DCD    975183904
        0x00002db8:    25783020     0x%    DCD    628633632
        0x00002dbc:    0a783230    02x.    DCD    175649328
        0x00002dc0:    00000000    ....    DCD    0
        0x00002dc4:    65646f6d    mode    DCD    1701080941
        0x00002dc8:    79745f6c    l_ty    DCD    2037669740
        0x00002dcc:    20206570    pe      DCD    538994032
        0x00002dd0:    3a202020       :    DCD    975183904
        0x00002dd4:    25783020     0x%    DCD    628633632
        0x00002dd8:    0a783230    02x.    DCD    175649328
        0x00002ddc:    00000000    ....    DCD    0
        0x00002de0:    6c656d73    smel    DCD    1818586483
        0x00002de4:    2020206c    l       DCD    538976364
        0x00002de8:    20202020            DCD    538976288
        0x00002dec:    3a202020       :    DCD    975183904
        0x00002df0:    25783020     0x%    DCD    628633632
        0x00002df4:    0a783230    02x.    DCD    175649328
        0x00002df8:    00000000    ....    DCD    0
        0x00002dfc:    65756c62    blue    DCD    1702194274
        0x00002e00:    746f6f74    toot    DCD    1953460084
        0x00002e04:    756d5f68    h_mu    DCD    1970102120
        0x00002e08:    3a636973    sic:    DCD    979593587
        0x00002e0c:    25783020     0x%    DCD    628633632
        0x00002e10:    0a783230    02x.    DCD    175649328
        0x00002e14:    00000000    ....    DCD    0
        0x00002e18:    746c6966    filt    DCD    1953261926
        0x00002e1c:    20207265    er      DCD    538997349
        0x00002e20:    20202020            DCD    538976288
        0x00002e24:    3a202020       :    DCD    975183904
        0x00002e28:    25783020     0x%    DCD    628633632
        0x00002e2c:    0a783230    02x.    DCD    175649328
        0x00002e30:    00000000    ....    DCD    0
    $d.realdata
    .constdata
        0x00002e34:    1537ca27    '.7.    DCD    355977767
        0x00002e38:    0000143a    :...    DCD    5178
        0x00002e3c:    0309c805    ....    DCD    50972677
        0x00002e40:    3a43030a    ..C:    DCD    977470218
        0x00002e44:    c956dd55    U.V.    DCD    3377913173
        0x00002e48:    0f5ab757    W.Z.    DCD    257603415
        0x00002e4c:    e85cfc5b    [.\.    DCD    3898408027
        0x00002e50:    025ed35d    ].^.    DCD    39768925
        0x00002e54:    0e60065f    _.`.    DCD    241174111
        0x00002e58:    34663e61    a>f4    DCD    879115873
        0x00002e5c:    206e0d68    h.n     DCD    544083304
    .constdata
    TxDemodTable
        0x00002e60:    1e1f3201    .2..    DCD    505360897
        0x00002e64:    1f18101f    ....    DCD    521670687
        0x00002e68:    101f1010    ....    DCD    270471184
        0x00002e6c:    18101f10    ....    DCD    403709712
        0x00002e70:    3301101f    ...3    DCD    855707679
        0x00002e74:    1c3f193f    ?.?.    DCD    473897279
        0x00002e78:    191c321b    .2..    DCD    421278235
        0x00002e7c:    1c1c191a    ....    DCD    471603482
        0x00002e80:    1c321b1c    ..2.    DCD    473045788
    TxDemodIndex
        0x00002e84:    00030000    ....    DCD    196608
        0x00002e88:    02000401    ....    DCD    33555457
        0x00002e8c:    06000105    ....    DCD    100663557
        0x00002e90:    01070101    ....    DCD    17236225
        0x00002e94:    00020802    ....    DCD    133122
        0x00002e98:    0a010209    ....    DCD    167838217
        0x00002e9c:    030b0202    ....    DCD    51053058
        0x00002ea0:    01030c00    ....    DCD    16976896
        0x00002ea4:    0e02030d    ....    DCD    235012877
    RxDemodTable
        0x00002ea8:    10103800    .8..    DCD    269498368
        0x00002eac:    130b0b10    ....    DCD    319490832
        0x00002eb0:    0038001f    ..8.    DCD    3670047
        0x00002eb4:    02000200    ....    DCD    33554944
        0x00002eb8:    37006000    .`.7    DCD    922771456
        0x00002ebc:    6b606060    ```k    DCD    1801478240
        0x00002ec0:    007f5a6b    kZ..    DCD    8346219
        0x00002ec4:    01000036    6...    DCD    16777270
        0x00002ec8:    80000100    ....    DCD    2147483904
        0x00002ecc:    01013600    .6..    DCD    16856576
        0x00002ed0:    01000100    ....    DCD    16777472
        0x00002ed4:    05360040    @.6.    DCD    87425088
        0x00002ed8:    00040005    ....    DCD    262149
        0x00002edc:    07010f06    ....    DCD    117509894
        0x00002ee0:    05070707    ....    DCD    84346631
        0x00002ee4:    01f00807    ....    DCD    32507911
        0x00002ee8:    05050507    ....    DCD    84215047
        0x00002eec:    0f060504    ....    DCD    252052740
        0x00002ef0:    09090d01    ....    DCD    151588097
        0x00002ef4:    0b090609    ....    DCD    185140745
        0x00002ef8:    0f0f013f    ?...    DCD    252641599
        0x00002efc:    0f0a0f0f    ....    DCD    252317455
        0x00002f00:    0e011f12    ....    DCD    234954514
        0x00002f04:    00010100    ....    DCD    65792
        0x00002f08:    01800000    ....    DCD    25165824
        0x00002f0c:    0000010e    ....    DCD    270
        0x00002f10:    40010101    ...@    DCD    1073807617
        0x00002f14:    00011501    ....    DCD    70913
        0x00002f18:    01010100    ....    DCD    16843008
        0x00002f1c:    015c0140    @.\.    DCD    22806848
        0x00002f20:    01010000    ....    DCD    16842752
        0x00002f24:    5d018001    ...]    DCD    1560379393
        0x00002f28:    00010100    ....    DCD    65792
        0x00002f2c:    01400000    ..@.    DCD    20971520
        0x00002f30:    0000010a    ....    DCD    266
        0x00002f34:    80010001    ....    DCD    2147549185
    RxDemodIndex
        0x00002f38:    00000000    ....    DCD    0
        0x00002f3c:    00000100    ....    DCD    256
        0x00002f40:    04000200    ....    DCD    67109376
        0x00002f44:    03000001    ....    DCD    50331649
        0x00002f48:    03000101    ....    DCD    50331905
        0x00002f4c:    04000201    ....    DCD    67109377
        0x00002f50:    03000002    ....    DCD    50331650
        0x00002f54:    03000102    ....    DCD    50331906
        0x00002f58:    04000202    ....    DCD    67109378
        0x00002f5c:    00000003    ....    DCD    3
        0x00002f60:    01010003    ....    DCD    16842755
        0x00002f64:    01020003    ....    DCD    16908291
        0x00002f68:    00000103    ....    DCD    259
        0x00002f6c:    04000203    ....    DCD    67109379
        0x00002f70:    02010203    ....    DCD    33620483
        0x00002f74:    02020203    ....    DCD    33686019
    sop8_power_table
        0x00002f78:    0000000a    ....    DCD    10
        0x00002f7c:    00000007    ....    DCD    7
        0x00002f80:    00000003    ....    DCD    3
        0x00002f84:    00000008    ....    DCD    8
        0x00002f88:    0000000c    ....    DCD    12
        0x00002f8c:    00000000    ....    DCD    0
        0x00002f90:    00000000    ....    DCD    0
        0x00002f94:    00000009    ....    DCD    9
        0x00002f98:    00000007    ....    DCD    7
        0x00002f9c:    00000003    ....    DCD    3
        0x00002fa0:    00000008    ....    DCD    8
        0x00002fa4:    00000008    ....    DCD    8
        0x00002fa8:    00000000    ....    DCD    0
        0x00002fac:    00000000    ....    DCD    0
        0x00002fb0:    00000008    ....    DCD    8
        0x00002fb4:    00000007    ....    DCD    7
        0x00002fb8:    00000003    ....    DCD    3
        0x00002fbc:    00000008    ....    DCD    8
        0x00002fc0:    00000006    ....    DCD    6
        0x00002fc4:    00000000    ....    DCD    0
        0x00002fc8:    00000000    ....    DCD    0
        0x00002fcc:    00000007    ....    DCD    7
        0x00002fd0:    00000007    ....    DCD    7
        0x00002fd4:    00000003    ....    DCD    3
        0x00002fd8:    00000008    ....    DCD    8
        0x00002fdc:    00000003    ....    DCD    3
        0x00002fe0:    00000000    ....    DCD    0
        0x00002fe4:    00000000    ....    DCD    0
        0x00002fe8:    00000006    ....    DCD    6
        0x00002fec:    00000007    ....    DCD    7
        0x00002ff0:    00000003    ....    DCD    3
        0x00002ff4:    00000008    ....    DCD    8
        0x00002ff8:    00000004    ....    DCD    4
        0x00002ffc:    00000000    ....    DCD    0
        0x00003000:    00000001    ....    DCD    1
        0x00003004:    00000005    ....    DCD    5
        0x00003008:    00000007    ....    DCD    7
        0x0000300c:    00000003    ....    DCD    3
        0x00003010:    00000008    ....    DCD    8
        0x00003014:    00000002    ....    DCD    2
        0x00003018:    00000000    ....    DCD    0
        0x0000301c:    00000001    ....    DCD    1
        0x00003020:    00000004    ....    DCD    4
        0x00003024:    00000007    ....    DCD    7
        0x00003028:    00000003    ....    DCD    3
        0x0000302c:    00000008    ....    DCD    8
        0x00003030:    00000000    ....    DCD    0
        0x00003034:    00000000    ....    DCD    0
        0x00003038:    00000001    ....    DCD    1
        0x0000303c:    00000003    ....    DCD    3
        0x00003040:    00000007    ....    DCD    7
        0x00003044:    00000003    ....    DCD    3
        0x00003048:    00000008    ....    DCD    8
        0x0000304c:    00000000    ....    DCD    0
        0x00003050:    00000000    ....    DCD    0
        0x00003054:    00000002    ....    DCD    2
        0x00003058:    00000002    ....    DCD    2
        0x0000305c:    00000003    ....    DCD    3
        0x00003060:    00000003    ....    DCD    3
        0x00003064:    00000008    ....    DCD    8
        0x00003068:    00000002    ....    DCD    2
        0x0000306c:    00000000    ....    DCD    0
        0x00003070:    00000003    ....    DCD    3
        0x00003074:    00000001    ....    DCD    1
        0x00003078:    00000003    ....    DCD    3
        0x0000307c:    00000003    ....    DCD    3
        0x00003080:    00000008    ....    DCD    8
        0x00003084:    00000000    ....    DCD    0
        0x00003088:    00000000    ....    DCD    0
        0x0000308c:    00000003    ....    DCD    3
        0x00003090:    00000000    ....    DCD    0
        0x00003094:    00000003    ....    DCD    3
        0x00003098:    00000003    ....    DCD    3
        0x0000309c:    00000008    ....    DCD    8
        0x000030a0:    00000004    ....    DCD    4
        0x000030a4:    00000001    ....    DCD    1
        0x000030a8:    00000003    ....    DCD    3
        0x000030ac:    00000063    c...    DCD    99
        0x000030b0:    00000007    ....    DCD    7
        0x000030b4:    00000001    ....    DCD    1
        0x000030b8:    00000008    ....    DCD    8
        0x000030bc:    0000000f    ....    DCD    15
        0x000030c0:    00000000    ....    DCD    0
        0x000030c4:    00000000    ....    DCD    0
        0x000030c8:    000000ff    ....    DCD    255
        0x000030cc:    00000004    ....    DCD    4
        0x000030d0:    00000003    ....    DCD    3
        0x000030d4:    00000008    ....    DCD    8
        0x000030d8:    00000000    ....    DCD    0
        0x000030dc:    00000001    ....    DCD    1
        0x000030e0:    00000003    ....    DCD    3
        0x000030e4:    000000fe    ....    DCD    254
        0x000030e8:    00000007    ....    DCD    7
        0x000030ec:    00000001    ....    DCD    1
        0x000030f0:    0000000f    ....    DCD    15
        0x000030f4:    0000000f    ....    DCD    15
        0x000030f8:    00000000    ....    DCD    0
        0x000030fc:    00000001    ....    DCD    1
        0x00003100:    000000fc    ....    DCD    252
        0x00003104:    00000007    ....    DCD    7
        0x00003108:    00000001    ....    DCD    1
        0x0000310c:    0000000f    ....    DCD    15
        0x00003110:    0000000f    ....    DCD    15
        0x00003114:    00000001    ....    DCD    1
        0x00003118:    00000003    ....    DCD    3
        0x0000311c:    000000fb    ....    DCD    251
        0x00003120:    00000007    ....    DCD    7
        0x00003124:    00000001    ....    DCD    1
        0x00003128:    0000000f    ....    DCD    15
        0x0000312c:    0000000f    ....    DCD    15
        0x00003130:    00000001    ....    DCD    1
        0x00003134:    00000003    ....    DCD    3
        0x00003138:    000000f9    ....    DCD    249
        0x0000313c:    00000003    ....    DCD    3
        0x00003140:    00000001    ....    DCD    1
        0x00003144:    00000008    ....    DCD    8
        0x00003148:    00000008    ....    DCD    8
        0x0000314c:    00000001    ....    DCD    1
        0x00003150:    00000003    ....    DCD    3
        0x00003154:    000000f8    ....    DCD    248
        0x00003158:    00000003    ....    DCD    3
        0x0000315c:    00000001    ....    DCD    1
        0x00003160:    00000008    ....    DCD    8
        0x00003164:    00000004    ....    DCD    4
        0x00003168:    00000001    ....    DCD    1
        0x0000316c:    00000001    ....    DCD    1
        0x00003170:    000000f6    ....    DCD    246
        0x00003174:    00000003    ....    DCD    3
        0x00003178:    00000001    ....    DCD    1
        0x0000317c:    00000008    ....    DCD    8
        0x00003180:    00000000    ....    DCD    0
        0x00003184:    00000001    ....    DCD    1
        0x00003188:    00000000    ....    DCD    0
        0x0000318c:    000000f5    ....    DCD    245
        0x00003190:    00000003    ....    DCD    3
        0x00003194:    00000001    ....    DCD    1
        0x00003198:    00000006    ....    DCD    6
        0x0000319c:    00000000    ....    DCD    0
        0x000031a0:    00000001    ....    DCD    1
        0x000031a4:    00000000    ....    DCD    0
        0x000031a8:    000000f4    ....    DCD    244
        0x000031ac:    00000003    ....    DCD    3
        0x000031b0:    00000001    ....    DCD    1
        0x000031b4:    00000005    ....    DCD    5
        0x000031b8:    00000000    ....    DCD    0
        0x000031bc:    00000001    ....    DCD    1
        0x000031c0:    00000000    ....    DCD    0
        0x000031c4:    000000f2    ....    DCD    242
        0x000031c8:    00000003    ....    DCD    3
        0x000031cc:    00000001    ....    DCD    1
        0x000031d0:    00000004    ....    DCD    4
        0x000031d4:    00000000    ....    DCD    0
        0x000031d8:    00000001    ....    DCD    1
        0x000031dc:    00000000    ....    DCD    0
        0x000031e0:    000000f0    ....    DCD    240
        0x000031e4:    00000003    ....    DCD    3
        0x000031e8:    00000001    ....    DCD    1
        0x000031ec:    00000003    ....    DCD    3
        0x000031f0:    00000000    ....    DCD    0
        0x000031f4:    00000001    ....    DCD    1
        0x000031f8:    00000000    ....    DCD    0
        0x000031fc:    000000ed    ....    DCD    237
        0x00003200:    00000003    ....    DCD    3
        0x00003204:    00000001    ....    DCD    1
        0x00003208:    00000002    ....    DCD    2
        0x0000320c:    00000000    ....    DCD    0
        0x00003210:    00000001    ....    DCD    1
        0x00003214:    00000000    ....    DCD    0
        0x00003218:    000000e9    ....    DCD    233
        0x0000321c:    00000003    ....    DCD    3
        0x00003220:    00000001    ....    DCD    1
        0x00003224:    00000001    ....    DCD    1
        0x00003228:    00000000    ....    DCD    0
        0x0000322c:    00000001    ....    DCD    1
        0x00003230:    00000000    ....    DCD    0
        0x00003234:    000000e7    ....    DCD    231
        0x00003238:    00000002    ....    DCD    2
        0x0000323c:    00000001    ....    DCD    1
        0x00003240:    00000001    ....    DCD    1
        0x00003244:    00000000    ....    DCD    0
        0x00003248:    00000001    ....    DCD    1
        0x0000324c:    00000000    ....    DCD    0
        0x00003250:    000000e4    ....    DCD    228
        0x00003254:    00000001    ....    DCD    1
        0x00003258:    00000001    ....    DCD    1
        0x0000325c:    00000001    ....    DCD    1
        0x00003260:    00000008    ....    DCD    8
        0x00003264:    00000001    ....    DCD    1
        0x00003268:    00000000    ....    DCD    0
        0x0000326c:    000000df    ....    DCD    223
        0x00003270:    00000003    ....    DCD    3
        0x00003274:    00000001    ....    DCD    1
        0x00003278:    00000000    ....    DCD    0
        0x0000327c:    00000000    ....    DCD    0
        0x00003280:    00000001    ....    DCD    1
        0x00003284:    00000000    ....    DCD    0
        0x00003288:    000000db    ....    DCD    219
        0x0000328c:    00000000    ....    DCD    0
        0x00003290:    00000001    ....    DCD    1
        0x00003294:    00000000    ....    DCD    0
        0x00003298:    00000000    ....    DCD    0
        0x0000329c:    00000000    ....    DCD    0
        0x000032a0:    00000000    ....    DCD    0
        0x000032a4:    000000d8    ....    DCD    216
        0x000032a8:    00000000    ....    DCD    0
        0x000032ac:    00000001    ....    DCD    1
        0x000032b0:    00000000    ....    DCD    0
        0x000032b4:    00000000    ....    DCD    0
        0x000032b8:    00000001    ....    DCD    1
        0x000032bc:    00000000    ....    DCD    0
    .constdata
    a7535_gRfConfig
        0x000032c0:    0000004e    N...    DCD    78
        0x000032c4:    aa040001    ....    DCD    2852388865
        0x000032c8:    00ddccbb    ....    DCD    14535867
        0x000032cc:    f3f30104    ....    DCD    4092788996
        0x000032d0:    0000f0f0    ....    DCD    61680
        0x000032d4:    00000000    ....    DCD    0
        0x000032d8:    00000000    ....    DCD    0
        0x000032dc:    00000000    ....    DCD    0
        0x000032e0:    00000000    ....    DCD    0
        0x000032e4:    00000000    ....    DCD    0
        0x000032e8:    00000000    ....    DCD    0
        0x000032ec:    00000000    ....    DCD    0
        0x000032f0:    002e2e00    ....    DCD    3026432
        0x000032f4:    01000100    ....    DCD    16777472
        0x000032f8:    75300000    ..0u    DCD    1966080000
        0x000032fc:    00000000    ....    DCD    0
        0x00003300:    00020000    ....    DCD    131072
    xn297l_gRfConfig
        0x00003304:    02000023    #...    DCD    33554467
        0x00003308:    c4050100    ....    DCD    3288662272
        0x0000330c:    c1cccccc    ....    DCD    3251424460
        0x00003310:    ccc40105    ....    DCD    3435397381
        0x00003314:    01c1cccc    ....    DCD    29478092
        0x00003318:    cccccca1    ....    DCD    3435973793
        0x0000331c:    000000c1    ....    DCD    193
        0x00003320:    00000000    ....    DCD    0
        0x00003324:    00000000    ....    DCD    0
        0x00003328:    00000000    ....    DCD    0
        0x0000332c:    00000000    ....    DCD    0
        0x00003330:    00000000    ....    DCD    0
        0x00003334:    011e1e00    ....    DCD    18750976
        0x00003338:    01000100    ....    DCD    16777472
        0x0000333c:    00000000    ....    DCD    0
        0x00003340:    00000000    ....    DCD    0
        0x00003344:    00020000    ....    DCD    131072
    .constdata
    asc2_1206
        0x00003348:    00000000    ....    DCD    0
        0x0000334c:    00000000    ....    DCD    0
        0x00003350:    00000000    ....    DCD    0
        0x00003354:    00000000    ....    DCD    0
        0x00003358:    0000403f    ?@..    DCD    16447
        0x0000335c:    00000000    ....    DCD    0
        0x00003360:    00300000    ..0.    DCD    3145728
        0x00003364:    00300040    @.0.    DCD    3145792
        0x00003368:    00000040    @...    DCD    64
        0x0000336c:    c00b0009    ....    DCD    3221946377
        0x00003370:    c00b003d    =...    DCD    3221946429
        0x00003374:    0009003d    =...    DCD    589885
        0x00003378:    4024c018    ..$@    DCD    1076150296
        0x0000337c:    4022e07f    .."@    DCD    1076027519
        0x00003380:    00008031    1...    DCD    32817
        0x00003384:    c0240018    ..$.    DCD    3223584792
        0x00003388:    800d001b    ....    DCD    2148335643
        0x0000338c:    80014032    2@..    DCD    2147565618
        0x00003390:    401c8003    ...@    DCD    1075609603
        0x00003394:    801c4027    '@..    DCD    2149335079
        0x00003398:    40004007    .@.@    DCD    1073758215
        0x0000339c:    00600010    ..`.    DCD    6291472
        0x000033a0:    00000000    ....    DCD    0
        0x000033a4:    00000000    ....    DCD    0
        0x000033a8:    00000000    ....    DCD    0
        0x000033ac:    801f0000    ....    DCD    2149515264
        0x000033b0:    20404020     @@     DCD    541081632
        0x000033b4:    20400000    ..@     DCD    541065216
        0x000033b8:    801f4020     @..    DCD    2149531680
        0x000033bc:    00000000    ....    DCD    0
        0x000033c0:    00060009    ....    DCD    393225
        0x000033c4:    0006801f    ....    DCD    426015
        0x000033c8:    00000009    ....    DCD    9
        0x000033cc:    00040004    ....    DCD    262148
        0x000033d0:    0004803f    ?...    DCD    294975
        0x000033d4:    00000004    ....    DCD    4
        0x000033d8:    60001000    ...`    DCD    1610616832
        0x000033dc:    00000000    ....    DCD    0
        0x000033e0:    00000000    ....    DCD    0
        0x000033e4:    00040004    ....    DCD    262148
        0x000033e8:    00040004    ....    DCD    262148
        0x000033ec:    00000004    ....    DCD    4
        0x000033f0:    40000000    ...@    DCD    1073741824
        0x000033f4:    00000000    ....    DCD    0
        0x000033f8:    00000000    ....    DCD    0
        0x000033fc:    c0012000    . ..    DCD    3221299200
        0x00003400:    00380006    ..8.    DCD    3670022
        0x00003404:    00000040    @...    DCD    64
        0x00003408:    4020801f    .. @    DCD    1075871775
        0x0000340c:    40204020     @ @    DCD    1075855392
        0x00003410:    0000801f    ....    DCD    32799
        0x00003414:    40100000    ...@    DCD    1074790400
        0x00003418:    4000c03f    ?..@    DCD    1073791039
        0x0000341c:    00000000    ....    DCD    0
        0x00003420:    4021c018    ..!@    DCD    1075953688
        0x00003424:    40244022    "@$@    DCD    1076117538
        0x00003428:    00004018    .@..    DCD    16408
        0x0000342c:    40208010    .. @    DCD    1075871760
        0x00003430:    40244024    $@$@    DCD    1076117540
        0x00003434:    0000801b    ....    DCD    32795
        0x00003438:    000d0002    ....    DCD    851970
        0x0000343c:    c03f0011    ..?.    DCD    3225354257
        0x00003440:    00004001    .@..    DCD    16385
        0x00003444:    4024803c    <.$@    DCD    1076133948
        0x00003448:    40244024    $@$@    DCD    1076117540
        0x0000344c:    00008023    #...    DCD    32803
        0x00003450:    4024801f    ..$@    DCD    1076133919
        0x00003454:    40344024    $@4@    DCD    1077166116
        0x00003458:    00008003    ....    DCD    32771
        0x0000345c:    00200030    0. .    DCD    2097200
        0x00003460:    0038c027    '.8.    DCD    3719207
        0x00003464:    00000020     ...    DCD    32
        0x00003468:    4024801b    ..$@    DCD    1076133915
        0x0000346c:    40244024    $@$@    DCD    1076117540
        0x00003470:    0000801b    ....    DCD    32795
        0x00003474:    c022001c    ..".    DCD    3223453724
        0x00003478:    40224022    "@"@    DCD    1075986466
        0x0000347c:    0000801f    ....    DCD    32799
        0x00003480:    00000000    ....    DCD    0
        0x00003484:    00004008    .@..    DCD    16392
        0x00003488:    00000000    ....    DCD    0
        0x0000348c:    00000000    ....    DCD    0
        0x00003490:    00006004    .`..    DCD    24580
        0x00003494:    00000000    ....    DCD    0
        0x00003498:    00040000    ....    DCD    262144
        0x0000349c:    0011000a    ....    DCD    1114122
        0x000034a0:    40408020     .@@    DCD    1077968928
        0x000034a4:    00090009    ....    DCD    589833
        0x000034a8:    00090009    ....    DCD    589833
        0x000034ac:    00000009    ....    DCD    9
        0x000034b0:    40400000    ..@@    DCD    1077936128
        0x000034b4:    00118020     ...    DCD    1146912
        0x000034b8:    0004000a    ....    DCD    262154
        0x000034bc:    00200018    .. .    DCD    2097176
        0x000034c0:    00244023    #@$.    DCD    2375715
        0x000034c4:    00000018    ....    DCD    24
        0x000034c8:    4020801f    .. @    DCD    1075871775
        0x000034cc:    40294027    '@)@    DCD    1076445223
        0x000034d0:    0000401f    .@..    DCD    16415
        0x000034d4:    c0074000    .@..    DCD    3221700608
        0x000034d8:    000f0039    9...    DCD    983097
        0x000034dc:    4000c001    ...@    DCD    1073790977
        0x000034e0:    c03f4020     @?.    DCD    3225370656
        0x000034e4:    40244024    $@$@    DCD    1076117540
        0x000034e8:    0000801b    ....    DCD    32795
        0x000034ec:    4020801f    .. @    DCD    1075871775
        0x000034f0:    40204020     @ @    DCD    1075855392
        0x000034f4:    00008030    0...    DCD    32816
        0x000034f8:    c03f4020     @?.    DCD    3225370656
        0x000034fc:    40204020     @ @    DCD    1075855392
        0x00003500:    0000801f    ....    DCD    32799
        0x00003504:    c03f4020     @?.    DCD    3225370656
        0x00003508:    402e4024    $@.@    DCD    1076772900
        0x0000350c:    0000c030    0...    DCD    49200
        0x00003510:    c03f4020     @?.    DCD    3225370656
        0x00003514:    002e4024    $@..    DCD    3031076
        0x00003518:    00000030    0...    DCD    48
        0x0000351c:    8010000f    ....    DCD    2148532239
        0x00003520:    40224020     @"@    DCD    1075986464
        0x00003524:    00028033    3...    DCD    163891
        0x00003528:    c03f4020     @?.    DCD    3225370656
        0x0000352c:    00040004    ....    DCD    262148
        0x00003530:    4020c03f    ?. @    DCD    1075888191
        0x00003534:    40204020     @ @    DCD    1075855392
        0x00003538:    4020c03f    ?. @    DCD    1075888191
        0x0000353c:    00004020     @..    DCD    16416
        0x00003540:    20206000    .`      DCD    538992640
        0x00003544:    c03f2020      ?.    DCD    3225362464
        0x00003548:    00200020     . .    DCD    2097184
        0x0000354c:    c03f4020     @?.    DCD    3225370656
        0x00003550:    000b4024    $@..    DCD    737316
        0x00003554:    4020c030    0. @    DCD    1075888176
        0x00003558:    c03f4020     @?.    DCD    3225370656
        0x0000355c:    40004020     @.@    DCD    1073758240
        0x00003560:    c0004000    .@..    DCD    3221241856
        0x00003564:    003cc03f    ?.<.    DCD    3981375
        0x00003568:    003cc003    ..<.    DCD    3981315
        0x0000356c:    0000c03f    ?...    DCD    49215
        0x00003570:    c03f4020     @?.    DCD    3225370656
        0x00003574:    0023400c    .@#.    DCD    2310156
        0x00003578:    0020c03f    ?. .    DCD    2146367
        0x0000357c:    4020801f    .. @    DCD    1075871775
        0x00003580:    40204020     @ @    DCD    1075855392
        0x00003584:    0000801f    ....    DCD    32799
        0x00003588:    c03f4020     @?.    DCD    3225370656
        0x0000358c:    00244024    $@$.    DCD    2375716
        0x00003590:    00000018    ....    DCD    24
        0x00003594:    4021801f    ..!@    DCD    1075937311
        0x00003598:    e0204021    !@ .    DCD    3760209953
        0x0000359c:    0000a01f    ....    DCD    40991
        0x000035a0:    c03f4020     @?.    DCD    3225370656
        0x000035a4:    00264024    $@&.    DCD    2506788
        0x000035a8:    4000c019    ...@    DCD    1073791001
        0x000035ac:    4024c018    ..$@    DCD    1076150296
        0x000035b0:    40224024    $@"@    DCD    1075986468
        0x000035b4:    00008031    1...    DCD    32817
        0x000035b8:    40200030    0. @    DCD    1075839024
        0x000035bc:    4020c03f    ?. @    DCD    1075888191
        0x000035c0:    00000030    0...    DCD    48
        0x000035c4:    803f0020     .?.    DCD    2151612448
        0x000035c8:    40004000    .@.@    DCD    1073758208
        0x000035cc:    0020803f    ?. .    DCD    2129983
        0x000035d0:    003e0020     .>.    DCD    4063264
        0x000035d4:    0007c001    ....    DCD    507905
        0x000035d8:    00200038    8. .    DCD    2097208
        0x000035dc:    c0070038    8...    DCD    3221684280
        0x000035e0:    c007003c    <...    DCD    3221684284
        0x000035e4:    00000038    8...    DCD    56
        0x000035e8:    c0394020     @9.    DCD    3224977440
        0x000035ec:    c0390006    ..9.    DCD    3224961030
        0x000035f0:    00004020     @..    DCD    16416
        0x000035f4:    40380020     .8@    DCD    1077411872
        0x000035f8:    4038c007    ..8@    DCD    1077460999
        0x000035fc:    00000020     ...    DCD    32
        0x00003600:    c0214030    0@!.    DCD    3223404592
        0x00003604:    40384026    &@8@    DCD    1077428262
        0x00003608:    0000c020     ...    DCD    49184
        0x0000360c:    00000000    ....    DCD    0
        0x00003610:    2040e07f    ..@     DCD    541122687
        0x00003614:    00002040    @ ..    DCD    8256
        0x00003618:    00700000    ..p.    DCD    7340032
        0x0000361c:    8003000c    ....    DCD    2147680268
        0x00003620:    00004000    .@..    DCD    16384
        0x00003624:    20400000    ..@     DCD    541065216
        0x00003628:    e07f2040    @ ..    DCD    3766427712
        0x0000362c:    00000000    ....    DCD    0
        0x00003630:    00200000    .. .    DCD    2097152
        0x00003634:    00200040    @. .    DCD    2097216
        0x00003638:    00000000    ....    DCD    0
        0x0000363c:    10001000    ....    DCD    268439552
        0x00003640:    10001000    ....    DCD    268439552
        0x00003644:    10001000    ....    DCD    268439552
        0x00003648:    00000000    ....    DCD    0
        0x0000364c:    00000040    @...    DCD    64
        0x00003650:    00000000    ....    DCD    0
        0x00003654:    80020000    ....    DCD    2147614720
        0x00003658:    40054005    .@.@    DCD    1074085893
        0x0000365c:    4000c003    ...@    DCD    1073790979
        0x00003660:    c03f0020     .?.    DCD    3225354272
        0x00003664:    40044004    .@.@    DCD    1074020356
        0x00003668:    00008003    ....    DCD    32771
        0x0000366c:    80030000    ....    DCD    2147680256
        0x00003670:    40044004    .@.@    DCD    1074020356
        0x00003674:    00004006    .@..    DCD    16390
        0x00003678:    80030000    ....    DCD    2147680256
        0x0000367c:    40244004    .@$@    DCD    1076117508
        0x00003680:    4000c03f    ?..@    DCD    1073791039
        0x00003684:    80030000    ....    DCD    2147680256
        0x00003688:    40054005    .@.@    DCD    1074085893
        0x0000368c:    00004003    .@..    DCD    16387
        0x00003690:    40040000    ...@    DCD    1074003968
        0x00003694:    4024c01f    ..$@    DCD    1076150303
        0x00003698:    00204024    $@ .    DCD    2113572
        0x0000369c:    e0020000    ....    DCD    3758227456
        0x000036a0:    50055005    .P.P    DCD    1342525445
        0x000036a4:    20045006    .P.     DCD    537153542
        0x000036a8:    c03f4020     @?.    DCD    3225370656
        0x000036ac:    00044004    .@..    DCD    278532
        0x000036b0:    4000c003    ...@    DCD    1073790979
        0x000036b4:    40040000    ...@    DCD    1074003968
        0x000036b8:    4000c027    '..@    DCD    1073791015
        0x000036bc:    00000000    ....    DCD    0
        0x000036c0:    10001000    ....    DCD    268439552
        0x000036c4:    e0271004    ..'.    DCD    3760656388
        0x000036c8:    00000000    ....    DCD    0
        0x000036cc:    c03f4020     @?.    DCD    3225370656
        0x000036d0:    00074001    .@..    DCD    475137
        0x000036d4:    4004c004    ...@    DCD    1074053124
        0x000036d8:    40204020     @ @    DCD    1075855392
        0x000036dc:    4000c03f    ?..@    DCD    1073791039
        0x000036e0:    00004000    .@..    DCD    16384
        0x000036e4:    0004c007    ....    DCD    311303
        0x000036e8:    0004c007    ....    DCD    311303
        0x000036ec:    0000c003    ....    DCD    49155
        0x000036f0:    c0074004    .@..    DCD    3221700612
        0x000036f4:    00044004    .@..    DCD    278532
        0x000036f8:    4000c003    ...@    DCD    1073790979
        0x000036fc:    80030000    ....    DCD    2147680256
        0x00003700:    40044004    .@.@    DCD    1074020356
        0x00003704:    00008003    ....    DCD    32771
        0x00003708:    f0071004    ....    DCD    4026994692
        0x0000370c:    40045004    .P.@    DCD    1074024452
        0x00003710:    00008003    ....    DCD    32771
        0x00003714:    80030000    ....    DCD    2147680256
        0x00003718:    50044004    .@.P    DCD    1342455812
        0x0000371c:    1000f007    ....    DCD    268496903
        0x00003720:    c0074004    .@..    DCD    3221700612
        0x00003724:    00044002    .@..    DCD    278530
        0x00003728:    00000004    ....    DCD    4
        0x0000372c:    40060000    ...@    DCD    1074135040
        0x00003730:    40054005    .@.@    DCD    1074085893
        0x00003734:    0000c004    ....    DCD    49156
        0x00003738:    00040000    ....    DCD    262144
        0x0000373c:    4004801f    ...@    DCD    1074036767
        0x00003740:    00004000    .@..    DCD    16384
        0x00003744:    80070004    ....    DCD    2147942404
        0x00003748:    40044000    .@.@    DCD    1074020352
        0x0000374c:    4000c007    ...@    DCD    1073790983
        0x00003750:    00070004    ....    DCD    458756
        0x00003754:    8001c004    ....    DCD    2147598340
        0x00003758:    00040006    ....    DCD    262150
        0x0000375c:    c0010006    ....    DCD    3221291014
        0x00003760:    c0010007    ....    DCD    3221291015
        0x00003764:    00000006    ....    DCD    6
        0x00003768:    c0064004    .@..    DCD    3221635076
        0x0000376c:    c0060001    ....    DCD    3221618689
        0x00003770:    00004004    .@..    DCD    16388
        0x00003774:    10071004    ....    DCD    268898308
        0x00003778:    8001e004    ....    DCD    2147606532
        0x0000377c:    00040006    ....    DCD    262150
        0x00003780:    40040000    ...@    DCD    1074003968
        0x00003784:    4006c005    ...@    DCD    1074184197
        0x00003788:    00004004    .@..    DCD    16388
        0x0000378c:    00000000    ....    DCD    0
        0x00003790:    e07b0004    ..{.    DCD    3766157316
        0x00003794:    00002040    @ ..    DCD    8256
        0x00003798:    00000000    ....    DCD    0
        0x0000379c:    f0ff0000    ....    DCD    4043243520
        0x000037a0:    00000000    ....    DCD    0
        0x000037a4:    20400000    ..@     DCD    541065216
        0x000037a8:    0004e07b    {...    DCD    319611
        0x000037ac:    00000000    ....    DCD    0
        0x000037b0:    00800040    @...    DCD    8388672
        0x000037b4:    00200040    @. .    DCD    2097216
        0x000037b8:    00400020     .@.    DCD    4194336
    asc2_1608
        0x000037bc:    00000000    ....    DCD    0
        0x000037c0:    00000000    ....    DCD    0
        0x000037c4:    00000000    ....    DCD    0
        0x000037c8:    00000000    ....    DCD    0
        0x000037cc:    00000000    ....    DCD    0
        0x000037d0:    cc1f0000    ....    DCD    3424583680
        0x000037d4:    00000c00    ....    DCD    3072
        0x000037d8:    00000000    ....    DCD    0
        0x000037dc:    00080000    ....    DCD    524288
        0x000037e0:    00600030    0.`.    DCD    6291504
        0x000037e4:    00300008    ..0.    DCD    3145736
        0x000037e8:    00000060    `...    DCD    96
        0x000037ec:    fc032002    . ..    DCD    4228063234
        0x000037f0:    2002201e    . .     DCD    537010206
        0x000037f4:    201efc03    ...     DCD    538901507
        0x000037f8:    00002002    . ..    DCD    8194
        0x000037fc:    180e0000    ....    DCD    403570688
        0x00003800:    ff3f0411    ..?.    DCD    4282319889
        0x00003804:    780c8410    ...x    DCD    2014086160
        0x00003808:    00000000    ....    DCD    0
        0x0000380c:    8410000f    ....    DCD    2215641103
        0x00003810:    c000380f    .8..    DCD    3221239823
        0x00003814:    84187807    .x..    DCD    2216196103
        0x00003818:    00007800    .x..    DCD    30720
        0x0000381c:    840f7800    .x..    DCD    2215606272
        0x00003820:    2411c410    ...$    DCD    605144080
        0x00003824:    e400980e    ....    DCD    3825244174
        0x00003828:    08008400    ....    DCD    134251520
        0x0000382c:    00680008    ..h.    DCD    6815752
        0x00003830:    00000070    p...    DCD    112
        0x00003834:    00000000    ....    DCD    0
        0x00003838:    00000000    ....    DCD    0
        0x0000383c:    00000000    ....    DCD    0
        0x00003840:    e0070000    ....    DCD    3758555136
        0x00003844:    04201818    .. .    DCD    69212184
        0x00003848:    00000240    @...    DCD    576
        0x0000384c:    02400000    ..@.    DCD    37748736
        0x00003850:    18180420     ...    DCD    404227104
        0x00003854:    0000e007    ....    DCD    57351
        0x00003858:    00000000    ....    DCD    0
        0x0000385c:    40024002    .@.@    DCD    1073889282
        0x00003860:    f00f8001    ....    DCD    4027547649
        0x00003864:    40028001    ...@    DCD    1073905665
        0x00003868:    00004002    .@..    DCD    16386
        0x0000386c:    80008000    ....    DCD    2147516416
        0x00003870:    f80f8000    ....    DCD    4161765376
        0x00003874:    80008000    ....    DCD    2147516416
        0x00003878:    00008000    ....    DCD    32768
        0x0000387c:    0d000100    ....    DCD    218104064
        0x00003880:    00000e00    ....    DCD    3584
        0x00003884:    00000000    ....    DCD    0
        0x00003888:    00000000    ....    DCD    0
        0x0000388c:    80000000    ....    DCD    2147483648
        0x00003890:    80008000    ....    DCD    2147516416
        0x00003894:    80008000    ....    DCD    2147516416
        0x00003898:    80008000    ....    DCD    2147516416
        0x0000389c:    0c000000    ....    DCD    201326592
        0x000038a0:    00000c00    ....    DCD    3072
        0x000038a4:    00000000    ....    DCD    0
        0x000038a8:    00000000    ....    DCD    0
        0x000038ac:    06000000    ....    DCD    100663296
        0x000038b0:    60001800    ...`    DCD    1610618880
        0x000038b4:    00068001    ....    DCD    425985
        0x000038b8:    00200018    .. .    DCD    2097176
        0x000038bc:    f0070000    ....    DCD    4026990592
        0x000038c0:    04100808    ....    DCD    68159496
        0x000038c4:    08080410    ....    DCD    134743056
        0x000038c8:    0000f007    ....    DCD    61447
        0x000038cc:    04080000    ....    DCD    67633152
        0x000038d0:    fc1f0408    ....    DCD    4229891080
        0x000038d4:    04000400    ....    DCD    67109888
        0x000038d8:    00000000    ....    DCD    0
        0x000038dc:    0c0e0000    ....    DCD    202244096
        0x000038e0:    24101410    ...$    DCD    605033488
        0x000038e4:    84114410    .D..    DCD    2215724048
        0x000038e8:    00000c0e    ....    DCD    3086
        0x000038ec:    180c0000    ....    DCD    403439616
        0x000038f0:    04110410    ....    DCD    68224016
        0x000038f4:    88120411    ....    DCD    2282882065
        0x000038f8:    0000700c    .p..    DCD    28684
        0x000038fc:    e0000000    ....    DCD    3758096384
        0x00003900:    24042003    . .$    DCD    604250115
        0x00003904:    fc1f2408    .$..    DCD    4229899272
        0x00003908:    00002400    .$..    DCD    9216
        0x0000390c:    981f0000    ....    DCD    2552168448
        0x00003910:    04118410    ....    DCD    68256784
        0x00003914:    88100411    ....    DCD    2282750993
        0x00003918:    00007010    .p..    DCD    28688
        0x0000391c:    f0070000    ....    DCD    4026990592
        0x00003920:    04118808    ....    DCD    68257800
        0x00003924:    88180411    ....    DCD    2283275281
        0x00003928:    00007000    .p..    DCD    28672
        0x0000392c:    001c0000    ....    DCD    1835008
        0x00003930:    fc100010    ....    DCD    4228907024
        0x00003934:    001c0013    ....    DCD    1835027
        0x00003938:    00000010    ....    DCD    16
        0x0000393c:    380e0000    ...8    DCD    940441600
        0x00003940:    84104411    .D..    DCD    2215658513
        0x00003944:    44118410    ...D    DCD    1141998608
        0x00003948:    0000380e    .8..    DCD    14350
        0x0000394c:    00070000    ....    DCD    458752
        0x00003950:    44108c08    ...D    DCD    1141935112
        0x00003954:    88084410    .D..    DCD    2282243088
        0x00003958:    0000f007    ....    DCD    61447
        0x0000395c:    00000000    ....    DCD    0
        0x00003960:    0c030000    ....    DCD    201523200
        0x00003964:    00000c03    ....    DCD    3075
        0x00003968:    00000000    ....    DCD    0
        0x0000396c:    00000000    ....    DCD    0
        0x00003970:    06010100    ....    DCD    100729088
        0x00003974:    00000000    ....    DCD    0
        0x00003978:    00000000    ....    DCD    0
        0x0000397c:    80000000    ....    DCD    2147483648
        0x00003980:    20024001    .@.     DCD    537018369
        0x00003984:    08081004    ....    DCD    134746116
        0x00003988:    00000410    ....    DCD    1040
        0x0000398c:    20022002    . .     DCD    537010178
        0x00003990:    20022002    . .     DCD    537010178
        0x00003994:    20022002    . .     DCD    537010178
        0x00003998:    00002002    . ..    DCD    8194
        0x0000399c:    04100000    ....    DCD    68157440
        0x000039a0:    10040808    ....    DCD    268699656
        0x000039a4:    40012002    . .@    DCD    1073815554
        0x000039a8:    00008000    ....    DCD    32768
        0x000039ac:    000e0000    ....    DCD    917504
        0x000039b0:    0c100012    ....    DCD    202375186
        0x000039b4:    80106c10    .l..    DCD    2148559888
        0x000039b8:    0000000f    ....    DCD    15
        0x000039bc:    180ce003    ....    DCD    403496963
        0x000039c0:    2414e413    ...$    DCD    605348883
        0x000039c4:    2808c417    ...(    DCD    671663127
        0x000039c8:    0000d007    ....    DCD    53255
        0x000039cc:    3c000400    ...<    DCD    1006633984
        0x000039d0:    401cc403    ...@    DCD    1075627011
        0x000039d4:    e4004007    .@..    DCD    3825221639
        0x000039d8:    04001c00    ....    DCD    67116032
        0x000039dc:    fc1f0410    ....    DCD    4229891088
        0x000039e0:    04110411    ....    DCD    68224017
        0x000039e4:    880e0411    ....    DCD    2282619921
        0x000039e8:    00007000    .p..    DCD    28672
        0x000039ec:    180ce003    ....    DCD    403496963
        0x000039f0:    04100410    ....    DCD    68158480
        0x000039f4:    08100410    ....    DCD    135267344
        0x000039f8:    0000101c    ....    DCD    4124
        0x000039fc:    fc1f0410    ....    DCD    4229891088
        0x00003a00:    04100410    ....    DCD    68158480
        0x00003a04:    08080410    ....    DCD    134743056
        0x00003a08:    0000f007    ....    DCD    61447
        0x00003a0c:    fc1f0410    ....    DCD    4229891088
        0x00003a10:    04110411    ....    DCD    68224017
        0x00003a14:    0410c417    ....    DCD    68207639
        0x00003a18:    00001808    ....    DCD    6152
        0x00003a1c:    fc1f0410    ....    DCD    4229891088
        0x00003a20:    00110411    ....    DCD    1115153
        0x00003a24:    0010c017    ....    DCD    1097751
        0x00003a28:    00000008    ....    DCD    8
        0x00003a2c:    180ce003    ....    DCD    403496963
        0x00003a30:    04100410    ....    DCD    68158480
        0x00003a34:    781c4410    .D.x    DCD    2015118352
        0x00003a38:    00004000    .@..    DCD    16384
        0x00003a3c:    fc1f0410    ....    DCD    4229891088
        0x00003a40:    80008410    ....    DCD    2147517456
        0x00003a44:    84108000    ....    DCD    2215673856
        0x00003a48:    0410fc1f    ....    DCD    68221983
        0x00003a4c:    04100000    ....    DCD    68157440
        0x00003a50:    fc1f0410    ....    DCD    4229891088
        0x00003a54:    04100410    ....    DCD    68158480
        0x00003a58:    00000000    ....    DCD    0
        0x00003a5c:    01000300    ....    DCD    16777984
        0x00003a60:    01100110    ....    DCD    17826064
        0x00003a64:    0010fe1f    ....    DCD    1113631
        0x00003a68:    00000010    ....    DCD    16
        0x00003a6c:    fc1f0410    ....    DCD    4229891088
        0x00003a70:    80030411    ....    DCD    2147681297
        0x00003a74:    1c186414    .d..    DCD    471360532
        0x00003a78:    00000410    ....    DCD    1040
        0x00003a7c:    fc1f0410    ....    DCD    4229891088
        0x00003a80:    04000410    ....    DCD    67109904
        0x00003a84:    04000400    ....    DCD    67109888
        0x00003a88:    00000c00    ....    DCD    3072
        0x00003a8c:    fc1f0410    ....    DCD    4229891088
        0x00003a90:    fc00001f    ....    DCD    4227858463
        0x00003a94:    fc1f001f    ....    DCD    4229890079
        0x00003a98:    00000410    ....    DCD    1040
        0x00003a9c:    fc1f0410    ....    DCD    4229891088
        0x00003aa0:    0003040c    ....    DCD    197644
        0x00003aa4:    1810e000    ....    DCD    403759104
        0x00003aa8:    0010fc1f    ....    DCD    1113119
        0x00003aac:    0808f007    ....    DCD    134803463
        0x00003ab0:    04100410    ....    DCD    68158480
        0x00003ab4:    08080410    ....    DCD    134743056
        0x00003ab8:    0000f007    ....    DCD    61447
        0x00003abc:    fc1f0410    ....    DCD    4229891088
        0x00003ac0:    80108410    ....    DCD    2148566032
        0x00003ac4:    80108010    ....    DCD    2148565008
        0x00003ac8:    0000000f    ....    DCD    15
        0x00003acc:    1808f007    ....    DCD    403238919
        0x00003ad0:    24102410    .$.$    DCD    605037584
        0x00003ad4:    0a081c10    ....    DCD    168303632
        0x00003ad8:    0000f207    ....    DCD    61959
        0x00003adc:    fc1f0410    ....    DCD    4229891088
        0x00003ae0:    00110411    ....    DCD    1115153
        0x00003ae4:    3011c011    ...0    DCD    806469649
        0x00003ae8:    04000c0e    ....    DCD    67111950
        0x00003aec:    1c0e0000    ....    DCD    470679552
        0x00003af0:    84100411    ....    DCD    2215642129
        0x00003af4:    44108410    ...D    DCD    1141933072
        0x00003af8:    0000381c    .8..    DCD    14364
        0x00003afc:    00100018    ....    DCD    1048600
        0x00003b00:    fc1f0410    ....    DCD    4229891088
        0x00003b04:    00100410    ....    DCD    1049616
        0x00003b08:    00000018    ....    DCD    24
        0x00003b0c:    f81f0010    ....    DCD    4162781200
        0x00003b10:    04000410    ....    DCD    67109904
        0x00003b14:    04100400    ....    DCD    68158464
        0x00003b18:    0010f81f    ....    DCD    1112095
        0x00003b1c:    001e0010    ....    DCD    1966096
        0x00003b20:    1c00e011    ....    DCD    469819409
        0x00003b24:    80137000    .p..    DCD    2148757504
        0x00003b28:    0010001c    ....    DCD    1048604
        0x00003b2c:    3c10c01f    ...<    DCD    1007730719
        0x00003b30:    001fe000    ....    DCD    2088960
        0x00003b34:    3c10e000    ...<    DCD    1007738880
        0x00003b38:    0000c01f    ....    DCD    49183
        0x00003b3c:    0c180410    ....    DCD    202900496
        0x00003b40:    c0013416    .4..    DCD    3221304342
        0x00003b44:    3416c001    ...4    DCD    873906177
        0x00003b48:    04100c18    ....    DCD    68160536
        0x00003b4c:    001c0010    ....    DCD    1835024
        0x00003b50:    fc000413    ....    DCD    4227859475
        0x00003b54:    001c0413    ....    DCD    1836051
        0x00003b58:    00000010    ....    DCD    16
        0x00003b5c:    1c100408    ....    DCD    470811656
        0x00003b60:    84106410    .d..    DCD    2215666704
        0x00003b64:    041c0413    ....    DCD    68944915
        0x00003b68:    00001810    ....    DCD    6160
        0x00003b6c:    00000000    ....    DCD    0
        0x00003b70:    fe7f0000    ....    DCD    4269735936
        0x00003b74:    02400240    @.@.    DCD    37749312
        0x00003b78:    00000240    @...    DCD    576
        0x00003b7c:    00300000    ..0.    DCD    3145728
        0x00003b80:    8003000c    ....    DCD    2147680268
        0x00003b84:    1c006000    .`..    DCD    469786624
        0x00003b88:    00000300    ....    DCD    768
        0x00003b8c:    02400000    ..@.    DCD    37748736
        0x00003b90:    02400240    @.@.    DCD    37749312
        0x00003b94:    0000fe7f    ....    DCD    65151
        0x00003b98:    00000000    ....    DCD    0
        0x00003b9c:    00000000    ....    DCD    0
        0x00003ba0:    00400020     .@.    DCD    4194336
        0x00003ba4:    00400040    @.@.    DCD    4194368
        0x00003ba8:    00000020     ...    DCD    32
        0x00003bac:    01000100    ....    DCD    16777472
        0x00003bb0:    01000100    ....    DCD    16777472
        0x00003bb4:    01000100    ....    DCD    16777472
        0x00003bb8:    01000100    ....    DCD    16777472
        0x00003bbc:    00400000    ..@.    DCD    4194304
        0x00003bc0:    00200040    @. .    DCD    2097216
        0x00003bc4:    00000000    ....    DCD    0
        0x00003bc8:    00000000    ....    DCD    0
        0x00003bcc:    98000000    ....    DCD    2550136832
        0x00003bd0:    44012401    .$.D    DCD    1140925441
        0x00003bd4:    44014401    .D.D    DCD    1140933633
        0x00003bd8:    0400fc00    ....    DCD    67173376
        0x00003bdc:    fc1f0010    ....    DCD    4229890064
        0x00003be0:    04018800    ....    DCD    67209216
        0x00003be4:    88000401    ....    DCD    2281702401
        0x00003be8:    00007000    .p..    DCD    28672
        0x00003bec:    70000000    ...p    DCD    1879048192
        0x00003bf0:    04018800    ....    DCD    67209216
        0x00003bf4:    04010401    ....    DCD    67175425
        0x00003bf8:    00008800    ....    DCD    34816
        0x00003bfc:    70000000    ...p    DCD    1879048192
        0x00003c00:    04018800    ....    DCD    67209216
        0x00003c04:    08110401    ....    DCD    135332865
        0x00003c08:    0400fc1f    ....    DCD    67173407
        0x00003c0c:    f8000000    ....    DCD    4160749568
        0x00003c10:    44014401    .D.D    DCD    1140933633
        0x00003c14:    44014401    .D.D    DCD    1140933633
        0x00003c18:    0000c800    ....    DCD    51200
        0x00003c1c:    04010000    ....    DCD    67174400
        0x00003c20:    fc0f0401    ....    DCD    4228842497
        0x00003c24:    04110411    ....    DCD    68224017
        0x00003c28:    00180011    ....    DCD    1572881
        0x00003c2c:    d6000000    ....    DCD    3590324224
        0x00003c30:    29012901    .).)    DCD    687941889
        0x00003c34:    c9012901    .)..    DCD    3372296449
        0x00003c38:    00000601    ....    DCD    1537
        0x00003c3c:    fc1f0410    ....    DCD    4229891088
        0x00003c40:    00018400    ....    DCD    99328
        0x00003c44:    04010001    ....    DCD    67174401
        0x00003c48:    0400fc00    ....    DCD    67173376
        0x00003c4c:    04010000    ....    DCD    67174400
        0x00003c50:    fc190419    ....    DCD    4229497881
        0x00003c54:    04000400    ....    DCD    67109888
        0x00003c58:    00000000    ....    DCD    0
        0x00003c5c:    03000000    ....    DCD    50331648
        0x00003c60:    01010100    ....    DCD    16843008
        0x00003c64:    fe190119    ....    DCD    4263051545
        0x00003c68:    00000000    ....    DCD    0
        0x00003c6c:    fc1f0410    ....    DCD    4229891088
        0x00003c70:    40002400    .$.@    DCD    1073751040
        0x00003c74:    0c01b401    ....    DCD    201438209
        0x00003c78:    00000401    ....    DCD    1025
        0x00003c7c:    04100000    ....    DCD    68157440
        0x00003c80:    fc1f0410    ....    DCD    4229891088
        0x00003c84:    04000400    ....    DCD    67109888
        0x00003c88:    00000000    ....    DCD    0
        0x00003c8c:    fc010401    ....    DCD    4227924993
        0x00003c90:    00010401    ....    DCD    66561
        0x00003c94:    0401fc01    ....    DCD    67238913
        0x00003c98:    fc000001    ....    DCD    4227858433
        0x00003c9c:    fc010401    ....    DCD    4227924993
        0x00003ca0:    00018400    ....    DCD    99328
        0x00003ca4:    04010001    ....    DCD    67174401
        0x00003ca8:    0400fc00    ....    DCD    67173376
        0x00003cac:    f8000000    ....    DCD    4160749568
        0x00003cb0:    04010401    ....    DCD    67175425
        0x00003cb4:    04010401    ....    DCD    67175425
        0x00003cb8:    0000f800    ....    DCD    63488
        0x00003cbc:    ff010101    ....    DCD    4278255873
        0x00003cc0:    04018500    ....    DCD    67208448
        0x00003cc4:    88000401    ....    DCD    2281702401
        0x00003cc8:    00007000    .p..    DCD    28672
        0x00003ccc:    70000000    ...p    DCD    1879048192
        0x00003cd0:    04018800    ....    DCD    67209216
        0x00003cd4:    05010401    ....    DCD    83952641
        0x00003cd8:    0100ff01    ....    DCD    16842497
        0x00003cdc:    04010401    ....    DCD    67175425
        0x00003ce0:    8400fc01    ....    DCD    2214657025
        0x00003ce4:    00010401    ....    DCD    66561
        0x00003ce8:    00008001    ....    DCD    32769
        0x00003cec:    cc000000    ....    DCD    3422552064
        0x00003cf0:    24012401    .$.$    DCD    604054529
        0x00003cf4:    24012401    .$.$    DCD    604054529
        0x00003cf8:    00009801    ....    DCD    38913
        0x00003cfc:    00010000    ....    DCD    65536
        0x00003d00:    f8070001    ....    DCD    4161208321
        0x00003d04:    04010401    ....    DCD    67175425
        0x00003d08:    00000000    ....    DCD    0
        0x00003d0c:    f8010001    ....    DCD    4160815105
        0x00003d10:    04000400    ....    DCD    67109888
        0x00003d14:    08010400    ....    DCD    134284288
        0x00003d18:    0400fc01    ....    DCD    67173377
        0x00003d1c:    80010001    ....    DCD    2147549185
        0x00003d20:    0c007001    .p..    DCD    201355265
        0x00003d24:    60011000    ...`    DCD    1610682368
        0x00003d28:    00018001    ....    DCD    98305
        0x00003d2c:    0c01f001    ....    DCD    201453569
        0x00003d30:    c0013000    .0..    DCD    3221303296
        0x00003d34:    0c013000    .0..    DCD    201404416
        0x00003d38:    0001f001    ....    DCD    126977
        0x00003d3c:    04010000    ....    DCD    67174400
        0x00003d40:    74008c01    ...t    DCD    1946192897
        0x00003d44:    8c017001    .p..    DCD    2348904449
        0x00003d48:    00000401    ....    DCD    1025
        0x00003d4c:    81010101    ....    DCD    2164326657
        0x00003d50:    0e007101    .q..    DCD    234909953
        0x00003d54:    60011800    ...`    DCD    1610684416
        0x00003d58:    00018001    ....    DCD    98305
        0x00003d5c:    84010000    ....    DCD    2214658048
        0x00003d60:    34010c01    ...4    DCD    872483841
        0x00003d64:    84014401    .D..    DCD    2214675457
        0x00003d68:    00000c01    ....    DCD    3073
        0x00003d6c:    00000000    ....    DCD    0
        0x00003d70:    00000000    ....    DCD    0
        0x00003d74:    fc3e0001    ..>.    DCD    4231921665
        0x00003d78:    02400240    @.@.    DCD    37749312
        0x00003d7c:    00000000    ....    DCD    0
        0x00003d80:    00000000    ....    DCD    0
        0x00003d84:    0000ffff    ....    DCD    65535
        0x00003d88:    00000000    ....    DCD    0
        0x00003d8c:    02400000    ..@.    DCD    37748736
        0x00003d90:    fc3e0240    @.>.    DCD    4231922240
        0x00003d94:    00000001    ....    DCD    1
        0x00003d98:    00000000    ....    DCD    0
        0x00003d9c:    00600000    ..`.    DCD    6291456
        0x00003da0:    00800080    ....    DCD    8388736
        0x00003da4:    00400040    @.@.    DCD    4194368
        0x00003da8:    00200020     . .    DCD    2097184
    asc2_2412
        0x00003dac:    00000000    ....    DCD    0
        0x00003db0:    00000000    ....    DCD    0
        0x00003db4:    00000000    ....    DCD    0
        0x00003db8:    00000000    ....    DCD    0
        0x00003dbc:    00000000    ....    DCD    0
        0x00003dc0:    00000000    ....    DCD    0
        0x00003dc4:    00000000    ....    DCD    0
        0x00003dc8:    00000000    ....    DCD    0
        0x00003dcc:    00000000    ....    DCD    0
        0x00003dd0:    00000000    ....    DCD    0
        0x00003dd4:    00000000    ....    DCD    0
        0x00003dd8:    00000000    ....    DCD    0
        0x00003ddc:    0f000000    ....    DCD    251658240
        0x00003de0:    fe0f3880    .8..    DCD    4262410368
        0x00003de4:    38800f38    8..8    DCD    947916600
        0x00003de8:    00000000    ....    DCD    0
        0x00003dec:    00000000    ....    DCD    0
        0x00003df0:    00000000    ....    DCD    0
        0x00003df4:    00000000    ....    DCD    0
        0x00003df8:    00010000    ....    DCD    65536
        0x00003dfc:    00000600    ....    DCD    1536
        0x00003e00:    3800000c    ...8    DCD    939524108
        0x00003e04:    00310000    ..1.    DCD    3211264
        0x00003e08:    00000600    ....    DCD    1536
        0x00003e0c:    3800000c    ...8    DCD    939524108
        0x00003e10:    00300000    ..0.    DCD    3145728
        0x00003e14:    00000000    ....    DCD    0
        0x00003e18:    00000000    ....    DCD    0
        0x00003e1c:    67008061    a..g    DCD    1728086113
        0x00003e20:    80f907f8    ....    DCD    2163804152
        0x00003e24:    00806100    .a..    DCD    8413440
        0x00003e28:    61008061    a..a    DCD    1627422817
        0x00003e2c:    80610080    ..a.    DCD    2153840768
        0x00003e30:    07f86700    .g..    DCD    133719808
        0x00003e34:    610080f9    ...a    DCD    1627422969
        0x00003e38:    00000080    ....    DCD    128
        0x00003e3c:    00000000    ....    DCD    0
        0x00003e40:    c0010000    ....    DCD    3221291008
        0x00003e44:    f0e003e0    ....    DCD    4041212896
        0x00003e48:    04083006    .0..    DCD    67645446
        0x00003e4c:    ff1f0818    ....    DCD    4280223768
        0x00003e50:    080e04fe    ....    DCD    135136510
        0x00003e54:    03f08707    ....    DCD    66094855
        0x00003e58:    0000e081    ....    DCD    57473
        0x00003e5c:    00000000    ....    DCD    0
        0x00003e60:    0600f001    ....    DCD    100724737
        0x00003e64:    0404000c    ....    DCD    67371020
        0x00003e68:    700c0608    ...p    DCD    1879836168
        0x00003e6c:    00c0f901    ....    DCD    12646657
        0x00003e70:    3b00000e    ...;    DCD    989855758
        0x00003e74:    18ec00e0    ....    DCD    418119904
        0x00003e78:    04080807    ....    DCD    67635207
        0x00003e7c:    0300180c    ....    DCD    50337804
        0x00003e80:    000000e0    ....    DCD    224
        0x00003e84:    00e00100    ....    DCD    14680320
        0x00003e88:    f803f007    ....    DCD    4161007623
        0x00003e8c:    081c0418    ....    DCD    136053784
        0x00003e90:    07081704    ....    DCD    117970692
        0x00003e94:    c003d0e1    ....    DCD    3221475553
        0x00003e98:    b02300e0    ..#.    DCD    2955084000
        0x00003e9c:    00083c00    .<..    DCD    539648
        0x00003ea0:    00000820     ...    DCD    2080
        0x00003ea4:    00000010    ....    DCD    16
        0x00003ea8:    01000000    ....    DCD    16777216
        0x00003eac:    00310000    ..1.    DCD    3211264
        0x00003eb0:    00003200    .2..    DCD    12800
        0x00003eb4:    0000001c    ....    DCD    28
        0x00003eb8:    00000000    ....    DCD    0
        0x00003ebc:    00000000    ....    DCD    0
        0x00003ec0:    00000000    ....    DCD    0
        0x00003ec4:    00000000    ....    DCD    0
        0x00003ec8:    00000000    ....    DCD    0
        0x00003ecc:    00000000    ....    DCD    0
        0x00003ed0:    00000000    ....    DCD    0
        0x00003ed4:    00000000    ....    DCD    0
        0x00003ed8:    00000000    ....    DCD    0
        0x00003edc:    ff01007f    ....    DCD    4278255743
        0x00003ee0:    f08007c0    ....    DCD    4034922432
        0x00003ee4:    1018000c    ....    DCD    270008332
        0x00003ee8:    00200400    .. .    DCD    2098176
        0x00003eec:    00000002    ....    DCD    2
        0x00003ef0:    20000000    ...     DCD    536870912
        0x00003ef4:    00100200    ....    DCD    1049088
        0x00003ef8:    18000c04    ....    DCD    402656260
        0x00003efc:    01f08007    ....    DCD    32538631
        0x00003f00:    7f00c0ff    ....    DCD    2130755839
        0x00003f04:    00000000    ....    DCD    0
        0x00003f08:    00000000    ....    DCD    0
        0x00003f0c:    00000000    ....    DCD    0
        0x00003f10:    00000000    ....    DCD    0
        0x00003f14:    00000000    ....    DCD    0
        0x00003f18:    66000042    B..f    DCD    1711276098
        0x00003f1c:    00660000    ..f.    DCD    6684672
        0x00003f20:    00003c00    .<..    DCD    15360
        0x00003f24:    ff030018    ....    DCD    4278386712
        0x00003f28:    001800c0    ....    DCD    1573056
        0x00003f2c:    00003c00    .<..    DCD    15360
        0x00003f30:    66000066    f..f    DCD    1711276134
        0x00003f34:    00420000    ..B.    DCD    4325376
        0x00003f38:    00000000    ....    DCD    0
        0x00003f3c:    08000008    ....    DCD    134217736
        0x00003f40:    00080000    ....    DCD    524288
        0x00003f44:    00000800    ....    DCD    2048
        0x00003f48:    ff010008    ....    DCD    4278255624
        0x00003f4c:    000800c0    ....    DCD    524480
        0x00003f50:    00000800    ....    DCD    2048
        0x00003f54:    08000008    ....    DCD    134217736
        0x00003f58:    00080000    ....    DCD    524288
        0x00003f5c:    00000000    ....    DCD    0
        0x00003f60:    00000100    ....    DCD    256
        0x00003f64:    32000031    1..2    DCD    838860849
        0x00003f68:    001c0000    ....    DCD    1835008
        0x00003f6c:    00000000    ....    DCD    0
        0x00003f70:    00000000    ....    DCD    0
        0x00003f74:    00000000    ....    DCD    0
        0x00003f78:    00000000    ....    DCD    0
        0x00003f7c:    00000000    ....    DCD    0
        0x00003f80:    00000000    ....    DCD    0
        0x00003f84:    08000008    ....    DCD    134217736
        0x00003f88:    00080000    ....    DCD    524288
        0x00003f8c:    00000800    ....    DCD    2048
        0x00003f90:    08000008    ....    DCD    134217736
        0x00003f94:    00080000    ....    DCD    524288
        0x00003f98:    00000800    ....    DCD    2048
        0x00003f9c:    08000008    ....    DCD    134217736
        0x00003fa0:    00000000    ....    DCD    0
        0x00003fa4:    00000000    ....    DCD    0
        0x00003fa8:    00000000    ....    DCD    0
        0x00003fac:    38000038    8..8    DCD    939524152
        0x00003fb0:    00380000    ..8.    DCD    3670016
        0x00003fb4:    00000000    ....    DCD    0
        0x00003fb8:    00000000    ....    DCD    0
        0x00003fbc:    00000000    ....    DCD    0
        0x00003fc0:    00000000    ....    DCD    0
        0x00003fc4:    00000000    ....    DCD    0
        0x00003fc8:    00000000    ....    DCD    0
        0x00003fcc:    00000600    ....    DCD    1536
        0x00003fd0:    7000001c    ...p    DCD    1879048220
        0x00003fd4:    00800100    ....    DCD    8388864
        0x00003fd8:    3800000e    ...8    DCD    939524110
        0x00003fdc:    00c00000    ....    DCD    12582912
        0x00003fe0:    1c000007    ....    DCD    469762055
        0x00003fe4:    00300000    ..0.    DCD    3145728
        0x00003fe8:    00000000    ....    DCD    0
        0x00003fec:    00000000    ....    DCD    0
        0x00003ff0:    ff01807f    ....    DCD    4278288511
        0x00003ff4:    708003e0    ...p    DCD    1887437792
        0x00003ff8:    04180006    ....    DCD    68681734
        0x00003ffc:    00040800    ....    DCD    264192
        0x00004000:    18000608    ....    DCD    402654728
        0x00004004:    01708003    ..p.    DCD    24150019
        0x00004008:    7f00e0ff    ....    DCD    2130764031
        0x0000400c:    00000080    ....    DCD    128
        0x00004010:    00000000    ....    DCD    0
        0x00004014:    00010000    ....    DCD    65536
        0x00004018:    08000108    ....    DCD    134217992
        0x0000401c:    03080001    ....    DCD    50855937
        0x00004020:    ff07f8ff    ....    DCD    4278712575
        0x00004024:    080000f8    ....    DCD    134217976
        0x00004028:    00080000    ....    DCD    524288
        0x0000402c:    00000800    ....    DCD    2048
        0x00004030:    00000000    ....    DCD    0
        0x00004034:    01000000    ....    DCD    16777216
        0x00004038:    c00238c0    .8..    DCD    3221371072
        0x0000403c:    98000458    X...    DCD    2550137944
        0x00004040:    04180104    ....    DCD    68681988
        0x00004044:    04041802    ....    DCD    67377154
        0x00004048:    181c0618    ....    DCD    404489752
        0x0000404c:    0118f803    ....    DCD    18413571
        0x00004050:    0000f8e0    ....    DCD    63712
        0x00004054:    00000000    ....    DCD    0
        0x00004058:    01000000    ....    DCD    16777216
        0x0000405c:    c003e0c0    ....    DCD    3221479616
        0x00004060:    080004f0    ....    DCD    134218992
        0x00004064:    04080804    ....    DCD    67635204
        0x00004068:    18060808    ....    DCD    403048456
        0x0000406c:    18f40308    ....    DCD    418644744
        0x00004070:    00f0e701    ....    DCD    15787777
        0x00004074:    0000e001    ....    DCD    57345
        0x00004078:    00000000    ....    DCD    0
        0x0000407c:    00000000    ....    DCD    0
        0x00004080:    0d000003    ....    DCD    218103811
        0x00004084:    00110000    ....    DCD    1114112
        0x00004088:    00006100    .a..    DCD    24832
        0x0000408c:    01030881    ....    DCD    16976001
        0x00004090:    f8ff0708    ....    DCD    4177463048
        0x00004094:    00f8ff0f    ....    DCD    16318223
        0x00004098:    01000801    ....    DCD    16779265
        0x0000409c:    00000008    ....    DCD    8
        0x000040a0:    00000000    ....    DCD    0
        0x000040a4:    fc07e000    ....    DCD    4228374528
        0x000040a8:    080806d0    ....    DCD    134743760
        0x000040ac:    06081006    ....    DCD    101191686
        0x000040b0:    10060810    ....    DCD    268830736
        0x000040b4:    38180608    ...8    DCD    941098504
        0x000040b8:    06f00f06    ....    DCD    116395782
        0x000040bc:    0000c007    ....    DCD    49159
        0x000040c0:    00000000    ....    DCD    0
        0x000040c4:    00000000    ....    DCD    0
        0x000040c8:    ff01803f    ?...    DCD    4278288447
        0x000040cc:    308403e0    ...0    DCD    813958112
        0x000040d0:    04180802    ....    DCD    68683778
        0x000040d4:    10040810    ....    DCD    268699664
        0x000040d8:    08100408    ....    DCD    135267336
        0x000040dc:    03101807    ....    DCD    51386375
        0x000040e0:    0700f00f    ....    DCD    117501967
        0x000040e4:    000000c0    ....    DCD    192
        0x000040e8:    00000000    ....    DCD    0
        0x000040ec:    c0030000    ....    DCD    3221422080
        0x000040f0:    00000700    ....    DCD    1792
        0x000040f4:    06000006    ....    DCD    100663302
        0x000040f8:    0706f800    ....    DCD    117897216
        0x000040fc:    001806f8    ....    DCD    1574648
        0x00004100:    0700e006    ....    DCD    117497862
        0x00004104:    00060000    ....    DCD    393216
        0x00004108:    00000000    ....    DCD    0
        0x0000410c:    01000000    ....    DCD    16777216
        0x00004110:    f703e0e1    ....    DCD    4144226529
        0x00004114:    103406f0    ..4.    DCD    271845104
        0x00004118:    04081804    ....    DCD    67639300
        0x0000411c:    0c040818    ....    DCD    201590808
        0x00004120:    080c0408    ....    DCD    135005192
        0x00004124:    03181606    ....    DCD    51910150
        0x00004128:    c101f0f3    ....    DCD    3238129907
        0x0000412c:    000000e0    ....    DCD    224
        0x00004130:    00000000    ....    DCD    0
        0x00004134:    fc0300f8    ....    DCD    4228055288
        0x00004138:    38060330    0..8    DCD    939918128
        0x0000413c:    04080204    ....    DCD    67633668
        0x00004140:    02040802    ....    DCD    33818626
        0x00004144:    10040408    ....    DCD    268698632
        0x00004148:    01f00803    ....    DCD    32507907
        0x0000414c:    7f00c0ff    ....    DCD    2130755839
        0x00004150:    00000000    ....    DCD    0
        0x00004154:    00000000    ....    DCD    0
        0x00004158:    00000000    ....    DCD    0
        0x0000415c:    00000000    ....    DCD    0
        0x00004160:    00000000    ....    DCD    0
        0x00004164:    70003870    p8.p    DCD    1879062640
        0x00004168:    38700038    8.p8    DCD    946864184
        0x0000416c:    00000000    ....    DCD    0
        0x00004170:    00000000    ....    DCD    0
        0x00004174:    00000000    ....    DCD    0
        0x00004178:    00000000    ....    DCD    0
        0x0000417c:    00000000    ....    DCD    0
        0x00004180:    00000000    ....    DCD    0
        0x00004184:    00000000    ....    DCD    0
        0x00004188:    30001a30    0..0    DCD    805313072
        0x0000418c:    0000001c    ....    DCD    28
        0x00004190:    00000000    ....    DCD    0
        0x00004194:    00000000    ....    DCD    0
        0x00004198:    00000000    ....    DCD    0
        0x0000419c:    00000000    ....    DCD    0
        0x000041a0:    08000000    ....    DCD    134217728
        0x000041a4:    00140000    ....    DCD    1310720
        0x000041a8:    00002200    ."..    DCD    8704
        0x000041ac:    80000041    A...    DCD    2147483713
        0x000041b0:    40000180    ...@    DCD    1073742208
        0x000041b4:    04200002    .. .    DCD    69206018
        0x000041b8:    00081000    ....    DCD    528384
        0x000041bc:    00000008    ....    DCD    8
        0x000041c0:    00000000    ....    DCD    0
        0x000041c4:    21000021    !..!    DCD    553648161
        0x000041c8:    00210000    ..!.    DCD    2162688
        0x000041cc:    00002100    .!..    DCD    8448
        0x000041d0:    21000021    !..!    DCD    553648161
        0x000041d4:    00210000    ..!.    DCD    2162688
        0x000041d8:    00002100    .!..    DCD    8448
        0x000041dc:    21000021    !..!    DCD    553648161
        0x000041e0:    00000000    ....    DCD    0
        0x000041e4:    00000000    ....    DCD    0
        0x000041e8:    00080000    ....    DCD    524288
        0x000041ec:    10000408    ....    DCD    268436488
        0x000041f0:    01200002    .. .    DCD    18874370
        0x000041f4:    80004000    .@..    DCD    2147500032
        0x000041f8:    00410080    ..A.    DCD    4259968
        0x000041fc:    00002200    ."..    DCD    8704
        0x00004200:    08000014    ....    DCD    134217748
        0x00004204:    00000000    ....    DCD    0
        0x00004208:    03000000    ....    DCD    50331648
        0x0000420c:    c00400c0    ....    DCD    3221487808
        0x00004210:    00000400    ....    DCD    1024
        0x00004214:    08380008    ..8.    DCD    137887752
        0x00004218:    0808380f    .8..    DCD    134756367
        0x0000421c:    00100838    8...    DCD    1050680
        0x00004220:    0700300c    .0..    DCD    117452812
        0x00004224:    c00300e0    ....    DCD    3221422304
        0x00004228:    00000000    ....    DCD    0
        0x0000422c:    00000000    ....    DCD    0
        0x00004230:    ff00803f    ?...    DCD    4278222911
        0x00004234:    708003e0    ...p    DCD    1887437792
        0x00004238:    06100f02    ....    DCD    101715714
        0x0000423c:    c0048870    p...    DCD    3221522544
        0x00004240:    08830488    ....    DCD    142804104
        0x00004244:    02887f04    ....    DCD    42499844
        0x00004248:    010390c0    ....    DCD    17010880
        0x0000424c:    40fe0020     ..@    DCD    1090388000
        0x00004250:    00080000    ....    DCD    524288
        0x00004254:    01001800    ....    DCD    16783360
        0x00004258:    083e00f8    ..>.    DCD    138281208
        0x0000425c:    0700c201    ....    DCD    117490177
        0x00004260:    e2070002    ....    DCD    3792109570
        0x00004264:    00fe0000    ....    DCD    16646144
        0x00004268:    00c81f00    ....    DCD    13115136
        0x0000426c:    0000f801    ....    DCD    63489
        0x00004270:    08000038    8...    DCD    134217784
        0x00004274:    07080004    ....    DCD    117964804
        0x00004278:    ff07f8ff    ....    DCD    4278712575
        0x0000427c:    080804f8    ....    DCD    134743288
        0x00004280:    04080804    ....    DCD    67635204
        0x00004284:    08040808    ....    DCD    134481928
        0x00004288:    08180608    ....    DCD    135792136
        0x0000428c:    0118f403    ....    DCD    18412547
        0x00004290:    0100f0e7    ....    DCD    16838887
        0x00004294:    000000e0    ....    DCD    224
        0x00004298:    00000000    ....    DCD    0
        0x0000429c:    ff01803f    ?...    DCD    4278288447
        0x000042a0:    708003e0    ...p    DCD    1887437792
        0x000042a4:    04180002    ....    DCD    68681730
        0x000042a8:    00040800    ....    DCD    264192
        0x000042ac:    08000408    ....    DCD    134218760
        0x000042b0:    06100004    ....    DCD    101711876
        0x000042b4:    80072000    . ..    DCD    2147950592
        0x000042b8:    000000c0    ....    DCD    192
        0x000042bc:    07080004    ....    DCD    117964804
        0x000042c0:    ff07f8ff    ....    DCD    4278712575
        0x000042c4:    080004f8    ....    DCD    134219000
        0x000042c8:    04080004    ....    DCD    67633156
        0x000042cc:    00040800    ....    DCD    264192
        0x000042d0:    10000218    ....    DCD    268435992
        0x000042d4:    01708003    ..p.    DCD    24150019
        0x000042d8:    7f00e0ff    ....    DCD    2130764031
        0x000042dc:    00000080    ....    DCD    128
        0x000042e0:    07080004    ....    DCD    117964804
        0x000042e4:    ff07f8ff    ....    DCD    4278712575
        0x000042e8:    080804f8    ....    DCD    134743288
        0x000042ec:    04080804    ....    DCD    67635204
        0x000042f0:    08040808    ....    DCD    134481928
        0x000042f4:    083e0408    ..>.    DCD    138281992
        0x000042f8:    06080004    ....    DCD    101187588
        0x000042fc:    00011800    ....    DCD    71680
        0x00004300:    00000060    `...    DCD    96
        0x00004304:    07080004    ....    DCD    117964804
        0x00004308:    ff07f8ff    ....    DCD    4278712575
        0x0000430c:    080804f8    ....    DCD    134743288
        0x00004310:    04000804    ....    DCD    67110916
        0x00004314:    08040008    ....    DCD    134479880
        0x00004318:    003e0400    ..>.    DCD    4064256
        0x0000431c:    06000006    ....    DCD    100663302
        0x00004320:    80010000    ....    DCD    2147549184
        0x00004324:    00000000    ....    DCD    0
        0x00004328:    00000000    ....    DCD    0
        0x0000432c:    ff01803f    ?...    DCD    4278288447
        0x00004330:    708003e0    ...p    DCD    1887437792
        0x00004334:    04180006    ....    DCD    68681734
        0x00004338:    02040800    ....    DCD    33818624
        0x0000433c:    08020408    ....    DCD    134349832
        0x00004340:    07f00302    ....    DCD    133169922
        0x00004344:    0200f083    ....    DCD    33616003
        0x00004348:    00020000    ....    DCD    131072
        0x0000434c:    07080004    ....    DCD    117964804
        0x00004350:    ff07f8ff    ....    DCD    4278712575
        0x00004354:    080804f8    ....    DCD    134743288
        0x00004358:    00000800    ....    DCD    2048
        0x0000435c:    08000008    ....    DCD    134217736
        0x00004360:    00080000    ....    DCD    524288
        0x00004364:    07080804    ....    DCD    117966852
        0x00004368:    ff07f8ff    ....    DCD    4278712575
        0x0000436c:    080004f8    ....    DCD    134219000
        0x00004370:    00000000    ....    DCD    0
        0x00004374:    00040000    ....    DCD    262144
        0x00004378:    08000408    ....    DCD    134218760
        0x0000437c:    07080004    ....    DCD    117964804
        0x00004380:    ff07f8ff    ....    DCD    4278712575
        0x00004384:    080004f8    ....    DCD    134219000
        0x00004388:    04080004    ....    DCD    67633156
        0x0000438c:    00000800    ....    DCD    2048
        0x00004390:    00000000    ....    DCD    0
        0x00004394:    00000000    ....    DCD    0
        0x00004398:    00000600    ....    DCD    1536
        0x0000439c:    01000007    ....    DCD    16777223
        0x000043a0:    04010004    ....    DCD    67174404
        0x000043a4:    00040100    ....    DCD    262400
        0x000043a8:    feff0703    ....    DCD    4278126339
        0x000043ac:    04fcff07    ....    DCD    83689223
        0x000043b0:    00040000    ....    DCD    262144
        0x000043b4:    00000400    ....    DCD    1024
        0x000043b8:    07080004    ....    DCD    117964804
        0x000043bc:    ff07f8ff    ....    DCD    4278712575
        0x000043c0:    080c04f8    ....    DCD    135005432
        0x000043c4:    00001800    ....    DCD    6144
        0x000043c8:    c704003e    >...    DCD    3338928190
        0x000043cc:    c8030580    ....    DCD    3355641216
        0x000043d0:    04f80006    ....    DCD    83361798
        0x000043d4:    00043800    .8..    DCD    276480
        0x000043d8:    08000018    ....    DCD    134217752
        0x000043dc:    07080004    ....    DCD    117964804
        0x000043e0:    ff07f8ff    ....    DCD    4278712575
        0x000043e4:    080004f8    ....    DCD    134219000
        0x000043e8:    00080000    ....    DCD    524288
        0x000043ec:    00000800    ....    DCD    2048
        0x000043f0:    08000008    ....    DCD    134217736
        0x000043f4:    00080000    ....    DCD    524288
        0x000043f8:    00001800    ....    DCD    6144
        0x000043fc:    00000060    `...    DCD    96
        0x00004400:    07080004    ....    DCD    117964804
        0x00004404:    8007f8ff    ....    DCD    2148006143
        0x00004408:    00fc0708    ....    DCD    16516872
        0x0000440c:    00c07f00    ....    DCD    12615424
        0x00004410:    0700f803    ....    DCD    117504003
        0x00004414:    007800c0    ..x.    DCD    7864512
        0x00004418:    07088007    ....    DCD    117997575
        0x0000441c:    ff07f8ff    ....    DCD    4278712575
        0x00004420:    080004f8    ....    DCD    134219000
        0x00004424:    07080004    ....    DCD    117964804
        0x00004428:    0007f8ff    ....    DCD    522495
        0x0000442c:    00c00308    ....    DCD    12583688
        0x00004430:    0000e000    ....    DCD    57344
        0x00004434:    1e000038    8...    DCD    503316536
        0x00004438:    00070000    ....    DCD    458752
        0x0000443c:    04c00100    ....    DCD    79692032
        0x00004440:    ff07f000    ....    DCD    4278710272
        0x00004444:    000004f8    ....    DCD    1272
        0x00004448:    00000000    ....    DCD    0
        0x0000444c:    ff01807f    ....    DCD    4278288511
        0x00004450:    708003e0    ...p    DCD    1887437792
        0x00004454:    04180006    ....    DCD    68681734
        0x00004458:    00040800    ....    DCD    264192
        0x0000445c:    18000608    ....    DCD    402654728
        0x00004460:    01300003    ..0.    DCD    19922947
        0x00004464:    7f00e0ff    ....    DCD    2130764031
        0x00004468:    00000080    ....    DCD    128
        0x0000446c:    07080004    ....    DCD    117964804
        0x00004470:    ff07f8ff    ....    DCD    4278712575
        0x00004474:    080404f8    ....    DCD    134481144
        0x00004478:    04000404    ....    DCD    67109892
        0x0000447c:    04040004    ....    DCD    67371012
        0x00004480:    00040400    ....    DCD    263168
        0x00004484:    03000c06    ....    DCD    50334726
        0x00004488:    f00100f8    ....    DCD    4026597624
        0x0000448c:    00000000    ....    DCD    0
        0x00004490:    00000000    ....    DCD    0
        0x00004494:    ff01807f    ....    DCD    4278288511
        0x00004498:    708003e0    ...p    DCD    1887437792
        0x0000449c:    04880006    ....    DCD    76021766
        0x000044a0:    00048800    ....    DCD    296960
        0x000044a4:    3c0006c8    ...<    DCD    1006634696
        0x000044a8:    013e0003    ..>.    DCD    20840451
        0x000044ac:    7f00e6ff    ....    DCD    2130765567
        0x000044b0:    00000084    ....    DCD    132
        0x000044b4:    07080004    ....    DCD    117964804
        0x000044b8:    ff07f8ff    ....    DCD    4278712575
        0x000044bc:    080804f8    ....    DCD    134743288
        0x000044c0:    04000804    ....    DCD    67110916
        0x000044c4:    0f04000c    ....    DCD    251920396
        0x000044c8:    c00b0400    ....    DCD    3221947392
        0x000044cc:    03f01006    ....    DCD    66064390
        0x000044d0:    e00138f0    .8..    DCD    3758176496
        0x000044d4:    08000008    ....    DCD    134217736
        0x000044d8:    01000000    ....    DCD    16777216
        0x000044dc:    f003f8e0    ....    DCD    4026792160
        0x000044e0:    10300630    0.0.    DCD    271582768
        0x000044e4:    04081804    ....    DCD    67639300
        0x000044e8:    0c040818    ....    DCD    201590808
        0x000044ec:    080c0408    ....    DCD    135005192
        0x000044f0:    02180602    ....    DCD    35128834
        0x000044f4:    8107f007    ....    DCD    2164781063
        0x000044f8:    000000e0    ....    DCD    224
        0x000044fc:    06008001    ....    DCD    100696065
        0x00004500:    00040000    ....    DCD    262144
        0x00004504:    00000400    ....    DCD    1024
        0x00004508:    07080004    ....    DCD    117964804
        0x0000450c:    ff07f8ff    ....    DCD    4278712575
        0x00004510:    080004f8    ....    DCD    134219000
        0x00004514:    04000004    ....    DCD    67108868
        0x00004518:    00060000    ....    DCD    393216
        0x0000451c:    00800100    ....    DCD    8388864
        0x00004520:    07000004    ....    DCD    117440516
        0x00004524:    ff07e0ff    ....    DCD    4278706431
        0x00004528:    180004f0    ....    DCD    402654448
        0x0000452c:    00080000    ....    DCD    524288
        0x00004530:    00000800    ....    DCD    2048
        0x00004534:    08000008    ....    DCD    134217736
        0x00004538:    04080000    ....    DCD    67633152
        0x0000453c:    ff071000    ....    DCD    4278652928
        0x00004540:    000004e0    ....    DCD    1248
        0x00004544:    06000004    ....    DCD    100663300
        0x00004548:    e0070000    ....    DCD    3758555136
        0x0000454c:    00fe0700    ....    DCD    16647936
        0x00004550:    00e01f04    ....    DCD    14688004
        0x00004554:    0000f801    ....    DCD    63489
        0x00004558:    e0010038    8...    DCD    3758161976
        0x0000455c:    07003e04    .>..    DCD    117456388
        0x00004560:    000600c0    ....    DCD    393408
        0x00004564:    00000400    ....    DCD    1024
        0x00004568:    07000004    ....    DCD    117440516
        0x0000456c:    ff0700e0    ....    DCD    4278649056
        0x00004570:    f81f04c0    ....    DCD    4162782400
        0x00004574:    07c00700    ....    DCD    130025216
        0x00004578:    ff0700f8    ....    DCD    4278649080
        0x0000457c:    f83f0480    ..?.    DCD    4164879488
        0x00004580:    04c00700    ....    DCD    79693568
        0x00004584:    000700f8    ....    DCD    459000
        0x00004588:    00000400    ....    DCD    1024
        0x0000458c:    04000000    ....    DCD    67108864
        0x00004590:    00060800    ....    DCD    395264
        0x00004594:    78c00718    ...x    DCD    2025850648
        0x00004598:    00c8f105    ....    DCD    13168901
        0x0000459c:    1f00003e    >...    DCD    520093758
        0x000045a0:    e8630480    ..c.    DCD    3898803328
        0x000045a4:    06f88007    ....    DCD    116948999
        0x000045a8:    00041800    ....    DCD    268288
        0x000045ac:    00000008    ....    DCD    8
        0x000045b0:    06000004    ....    DCD    100663300
        0x000045b4:    80070000    ....    DCD    2147942400
        0x000045b8:    08e00700    ....    DCD    148899584
        0x000045bc:    00087c04    .|..    DCD    556036
        0x000045c0:    0700f81f    ....    DCD    117504031
        0x000045c4:    081800f8    ....    DCD    135790840
        0x000045c8:    0708e004    ....    DCD    118022148
        0x000045cc:    00060000    ....    DCD    393216
        0x000045d0:    00000400    ....    DCD    1024
        0x000045d4:    01000000    ....    DCD    16777216
        0x000045d8:    00060800    ....    DCD    395264
        0x000045dc:    f8000438    8...    DCD    4160750648
        0x000045e0:    04e80304    ....    DCD    82313988
        0x000045e4:    7c04080f    ...|    DCD    2080638991
        0x000045e8:    08f00508    ....    DCD    149947656
        0x000045ec:    0708c007    ....    DCD    118013959
        0x000045f0:    00041800    ....    DCD    268288
        0x000045f4:    00000060    `...    DCD    96
        0x000045f8:    00000000    ....    DCD    0
        0x000045fc:    00000000    ....    DCD    0
        0x00004600:    00000000    ....    DCD    0
        0x00004604:    3f000000    ...?    DCD    1056964608
        0x00004608:    0020feff    .. .    DCD    2162431
        0x0000460c:    02002002    . ..    DCD    33562626
        0x00004610:    20020020     ..     DCD    537002016
        0x00004614:    00200200    .. .    DCD    2097664
        0x00004618:    00000002    ....    DCD    2
        0x0000461c:    00000000    ....    DCD    0
        0x00004620:    00080000    ....    DCD    524288
        0x00004624:    00000700    ....    DCD    1792
        0x00004628:    0000c000    ....    DCD    49152
        0x0000462c:    06000038    8...    DCD    100663352
        0x00004630:    c0010000    ....    DCD    3221291008
        0x00004634:    00300000    ..0.    DCD    3145728
        0x00004638:    00000e00    ....    DCD    3584
        0x0000463c:    00000001    ....    DCD    1
        0x00004640:    00000000    ....    DCD    0
        0x00004644:    00200000    .. .    DCD    2097152
        0x00004648:    02002002    . ..    DCD    33562626
        0x0000464c:    20020020     ..     DCD    537002016
        0x00004650:    00200200    .. .    DCD    2097664
        0x00004654:    feff3f02    .?..    DCD    4278140674
        0x00004658:    00000000    ....    DCD    0
        0x0000465c:    00000000    ....    DCD    0
        0x00004660:    00000000    ....    DCD    0
        0x00004664:    00000000    ....    DCD    0
        0x00004668:    00000000    ....    DCD    0
        0x0000466c:    00000800    ....    DCD    2048
        0x00004670:    30000010    ...0    DCD    805306384
        0x00004674:    00200000    .. .    DCD    2097152
        0x00004678:    00003000    .0..    DCD    12288
        0x0000467c:    08000010    ....    DCD    134217744
        0x00004680:    00000000    ....    DCD    0
        0x00004684:    00000000    ....    DCD    0
        0x00004688:    00010000    ....    DCD    65536
        0x0000468c:    00000100    ....    DCD    256
        0x00004690:    01000001    ....    DCD    16777217
        0x00004694:    00010000    ....    DCD    65536
        0x00004698:    00000100    ....    DCD    256
        0x0000469c:    01000001    ....    DCD    16777217
        0x000046a0:    00010000    ....    DCD    65536
        0x000046a4:    00000100    ....    DCD    256
        0x000046a8:    01000001    ....    DCD    16777217
        0x000046ac:    00000000    ....    DCD    0
        0x000046b0:    00000000    ....    DCD    0
        0x000046b4:    00002000    . ..    DCD    8192
        0x000046b8:    10000020     ...    DCD    268435488
        0x000046bc:    00100000    ....    DCD    1048576
        0x000046c0:    00000000    ....    DCD    0
        0x000046c4:    00000000    ....    DCD    0
        0x000046c8:    00000000    ....    DCD    0
        0x000046cc:    00000000    ....    DCD    0
        0x000046d0:    00000000    ....    DCD    0
        0x000046d4:    1900f000    ....    DCD    419491840
        0x000046d8:    181b00f8    ....    DCD    404422904
        0x000046dc:    00082200    ."..    DCD    532992
        0x000046e0:    24000826    &..$    DCD    603981862
        0x000046e4:    10240008    ..$.    DCD    270794760
        0x000046e8:    00f83f00    .?..    DCD    16269056
        0x000046ec:    0000f81f    ....    DCD    63519
        0x000046f0:    18000008    ....    DCD    402653192
        0x000046f4:    04000000    ....    DCD    67108864
        0x000046f8:    ff070000    ....    DCD    4278648832
        0x000046fc:    f0ff0ff8    ....    DCD    4043247608
        0x00004700:    00181800    ....    DCD    1579008
        0x00004704:    20000810    ...     DCD    536872976
        0x00004708:    08200008    .. .    DCD    136314888
        0x0000470c:    00183000    .0..    DCD    1585152
        0x00004710:    0f00f01f    ....    DCD    251719711
        0x00004714:    000000c0    ....    DCD    192
        0x00004718:    00000000    ....    DCD    0
        0x0000471c:    1f00c007    ....    DCD    520142855
        0x00004720:    301800f0    ...0    DCD    806879472
        0x00004724:    00082000    . ..    DCD    532480
        0x00004728:    20000820     ..     DCD    536872992
        0x0000472c:    083c0008    ..<.    DCD    138149896
        0x00004730:    00101c00    ....    DCD    1055744
        0x00004734:    00006000    .`..    DCD    24576
        0x00004738:    00000000    ....    DCD    0
        0x0000473c:    00000000    ....    DCD    0
        0x00004740:    1f00c007    ....    DCD    520142855
        0x00004744:    183800f0    ..8.    DCD    406323440
        0x00004748:    00082000    . ..    DCD    532480
        0x0000474c:    20000820     ..     DCD    536872992
        0x00004750:    10100408    ....    DCD    269485064
        0x00004754:    0ff8ff07    ....    DCD    267976455
        0x00004758:    0000f0ff    ....    DCD    61695
        0x0000475c:    00000010    ....    DCD    16
        0x00004760:    00000000    ....    DCD    0
        0x00004764:    07000000    ....    DCD    117440512
        0x00004768:    f01f00c0    ....    DCD    4028563648
        0x0000476c:    00301200    ..0.    DCD    3150336
        0x00004770:    22001822    ".."    DCD    570431522
        0x00004774:    08220008    ..".    DCD    136445960
        0x00004778:    00083200    .2..    DCD    537088
        0x0000477c:    0e00101e    ....    DCD    234885150
        0x00004780:    00000020     ...    DCD    32
        0x00004784:    00000000    ....    DCD    0
        0x00004788:    20000020     ..     DCD    536870944
        0x0000478c:    08200008    .. .    DCD    136314888
        0x00004790:    03f8ff01    ....    DCD    66649857
        0x00004794:    2006f8ff    ...     DCD    537327871
        0x00004798:    08200408    .. .    DCD    136315912
        0x0000479c:    07082004    . ..    DCD    117972996
        0x000047a0:    00030020     ...    DCD    196640
        0x000047a4:    00000000    ....    DCD    0
        0x000047a8:    00000000    ....    DCD    0
        0x000047ac:    0e000e00    ....    DCD    234884608
        0x000047b0:    f31f006e    n...    DCD    4078895214
        0x000047b4:    00b13100    .1..    DCD    11612416
        0x000047b8:    2000b120     ..     DCD    536916256
        0x000047bc:    913100b1    ..1.    DCD    2435907761
        0x000047c0:    00131f00    ....    DCD    1253120
        0x000047c4:    20001e2e    ...     DCD    536878638
        0x000047c8:    0030000e    ..0.    DCD    3145742
        0x000047cc:    04000000    ....    DCD    67108864
        0x000047d0:    ff070800    ....    DCD    4278650880
        0x000047d4:    f8ff0ff8    ....    DCD    4177465336
        0x000047d8:    00081000    ....    DCD    528384
        0x000047dc:    20000020     ..     DCD    536870944
        0x000047e0:    08200000    .. .    DCD    136314880
        0x000047e4:    00f83f00    .?..    DCD    16269056
        0x000047e8:    0000f81f    ....    DCD    63519
        0x000047ec:    00000008    ....    DCD    8
        0x000047f0:    00000000    ....    DCD    0
        0x000047f4:    20000000    ...     DCD    536870912
        0x000047f8:    08200008    .. .    DCD    136314888
        0x000047fc:    06082000    . ..    DCD    101195776
        0x00004800:    3f06f83f    ?..?    DCD    1057421375
        0x00004804:    080000f8    ....    DCD    134217976
        0x00004808:    00080000    ....    DCD    524288
        0x0000480c:    00000800    ....    DCD    2048
        0x00004810:    00000000    ....    DCD    0
        0x00004814:    00000000    ....    DCD    0
        0x00004818:    00000000    ....    DCD    0
        0x0000481c:    03000003    ....    DCD    50331651
        0x00004820:    00012000    . ..    DCD    73728
        0x00004824:    20000120     ..     DCD    536871200
        0x00004828:    fe3f0603    ..?.    DCD    4265543171
        0x0000482c:    00fc3f06    .?..    DCD    16531206
        0x00004830:    00000000    ....    DCD    0
        0x00004834:    00000000    ....    DCD    0
        0x00004838:    04000000    ....    DCD    67108864
        0x0000483c:    ff070800    ....    DCD    4278650880
        0x00004840:    f8ff0ff8    ....    DCD    4177465336
        0x00004844:    00880100    ....    DCD    8913152
        0x00004848:    2f000003    .../    DCD    788529155
        0x0000484c:    f83800c0    ..8.    DCD    4164419776
        0x00004850:    00382000    . 8.    DCD    3678208
        0x00004854:    00000820     ...    DCD    2080
        0x00004858:    00000008    ....    DCD    8
        0x0000485c:    00000000    ....    DCD    0
        0x00004860:    00040000    ....    DCD    262144
        0x00004864:    08000408    ....    DCD    134218760
        0x00004868:    07080004    ....    DCD    117964804
        0x0000486c:    ff0ff8ff    ....    DCD    4279236863
        0x00004870:    080000f8    ....    DCD    134217976
        0x00004874:    00080000    ....    DCD    524288
        0x00004878:    00000800    ....    DCD    2048
        0x0000487c:    00000000    ....    DCD    0
        0x00004880:    00082000    . ..    DCD    532480
        0x00004884:    3f00f83f    ?..?    DCD    1057028159
        0x00004888:    081000f8    ....    DCD    135266552
        0x0000488c:    00002000    . ..    DCD    8192
        0x00004890:    3f00f83f    ?..?    DCD    1057028159
        0x00004894:    081000f8    ....    DCD    135266552
        0x00004898:    00002000    . ..    DCD    8192
        0x0000489c:    3f00f83f    ?..?    DCD    1057028159
        0x000048a0:    080000f8    ....    DCD    134217976
        0x000048a4:    00000000    ....    DCD    0
        0x000048a8:    3f000820     ..?    DCD    1056966688
        0x000048ac:    f83f00f8    ..?.    DCD    4164878584
        0x000048b0:    00081000    ....    DCD    528384
        0x000048b4:    20000010    ...     DCD    536870928
        0x000048b8:    08200000    .. .    DCD    136314880
        0x000048bc:    00f83f00    .?..    DCD    16269056
        0x000048c0:    0000f81f    ....    DCD    63519
        0x000048c4:    00000008    ....    DCD    8
        0x000048c8:    00000000    ....    DCD    0
        0x000048cc:    0f00c007    ....    DCD    251707399
        0x000048d0:    301800f0    ...0    DCD    806879472
        0x000048d4:    00083000    .0..    DCD    536576
        0x000048d8:    20000820     ..     DCD    536872992
        0x000048dc:    08300008    ..0.    DCD    137363464
        0x000048e0:    00301800    ..0.    DCD    3151872
        0x000048e4:    0700f00f    ....    DCD    117501967
        0x000048e8:    000000c0    ....    DCD    192
        0x000048ec:    00000000    ....    DCD    0
        0x000048f0:    3f000120     ..?    DCD    1056964896
        0x000048f4:    ff3f00ff    ..?.    DCD    4282319103
        0x000048f8:    00111000    ....    DCD    1118208
        0x000048fc:    20000920     ..     DCD    536873248
        0x00004900:    08200008    .. .    DCD    136314888
        0x00004904:    00383000    .08.    DCD    3682304
        0x00004908:    0f00f01f    ....    DCD    251719711
        0x0000490c:    000000c0    ....    DCD    192
        0x00004910:    00000000    ....    DCD    0
        0x00004914:    1f00c007    ....    DCD    520142855
        0x00004918:    183800f0    ..8.    DCD    406323440
        0x0000491c:    00082000    . ..    DCD    532480
        0x00004920:    20000820     ..     DCD    536872992
        0x00004924:    11100009    ....    DCD    286261257
        0x00004928:    00ff1f00    ....    DCD    16719616
        0x0000492c:    0000ff3f    ?...    DCD    65343
        0x00004930:    00000001    ....    DCD    1
        0x00004934:    00082000    . ..    DCD    532480
        0x00004938:    20000820     ..     DCD    536872992
        0x0000493c:    f83f0008    ..?.    DCD    4164878344
        0x00004940:    00f83f00    .?..    DCD    16269056
        0x00004944:    10000808    ....    DCD    268437512
        0x00004948:    08200008    .. .    DCD    136314888
        0x0000494c:    00002000    . ..    DCD    8192
        0x00004950:    30000030    0..0    DCD    805306416
        0x00004954:    00000000    ....    DCD    0
        0x00004958:    00000000    ....    DCD    0
        0x0000495c:    0c000000    ....    DCD    201326592
        0x00004960:    181e0078    x...    DCD    404619384
        0x00004964:    00083300    .3..    DCD    537344
        0x00004968:    21000823    #..!    DCD    553650211
        0x0000496c:    88210008    ..!.    DCD    2283864072
        0x00004970:    00982100    .!..    DCD    9969920
        0x00004974:    3800f030    0..8    DCD    939585584
        0x00004978:    00000060    `...    DCD    96
        0x0000497c:    00000000    ....    DCD    0
        0x00004980:    20000020     ..     DCD    536870944
        0x00004984:    00200000    .. .    DCD    2097152
        0x00004988:    03f0ff00    ....    DCD    66125568
        0x0000498c:    2000f8ff    ...     DCD    536934655
        0x00004990:    08200008    .. .    DCD    136314888
        0x00004994:    00082000    . ..    DCD    532480
        0x00004998:    00003000    .0..    DCD    12288
        0x0000499c:    00000000    ....    DCD    0
        0x000049a0:    00000000    ....    DCD    0
        0x000049a4:    3f000020     ..?    DCD    1056964640
        0x000049a8:    f87f00f0    ....    DCD    4169072880
        0x000049ac:    00180000    ....    DCD    1572864
        0x000049b0:    00000800    ....    DCD    2048
        0x000049b4:    10200008    .. .    DCD    270532616
        0x000049b8:    00f83f00    .?..    DCD    16269056
        0x000049bc:    0000f07f    ....    DCD    61567
        0x000049c0:    00000010    ....    DCD    16
        0x000049c4:    00000000    ....    DCD    0
        0x000049c8:    30000020     ..0    DCD    805306400
        0x000049cc:    003c0000    ..<.    DCD    3932160
        0x000049d0:    00803f00    .?..    DCD    8404736
        0x000049d4:    0000f023    #...    DCD    61475
        0x000049d8:    70000078    x..p    DCD    1879048312
        0x000049dc:    00802300    .#..    DCD    8397568
        0x000049e0:    3000003c    <..0    DCD    805306428
        0x000049e4:    00200000    .. .    DCD    2097152
        0x000049e8:    00002000    . ..    DCD    8192
        0x000049ec:    3f00003c    <..?    DCD    1056964668
        0x000049f0:    f82300e0    ..#.    DCD    4163043552
        0x000049f4:    00e00000    ....    DCD    14680064
        0x000049f8:    3e000027    '..>    DCD    1040187431
        0x000049fc:    e03f0000    ..?.    DCD    3762225152
        0x00004a00:    00f82100    .!..    DCD    16261376
        0x00004a04:    3e00e001    ...>    DCD    1040244737
        0x00004a08:    00200000    .. .    DCD    2097152
        0x00004a0c:    00000000    ....    DCD    0
        0x00004a10:    20000820     ..     DCD    536872992
        0x00004a14:    38380008    ..88    DCD    943194120
        0x00004a18:    00683e00    .>h.    DCD    6831616
        0x00004a1c:    03008027    '...    DCD    50364455
        0x00004a20:    f82c00c8    ..,.    DCD    4163633352
        0x00004a24:    00383800    .88.    DCD    3684352
        0x00004a28:    20001820     ..     DCD    536877088
        0x00004a2c:    00000008    ....    DCD    8
        0x00004a30:    00000000    ....    DCD    0
        0x00004a34:    30000020     ..0    DCD    805306400
        0x00004a38:    013c0003    ..<.    DCD    20709379
        0x00004a3c:    00833f00    .?..    DCD    8601344
        0x00004a40:    0000ec23    #...    DCD    60451
        0x00004a44:    80230070    p.#.    DCD    2149777520
        0x00004a48:    00003c00    .<..    DCD    15360
        0x00004a4c:    20000020     ..     DCD    536870944
        0x00004a50:    00000000    ....    DCD    0
        0x00004a54:    00000000    ....    DCD    0
        0x00004a58:    38000000    ...8    DCD    939524096
        0x00004a5c:    38200008    .. 8    DCD    941621256
        0x00004a60:    00f82000    . ..    DCD    16261120
        0x00004a64:    2f00e823    #../    DCD    788588579
        0x00004a68:    083e0088    ..>.    DCD    138281096
        0x00004a6c:    00083800    .8..    DCD    538624
        0x00004a70:    00001820     ...    DCD    6176
        0x00004a74:    00000070    p...    DCD    112
        0x00004a78:    00000000    ....    DCD    0
        0x00004a7c:    00000000    ....    DCD    0
        0x00004a80:    00000000    ....    DCD    0
        0x00004a84:    00000000    ....    DCD    0
        0x00004a88:    14000008    ....    DCD    335544328
        0x00004a8c:    fcf71f00    ....    DCD    4244053760
        0x00004a90:    20060030    0..     DCD    537264176
        0x00004a94:    00000200    ....    DCD    512
        0x00004a98:    00000000    ....    DCD    0
        0x00004a9c:    00000000    ....    DCD    0
        0x00004aa0:    00000000    ....    DCD    0
        0x00004aa4:    00000000    ....    DCD    0
        0x00004aa8:    00000000    ....    DCD    0
        0x00004aac:    ffff0000    ....    DCD    4294901760
        0x00004ab0:    000000ff    ....    DCD    255
        0x00004ab4:    00000000    ....    DCD    0
        0x00004ab8:    00000000    ....    DCD    0
        0x00004abc:    00000000    ....    DCD    0
        0x00004ac0:    00000000    ....    DCD    0
        0x00004ac4:    00200000    .. .    DCD    2097152
        0x00004ac8:    06003002    .0..    DCD    100675586
        0x00004acc:    00fcf71f    ....    DCD    16578335
        0x00004ad0:    08000014    ....    DCD    134217748
        0x00004ad4:    00000000    ....    DCD    0
        0x00004ad8:    00000000    ....    DCD    0
        0x00004adc:    00000000    ....    DCD    0
        0x00004ae0:    00000000    ....    DCD    0
        0x00004ae4:    18000000    ....    DCD    402653184
        0x00004ae8:    00600000    ..`.    DCD    6291456
        0x00004aec:    00004000    .@..    DCD    16384
        0x00004af0:    20000040    @..     DCD    536870976
        0x00004af4:    00100000    ....    DCD    1048576
        0x00004af8:    00000800    ....    DCD    2048
        0x00004afc:    04000004    ....    DCD    67108868
        0x00004b00:    000c0000    ....    DCD    786432
        0x00004b04:    00001000    ....    DCD    4096
    Region$$Table$$Base
        0x00004b08:    00004b28    (K..    DCD    19240
        0x00004b0c:    20000000    ...     DCD    536870912
        0x00004b10:    00000054    T...    DCD    84
        0x00004b14:    00001e50    P...    DCD    7760
        0x00004b18:    00004b7c    |K..    DCD    19324
        0x00004b1c:    20000054    T..     DCD    536870996
        0x00004b20:    00000c4c    L...    DCD    3148
        0x00004b24:    00001e60    `...    DCD    7776
    Region$$Table$$Limit

** Section #2 'RW_IRAM1' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 84 bytes (alignment 4)
    Address: 0x20000000

    0x20000000:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x20000010:   4d 29 00 00 e9 28 00 00 cd 29 00 00 d9 29 00 00    M)...(...)...)..
    0x20000020:   ed 04 00 00 d1 04 00 00 00 00 00 01 3c 07 00 43    ............<..C
    0x20000030:   30 00 44 f0 00 44 0f 01 46 01 01 46 0c 00 00 00    0.D..D..F..F....
    0x20000040:   00 00 23 2d 37 00 00 00 00 00 00 00 00 00 00 00    ..#-7...........
    0x20000050:   00 00 00 00                                        ....


** Section #3 'RW_IRAM1' (SHT_NOBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 3148 bytes (alignment 8)
    Address: 0x20000054


** Section #4 '.debug_abbrev' (SHT_PROGBITS)
    Size   : 1476 bytes


** Section #5 '.debug_frame' (SHT_PROGBITS)
    Size   : 4080 bytes


** Section #6 '.debug_info' (SHT_PROGBITS)
    Size   : 88524 bytes


** Section #7 '.debug_line' (SHT_PROGBITS)
    Size   : 22128 bytes


** Section #8 '.debug_loc' (SHT_PROGBITS)
    Size   : 9564 bytes


** Section #9 '.debug_macinfo' (SHT_PROGBITS)
    Size   : 234584 bytes


** Section #10 '.debug_pubnames' (SHT_PROGBITS)
    Size   : 5348 bytes


** Section #11 '.symtab' (SHT_SYMTAB)
    Size   : 10672 bytes (alignment 4)
    String table #12 '.strtab'
    Last local symbol no. 403


** Section #12 '.strtab' (SHT_STRTAB)
    Size   : 9268 bytes


** Section #13 '.note' (SHT_NOTE)
    Size   : 28 bytes (alignment 4)


** Section #14 '.comment' (SHT_PROGBITS)
    Size   : 24176 bytes


** Section #15 '.shstrtab' (SHT_STRTAB)
    Size   : 156 bytes


address     size       variable name                            type
0x20000099  0x400      OLED_GRAM                                array[128] of array[8] of uint8_t

address     size       variable name                            type
0x00003348  0x474      asc2_1206                                array[95] of array[12] of const unsigned char

address     size       variable name                            type
0x000037bc  0x5f0      asc2_1608                                array[95] of array[16] of const unsigned char

address     size       variable name                            type
0x00003dac  0xd5c      asc2_2412                                array[95] of array[36] of const unsigned char

address     size       variable name                            type
0x20000054  0x2e       RxBuf                                    array[46] of u8

address     size       variable name                            type
0x00000000  0x17       TxData                                   array[23] of u8

address     size       variable name                            type
0x00000000  0x1a       a7535_TxBuf                              array[26] of u8

address     size       variable name                            type
0x20000082  0x17       a7535_decodeBuf                          array[23] of u8

address     size       variable name                            type
0x000032c0  0x44       a7535_gRfConfig                          const RFConfig_t
0x000032c0  0x1        a7535_gRfConfig.Channel                  uint8_t
0x000032c1  0x1        a7535_gRfConfig.TxPower                  PAN216_TxPower_t
0x000032c2  0x1        a7535_gRfConfig.DataRate                 PAN216_DataRate_t
0x000032c3  0x1        a7535_gRfConfig.Crc                      PAN216_Crc_t
0x000032c4  0x1        a7535_gRfConfig.ChipMode                 PAN216_ChipMode_t
0x000032c5  0x1        a7535_gRfConfig.WorkMode                 PAN216_WorkMode_t
0x000032c6  0x1        a7535_gRfConfig.TxAddrWidth              PAN216_AddrWidth_t
0x000032c7  0x5        a7535_gRfConfig.TxAddr                   array[5] of uint8_t
0x000032cc  0x1        a7535_gRfConfig.RxAddrWidth              PAN216_AddrWidth_t
0x000032cd  0x24       a7535_gRfConfig.RxAddr                   array[6] of RxPipeAddr_t
0x000032f1  0x1        a7535_gRfConfig.TxLen                    u8
0x000032f2  0x1        a7535_gRfConfig.RxLen                    u8
0x000032f3  0x1        a7535_gRfConfig.EnWhite                  _Bool
0x000032f4  0x1        a7535_gRfConfig.EnDPL                    _Bool
0x000032f5  0x1        a7535_gRfConfig.EnTxNoAck                _Bool
0x000032f6  0x1        a7535_gRfConfig.crcSkipAddr              _Bool
0x000032f7  0x1        a7535_gRfConfig.Endian                   PAN216_Endian_t
0x000032f8  0x2        a7535_gRfConfig.TRxDelayTimeUs           u16
0x000032fa  0x2        a7535_gRfConfig.RxTimeoutUs              u16
0x000032fc  0x2        a7535_gRfConfig.AutoDelayUs              u16
0x000032fe  0x1        a7535_gRfConfig.AutoMaxCnt               u8
0x000032ff  0x1        a7535_gRfConfig.EnManuPid                u8
0x00003300  0x1        a7535_gRfConfig.EnRxPlLenLimit           _Bool
0x00003301  0x1        a7535_gRfConfig.TxMode                   PAN216_TxMode_t
0x00003302  0x1        a7535_gRfConfig.RxMode                   PAN216_RxMode_t

address     size       variable name                            type
0x00000000  0x1        channel_count                            u8

address     size       variable name                            type
0x00000000  0x1        channel_index                            u8

address     size       variable name                            type
0x20000042  0x3        channel_table                            array[3] of u8

address     size       variable name                            type
0x20000048  0x4        count                                    int

address     size       variable name                            type
0x20000041  0x1        is_pair                                  u8

address     size       variable name                            type
0x20000040  0x1        now_channel                              u8

address     size       variable name                            type
0x2000004c  0x4        now_rfconfig                             pointer to RFConfig_t

address     size       variable name                            type
0x00000000  0x1e       xn297l_TxBuf                             array[30] of u8

address     size       variable name                            type
0x00003304  0x44       xn297l_gRfConfig                         const RFConfig_t
0x00003304  0x1        xn297l_gRfConfig.Channel                 uint8_t
0x00003305  0x1        xn297l_gRfConfig.TxPower                 PAN216_TxPower_t
0x00003306  0x1        xn297l_gRfConfig.DataRate                PAN216_DataRate_t
0x00003307  0x1        xn297l_gRfConfig.Crc                     PAN216_Crc_t
0x00003308  0x1        xn297l_gRfConfig.ChipMode                PAN216_ChipMode_t
0x00003309  0x1        xn297l_gRfConfig.WorkMode                PAN216_WorkMode_t
0x0000330a  0x1        xn297l_gRfConfig.TxAddrWidth             PAN216_AddrWidth_t
0x0000330b  0x5        xn297l_gRfConfig.TxAddr                  array[5] of uint8_t
0x00003310  0x1        xn297l_gRfConfig.RxAddrWidth             PAN216_AddrWidth_t
0x00003311  0x24       xn297l_gRfConfig.RxAddr                  array[6] of RxPipeAddr_t
0x00003335  0x1        xn297l_gRfConfig.TxLen                   u8
0x00003336  0x1        xn297l_gRfConfig.RxLen                   u8
0x00003337  0x1        xn297l_gRfConfig.EnWhite                 _Bool
0x00003338  0x1        xn297l_gRfConfig.EnDPL                   _Bool
0x00003339  0x1        xn297l_gRfConfig.EnTxNoAck               _Bool
0x0000333a  0x1        xn297l_gRfConfig.crcSkipAddr             _Bool
0x0000333b  0x1        xn297l_gRfConfig.Endian                  PAN216_Endian_t
0x0000333c  0x2        xn297l_gRfConfig.TRxDelayTimeUs          u16
0x0000333e  0x2        xn297l_gRfConfig.RxTimeoutUs             u16
0x00003340  0x2        xn297l_gRfConfig.AutoDelayUs             u16
0x00003342  0x1        xn297l_gRfConfig.AutoMaxCnt              u8
0x00003343  0x1        xn297l_gRfConfig.EnManuPid               u8
0x00003344  0x1        xn297l_gRfConfig.EnRxPlLenLimit          _Bool
0x00003345  0x1        xn297l_gRfConfig.TxMode                  PAN216_TxMode_t
0x00003346  0x1        xn297l_gRfConfig.RxMode                  PAN216_RxMode_t

address     size       variable name                            type
0x00002f38  0x40       RxDemodIndex                             array[16] of const anonymous

address     size       variable name                            type
0x00002ea8  0x90       RxDemodTable                             array[16] of const anonymous

address     size       variable name                            type
0x00002e84  0x24       TxDemodIndex                             array[12] of const anonymous

address     size       variable name                            type
0x00002e60  0x24       TxDemodTable                             array[2] of const anonymous

address     size       variable name                            type
0x20000028  0x1        _gChipMode                               uint8_t

address     size       variable name                            type
0x20000029  0x1        _gDataRate                               uint8_t

address     size       variable name                            type
0x2000002a  0x1        _gS2S8Mode                               uint8_t

address     size       variable name                            type
0x00002f78  0x348      sop8_power_table                         array[30] of const anonymous

address     size       variable name                            type
0x2000002b  0x12       sop8_power_table_reg                     array[6] of array[3] of uint8_t

address     size       variable name                            type
0x20000010  0x18       Pan216_Funs                              PAN216_Fun_t
0x20000010  0x4        Pan216_Funs.spi_writebyte                pointer to function 
0x20000014  0x4        Pan216_Funs.spi_readbyte                 pointer to function 
0x20000018  0x4        Pan216_Funs.spi_cs_high                  pointer to function 
0x2000001c  0x4        Pan216_Funs.spi_cs_low                   pointer to function 
0x20000020  0x4        Pan216_Funs.delayus                      pointer to function 
0x20000024  0x4        Pan216_Funs.delayms                      pointer to function 

address     size       variable name                            type
0x20000008  0x4        g_SystemTick                             volatile uint32_t

address     size       variable name                            type
0x00000000  0x1        PanFlashEnhanceEnable                    const _Bool

address     size       variable name                            type
0x00000000  0x4        PanFlashLineMode                         const uint32_t

address     size       variable name                            type
0x00000000  0x4        SocTemperature                           float

address     size       variable name                            type
0x20000000  0x4        SystemCoreClock                          uint32_t

address     size       variable name                            type
0x00000000  0x100      otp                                      OTP_STRUCT_T
0x00000000  0x100      otp.d8                                   array[256] of uint8_t
0x00000000  0x100      otp.m                                    anonymous
0x00000000  0x1        otp.m.rsvd0                              uint8_t
0x00000001  0x1        otp.m.mp_ver                             uint8_t
0x00000002  0x1        otp.m.chip_ver                           uint8_t
0x00000003  0x1        otp.m.cp_version                         uint8_t
0x00000004  0x8        otp.m.uid                                array[8] of uint8_t
0x0000000c  0x1        otp.m.wafer_number                       uint8_t
0x0000000d  0x1(4:4)   otp.m.ana_ldo                            uint8_t
0x0000000d  0x1(0:4)   otp.m.rffe_ldo                           uint8_t
0x0000000e  0x1(4:4)   otp.m.fsync_ldo                          uint8_t
0x0000000e  0x1(0:4)   otp.m.rxadc_ldo                          uint8_t
0x0000000f  0x1(4:4)   otp.m.vco_ldo                            uint8_t
0x0000000f  0x1(0:4)   otp.m.temp_low                           uint8_t
0x00000010  0x1        otp.m.temp_high                          uint8_t
0x00000011  0x1        otp.m.c_rch                              uint8_t
0x00000012  0x4        otp.m.f_rch                              uint32_t
0x00000016  0x1(2:6)   otp.m.rcl_coarse                         uint8_t
0x00000016  0x1(0:2)   otp.m.rsvd1                              uint8_t
0x00000017  0x1(2:6)   otp.m.rcl_fine                           uint8_t
0x00000017  0x1(0:2)   otp.m.rsvd2                              uint8_t
0x00000018  0x1(4:4)   otp.m.rsvd3                              uint8_t
0x00000018  0x1(1:3)   otp.m.rcl_rsvd_1                         uint8_t
0x00000018  0x1(0:1)   otp.m.rsvd3_1                            uint8_t
0x00000019  0x2        otp.m.f_rcl                              uint16_t
0x0000001b  0x6        otp.m.mac_addr                           array[6] of uint8_t
0x00000021  0x1(5:3)   otp.m.c_lldo                             uint8_t
0x00000021  0x1(4:1)   otp.m.rsvd4                              uint8_t
0x00000021  0x1(0:4)   otp.m.v_lldo_low                         uint8_t
0x00000022  0x1        otp.m.v_lldo_high                        uint8_t
0x00000023  0x1(4:4)   otp.m.c_hldo                             uint8_t
0x00000023  0x1(0:4)   otp.m.v_hldo_low                         uint8_t
0x00000024  0x1        otp.m.v_hldo_high                        uint8_t
0x00000025  0x1(5:3)   otp.m.c_vbg                              uint8_t
0x00000025  0x1(4:1)   otp.m.rsvd5                              uint8_t
0x00000025  0x1(0:4)   otp.m.v_vbg_low                          uint8_t
0x00000026  0x1        otp.m.v_vbg_high                         uint8_t
0x00000027  0x1(2:6)   otp.m.c_adcvbg                           uint8_t
0x00000027  0x1(0:2)   otp.m.rsvd6                              uint8_t
0x00000028  0x2        otp.m.v_adcvbg                           uint16_t
0x0000002a  0x1(4:4)   otp.m.rsvd7                              uint8_t
0x0000002a  0x1(0:4)   otp.m.c_temp_low                         uint8_t
0x0000002b  0x1        otp.m.c_temp_high                        uint8_t
0x0000002c  0x1        otp.m.lldo_p56_4b                        uint8_t
0x0000002d  0x1        otp.m.lldo_kscan_4b                      uint8_t
0x0000002e  0x2        otp.m.rsvd8                              array[2] of uint8_t
0x00000030  0x3        otp.m.adc_data_vbgcode_00                array[3] of uint8_t
0x00000033  0x3        otp.m.adc_data_vbgcode_3f                array[3] of uint8_t
0x00000036  0x1        otp.m.c_vdd_4_high                       uint8_t
0x00000037  0x1(4:4)   otp.m.v_bat_low                          uint8_t
0x00000037  0x1(0:4)   otp.m.c_vdd_4_low                        uint8_t
0x00000038  0x1        otp.m.v_bat_high                         uint8_t
0x00000039  0x2        otp.m.adc_vdd_k                          uint16_t
0x0000003b  0x2        otp.m.adc_vdd_b                          uint16_t
0x0000003d  0x1(5:3)   otp.m.c_bodref                           uint8_t
0x0000003d  0x1(4:1)   otp.m.rsvd9                              uint8_t
0x0000003d  0x1(0:4)   otp.m.v_bodref_low                       uint8_t
0x0000003e  0x1        otp.m.v_bodref_high                      uint8_t
0x0000003f  0x2        otp.m.adc_vbg_k                          uint16_t
0x00000041  0x2        otp.m.adc_vbg_b                          uint16_t
0x00000043  0x1        otp.m.lldo_p56                           uint8_t
0x00000044  0x1        otp.m.lldo_kscan                         uint8_t
0x00000045  0x1        otp.m.lldo_timer                         uint8_t
0x00000046  0x1        otp.m.lldo_m0                            uint8_t
0x00000047  0x1(5:3)   otp.m.id_buck_vc                         uint8_t
0x00000047  0x1(0:5)   otp.m.rsvd10                             uint8_t
0x00000048  0x1(3:5)   otp.m.id_buck_i                          uint8_t
0x00000048  0x1(0:3)   otp.m.rsvd11                             uint8_t
0x00000049  0x1        otp.m.id_buck_freq                       uint8_t
0x0000004a  0x1(3:5)   otp.m.id_buck_refcal                     uint8_t
0x0000004a  0x1(0:3)   otp.m.rsvd12                             uint8_t
0x0000004b  0x1(2:6)   otp.m.c_adcvbg1                          uint8_t
0x0000004b  0x1(0:2)   otp.m.rsvd13                             uint8_t
0x0000004c  0x2        otp.m.v_adcvbg1                          uint16_t
0x0000004e  0x1        otp.m.sram_test_flag                     uint8_t
0x0000004f  0x1(4:4)   otp.m.rsvd14                             uint8_t
0x0000004f  0x1(0:4)   otp.m.c_temp_low_1                       uint8_t
0x00000050  0x1        otp.m.c_temp_high_1                      uint8_t
0x00000051  0x1        otp.m.rf1                                uint8_t
0x00000052  0x1        otp.m.ft_version                         uint8_t
0x00000053  0x1        otp.m.cp_checksum                        uint8_t
0x00000054  0x1        otp.m.ft_checksum                        uint8_t
0x00000055  0xb        otp.m.rsvd15                             array[11] of uint8_t
0x00000060  0x21       otp.m.adc_data_refvbg                    array[33] of uint8_t
0x00000081  0x3e       otp.m.rsvd16                             array[62] of uint8_t
0x000000bf  0x1        otp.m.feature_ctrl                       uint8_t
0x000000c0  0x10       otp.m.aes_key                            array[16] of uint8_t
0x000000d0  0x1(7:1)   otp.m.secure_enabled                     uint8_t
0x000000d0  0x1(6:1)   otp.m.anti_inject_en                     uint8_t
0x000000d0  0x1(0:6)   otp.m.rsvd17                             uint8_t
0x000000d1  0x3        otp.m.flash_enc_ofst                     array[3] of uint8_t
0x000000d4  0x14       otp.m.user_ro_data                       array[20] of uint8_t
0x000000e8  0x1        otp.m.misoperate_flag                    uint8_t
0x000000e9  0x17       otp.m.user_rw_data                       array[23] of uint8_t

