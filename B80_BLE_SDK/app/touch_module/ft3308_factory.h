/**
*********************************************************************************************************
*               Copyright(c) 2024, Seneasy Corporation. All rights reserved.
**********************************************************************************************************
* @file     ft3308_factory.h
* @brief    
* @details
* @author   huzhuohuan
* @date     2024-10-22
* @version  v1.0
*********************************************************************************************************
*/

#ifndef __FT3308_HANDLE__
#define __FT3308_HANDLE__

/*============================================================================*
 *                              Header Files
 *============================================================================*/

#include "app_config.h"
#include "driver.h"
#include "../../tl_common.h"
#include "ft3308_driver.h"

/*============================================================================*
*                        Export Global Variables
*============================================================================*/

// Defines whether to perform factory checks (0 = No, 1 = Yes).
#define COMFIRM_FACTORY_CHECK       0

// Specifies the I2C address of the FT3308 device.
#define FT3308_I2C_DEV_ADDR         0x70

// Defines the maximum number of channels for data readings.
#define MAX_CHANNEL_NUM              35

// Specifies the number of raw data points to read per pressure test.
#define RAW_NUM_P                    10

// Defines the number of retries for reading noise data.
#define READ_NOISE_DATA_RETRIES      5

// Defines the maximum noise threshold for each channel (arbitrary value, adjust as needed).
#define NOISE_MAX { \
10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, \
10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, \
}

// Defines the minimum touch difference threshold for each channel (arbitrary value, adjust as needed).
#define TOUCH_DIFF_MIN { \
3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, \
3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, \
}

// Defines the maximum touch difference threshold for each channel (arbitrary value, adjust as needed).
#define TOUCH_DIFF_MAX { \
10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, \
10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, \
}

//-----------------------------------------
#if (COMFIRM_FACTORY_CHECK)
#define HALF_RAW_MIN { \
20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, \
20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000,  \
}

#define HALF_RAW_MAX { \
32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, \
32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000,  \
}

//threshold of cb
#define HALF_CB_MIN { \
83, 73, 78, 69, 76, 69, 86, 87, 82, 73, 75, 72, 95, 97, 87, 84, 80, 84, \
101, 96, 84, 86, 84, 89, 104, 112, 96, 97, 91, 89, 119, 120, 110, 109, 108,  \
}

#define HALF_CB_MAX { \
185, 175, 180, 171, 178, 171, 188, 189, 184, 175, 177, 174, 197, 199, 189, 186, 182, 186, \
203, 198, 186, 188, 186, 191, 206, 214, 198, 199, 193, 191, 221, 222, 212, 211, 210,  \
}

//threshold of short
#define HALF_SHORT_MIN { \
109, 102, 106, 97, 102, 90, 108, 109, 104, 95, 99, 93, 118, 119, 110, 106, 103, 106, \
123, 119, 107, 108, 106, 112, 127, 135, 118, 120, 115, 112, 142, 144, 133, 133, 132,  \
}

#define HALF_SHORT_MAX { \
500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, \
500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,  \
}

#define HALF_NOISE_MAX { \
10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, \
10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, \
}


//threshold of rawdata
#define RAW_MIN { \
19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, \
19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, 19000, \
}

#define RAW_MAX { \
33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, \
33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000, 33000,  \
}

//threshold of cb
#define CB_MIN { \
78, 69, 73, 65, 71, 65, 81, 82, 78, 68, 71, 68, 90, 91, 83, 80, 75, 80, \
96, 90, 79, 82, 79, 84, 99, 107, 90, 92, 86, 84, 114, 115, 104, 104, 103, \
}

#define CB_MAX { \
188, 179, 183, 175, 181, 175, 191, 192, 188, 178, 181, 178, 200, 201, 193, 190, 185, 190, \
206, 200, 189, 192, 189, 194, 209, 217, 200, 202, 196, 194, 224, 225, 214, 214, 213, \
}

//threshold of short
#define SHORT_MIN { \
105, 98, 102, 94, 99, 88, 104, 105, 101, 92, 96, 91, 114, 116, 106, 103, 100, 103, \
120, 115, 103, 105, 103, 108, 123, 131, 115, 116, 111, 108, 138, 139, 130, 129, 129, \
}

#define SHORT_MAX { \
500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, \
500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, \
}

#endif 

/*============================================================================*
 *                          Functions
 *============================================================================*/
extern void half_product_test(u8 *buf);
extern void product_pressure_test(u8 *buf);
extern void product_wo_pressure_test(u8 *buf);
extern int fts_enter_work_mode(void);
extern void touch_read_raw_data(u8 *buf);
extern void touch_read_cb_data(u8 *buf);
extern void touch_read_short_data(u8 *buf);
extern void touch_read_noize_data(u8 *buf);
extern void touch_read_diff_data(u8 *buf);
#endif 